{"ast":null,"code":"import _objectSpread from \"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar e = function e(_e, t, o) {\n    Object.defineProperty(t, o, _e);\n  },\n  t = function t(e, _t) {\n    return {\n      kind: \"method\",\n      placement: \"prototype\",\n      key: _t.key,\n      descriptor: e\n    };\n  },\n  o = function o(_ref) {\n    var e = _ref.finisher,\n      t = _ref.descriptor;\n    return function (o, n) {\n      var r;\n      if (void 0 === n) {\n        var _n = null !== (r = o.originalKey) && void 0 !== r ? r : o.key,\n          i = null != t ? {\n            kind: \"method\",\n            placement: \"prototype\",\n            key: _n,\n            descriptor: t(o.key)\n          } : _objectSpread(_objectSpread({}, o), {}, {\n            key: _n\n          });\n        return null != e && (i.finisher = function (t) {\n          e(t, _n);\n        }), i;\n      }\n      {\n        var _r = o.constructor;\n        void 0 !== t && Object.defineProperty(o, n, t(n)), null == e || e(_r, n);\n      }\n    };\n  };\nexport { o as decorateProperty, e as legacyPrototypeMethod, t as standardPrototypeMethod };","map":{"version":3,"mappings":";;;;;;AA+Ba,QAAwB,WACnCA,IACAC,GACAC;IAEAC,OAAOC,eAAeH,GAAOC,GAAMF,GAAW;EAAA;EAGnCK,IAA0B,WACrCL,GACAM;IAAAA,OACI;MACJC,MAAM;MACNC,WAAW;MACXC,KAAKH,GAAQG;MACbT;IAAAA;EAAAA;EAgBWU,IACX,SADWA;IAAAA,IAETC;MACAX;IAAAA,OAOF,UACEY,GACAV;MAAAA;MAKA,SAAaW,MAATX,GAQG;QAGL,IAAMO,eAEJK,IAACF,EAA0BG,mCAC1BH,EAAmCH;UAChCO,IACUH,QAAdb,IACI;YACEO,MAAM;YACNC,WAAW;YACXC;YACAT,YAAYA,EAAYY,EAAmCH;UAAAA,oCAExDG;YAAoCH;UAAAA;QAQ/C,OAPgBI,QAAZF,MACFK,EAAKL,WAAW,UACdM;UAEAN,EAASM,GAA2CR,GACtD;QAAA,IAEKO,CACR;MAAA;MAhCuB;QACtB,IAAMC,KAAQL,EACXM;QAAAA,KACgBL,MAAfb,KACFG,OAAOC,eAAeQ,GAAmBV,GAAMF,EAAWE,KAE5DS,eAAWM,IAAMf,EAElB;MAAA;IAwBA;EAAA;AAAA","names":["descriptor","proto","name","Object","defineProperty","standardPrototypeMethod","element","kind","placement","key","decorateProperty","finisher","protoOrDescriptor","undefined","_a","originalKey","info","ctor","constructor"],"sources":["C:\\Users\\paete\\Prototype\\nftmusicProtoCopy\\client\\node_modules\\@lit\\reactive-element\\src\\decorators\\base.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ReactiveElement} from '../reactive-element.js';\n\nexport type Constructor<T> = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new (...args: any[]): T;\n};\n\n// From the TC39 Decorators proposal\nexport interface ClassDescriptor {\n  kind: 'class';\n  elements: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => void | Constructor<T>;\n}\n\n// From the TC39 Decorators proposal\nexport interface ClassElement {\n  kind: 'field' | 'method';\n  key: PropertyKey;\n  placement: 'static' | 'prototype' | 'own';\n  initializer?: Function;\n  extras?: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => void | Constructor<T>;\n  descriptor?: PropertyDescriptor;\n}\n\nexport const legacyPrototypeMethod = (\n  descriptor: PropertyDescriptor,\n  proto: Object,\n  name: PropertyKey\n) => {\n  Object.defineProperty(proto, name, descriptor);\n};\n\nexport const standardPrototypeMethod = (\n  descriptor: PropertyDescriptor,\n  element: ClassElement\n) => ({\n  kind: 'method',\n  placement: 'prototype',\n  key: element.key,\n  descriptor,\n});\n\n/**\n * Helper for decorating a property that is compatible with both TypeScript\n * and Babel decorators. The optional `finisher` can be used to perform work on\n * the class. The optional `descriptor` should return a PropertyDescriptor\n * to install for the given property.\n *\n * @param finisher {function} Optional finisher method; receives the element\n * constructor and property key as arguments and has no return value.\n * @param descriptor {function} Optional descriptor method; receives the\n * property key as an argument and returns a property descriptor to define for\n * the given property.\n * @returns {ClassElement|void}\n */\nexport const decorateProperty =\n  ({\n    finisher,\n    descriptor,\n  }: {\n    finisher?:\n      | ((ctor: typeof ReactiveElement, property: PropertyKey) => void)\n      | null;\n    descriptor?: (property: PropertyKey) => PropertyDescriptor;\n  }) =>\n  (\n    protoOrDescriptor: ReactiveElement | ClassElement,\n    name?: PropertyKey\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any => {\n    // TypeScript / Babel legacy mode\n    if (name !== undefined) {\n      const ctor = (protoOrDescriptor as ReactiveElement)\n        .constructor as typeof ReactiveElement;\n      if (descriptor !== undefined) {\n        Object.defineProperty(protoOrDescriptor, name, descriptor(name));\n      }\n      finisher?.(ctor, name!);\n      // Babel standard mode\n    } else {\n      // Note, the @property decorator saves `key` as `originalKey`\n      // so try to use it here.\n      const key =\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (protoOrDescriptor as any).originalKey ??\n        (protoOrDescriptor as ClassElement).key;\n      const info: ClassElement =\n        descriptor != undefined\n          ? {\n              kind: 'method',\n              placement: 'prototype',\n              key,\n              descriptor: descriptor((protoOrDescriptor as ClassElement).key),\n            }\n          : {...(protoOrDescriptor as ClassElement), key};\n      if (finisher != undefined) {\n        info.finisher = function <ReactiveElement>(\n          ctor: Constructor<ReactiveElement>\n        ) {\n          finisher(ctor as unknown as typeof ReactiveElement, key);\n        };\n      }\n      return info;\n    }\n  };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}