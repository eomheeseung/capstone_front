{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.depthwiseConv2dNativeImpl = exports.depthwiseConv2dNativeConfig = void 0;\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.depthwiseConv2dNativeConfig = {\n  kernelName: tfjs_1.DepthwiseConv2dNative,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var _a = args.inputs,\n      x = _a.x,\n      filter = _a.filter;\n    var backend = args.backend;\n    var _b = args.attrs,\n      strides = _b.strides,\n      pad = _b.pad,\n      dilations = _b.dilations,\n      dimRoundingMode = _b.dimRoundingMode;\n    var $dilations = dilations;\n    if ($dilations == null) {\n      $dilations = [1, 1];\n    }\n    var convInfo = tfjs_1.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n    return depthwiseConv2dNativeImpl(x, filter, convInfo, backend);\n  }\n};\nfunction depthwiseConv2dNativeImpl(input, filter, convInfo, backend) {\n  if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME' && convInfo.padInfo.type !== 'EXPLICIT') {\n    throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + \"while padding was \".concat(convInfo.padInfo.type));\n  }\n  var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n  var padding = convInfo.padInfo.type;\n  var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n  var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n  var opAttrs = [(0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)('T', input.dtype), {\n    name: 'strides',\n    type: backend.binding.TF_ATTR_INT,\n    value: strides\n  }, {\n    name: 'padding',\n    type: backend.binding.TF_ATTR_STRING,\n    value: padding\n  }, {\n    name: 'data_format',\n    type: backend.binding.TF_ATTR_STRING,\n    value: dataFormat\n  }, {\n    name: 'dilations',\n    type: backend.binding.TF_ATTR_INT,\n    value: dilations\n  }];\n  if (padding === 'EXPLICIT') {\n    var padValue = [convInfo.padInfo.top, convInfo.padInfo.bottom, convInfo.padInfo.left, convInfo.padInfo.right];\n    opAttrs.push({\n      name: 'explicit_paddings',\n      type: backend.binding.TF_ATTR_INT,\n      value: dataFormat === 'NHWC' ? __spreadArray(__spreadArray([0, 0], padValue, true), [0, 0], false) : __spreadArray([0, 0, 0, 0], padValue, true)\n    });\n  }\n  return backend.executeSingleOutput(tfjs_1.DepthwiseConv2dNative, opAttrs, [input, filter]);\n}\nexports.depthwiseConv2dNativeImpl = depthwiseConv2dNativeImpl;","map":{"version":3,"names":["__spreadArray","to","from","pack","arguments","length","i","l","ar","Array","prototype","slice","call","concat","Object","defineProperty","exports","value","depthwiseConv2dNativeImpl","depthwiseConv2dNativeConfig","tfjs_1","require","nodejs_kernel_backend_1","kernelName","DepthwiseConv2dNative","backendName","kernelFunc","args","_a","inputs","x","filter","backend","_b","attrs","strides","pad","dilations","dimRoundingMode","$dilations","convInfo","backend_util","computeConv2DInfo","shape","input","padInfo","type","Error","strideHeight","strideWidth","padding","dataFormat","dilationHeight","dilationWidth","opAttrs","createTensorsTypeOpAttr","dtype","name","binding","TF_ATTR_INT","TF_ATTR_STRING","padValue","top","bottom","left","right","push","executeSingleOutput"],"sources":["C:/Users/paete/CapstonPro/nftmusicProtoCopy/client/node_modules/@tensorflow/tfjs-node/dist/kernels/DepthwiseConv2dNative.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.depthwiseConv2dNativeImpl = exports.depthwiseConv2dNativeConfig = void 0;\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.depthwiseConv2dNativeConfig = {\n    kernelName: tfjs_1.DepthwiseConv2dNative,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var _a = args.inputs, x = _a.x, filter = _a.filter;\n        var backend = args.backend;\n        var _b = args.attrs, strides = _b.strides, pad = _b.pad, dilations = _b.dilations, dimRoundingMode = _b.dimRoundingMode;\n        var $dilations = dilations;\n        if ($dilations == null) {\n            $dilations = [1, 1];\n        }\n        var convInfo = tfjs_1.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n        return depthwiseConv2dNativeImpl(x, filter, convInfo, backend);\n    }\n};\nfunction depthwiseConv2dNativeImpl(input, filter, convInfo, backend) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME' &&\n        convInfo.padInfo.type !== 'EXPLICIT') {\n        throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n            \"while padding was \".concat(convInfo.padInfo.type));\n    }\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [\n        (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)('T', input.dtype),\n        { name: 'strides', type: backend.binding.TF_ATTR_INT, value: strides },\n        { name: 'padding', type: backend.binding.TF_ATTR_STRING, value: padding }, {\n            name: 'data_format',\n            type: backend.binding.TF_ATTR_STRING,\n            value: dataFormat\n        },\n        { name: 'dilations', type: backend.binding.TF_ATTR_INT, value: dilations }\n    ];\n    if (padding === 'EXPLICIT') {\n        var padValue = [\n            convInfo.padInfo.top, convInfo.padInfo.bottom, convInfo.padInfo.left,\n            convInfo.padInfo.right\n        ];\n        opAttrs.push({\n            name: 'explicit_paddings',\n            type: backend.binding.TF_ATTR_INT,\n            value: dataFormat === 'NHWC' ? __spreadArray(__spreadArray([0, 0], padValue, true), [0, 0], false) : __spreadArray([0, 0, 0, 0], padValue, true)\n        });\n    }\n    return backend.executeSingleOutput(tfjs_1.DepthwiseConv2dNative, opAttrs, [input, filter]);\n}\nexports.depthwiseConv2dNativeImpl = depthwiseConv2dNativeImpl;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}