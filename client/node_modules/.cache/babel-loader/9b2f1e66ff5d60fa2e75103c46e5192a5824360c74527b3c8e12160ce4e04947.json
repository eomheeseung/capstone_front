{"ast":null,"code":"'use strict';\n\nconst {\n  Multiaddr\n} = require('multiaddr');\nconst toCamel = require('../lib/object-to-camel');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\nconst multipartRequest = require('../lib/multipart-request');\nconst abortSignal = require('../lib/abort-signal');\nconst {\n  AbortController\n} = require('native-abort-controller');\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"put\"]}\n   */\n  function put(key, value) {\n    try {\n      let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return async function* () {\n        // allow aborting requests on body errors\n        const controller = new AbortController();\n        const signal = abortSignal(controller.signal, options.signal);\n        const res = await api.post('dht/put', {\n          signal,\n          searchParams: toUrlSearchParams({\n            arg: uint8ArrayToString(key),\n            ...options\n          }),\n          ...(await multipartRequest(value, controller, options.headers))\n        });\n        for await (let message of res.ndjson()) {\n          message = toCamel(message);\n          if (message.responses) {\n            message.responses = message.responses.map(( /** @type {{ ID: string, Addrs: string[] }} */_ref) => {\n              let {\n                ID,\n                Addrs\n              } = _ref;\n              return {\n                id: ID,\n                addrs: (Addrs || []).map(a => new Multiaddr(a))\n              };\n            });\n          }\n          yield message;\n        }\n      }();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  return put;\n});","map":{"version":3,"names":["Multiaddr","require","toCamel","configure","toUrlSearchParams","multipartRequest","abortSignal","AbortController","toString","uint8ArrayToString","module","exports","api","put","key","value","options","controller","signal","res","post","searchParams","arg","headers","message","ndjson","responses","map","ID","Addrs","id","addrs","a"],"sources":["C:/Users/paete/CapstonPro/nftmusicProtoCopy/client/node_modules/ipfs-http-client/src/dht/put.js"],"sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst multipartRequest = require('../lib/multipart-request')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"put\"]}\n   */\n  async function * put (key, value, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('dht/put', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: uint8ArrayToString(key),\n        ...options\n      }),\n      ...(\n        await multipartRequest(value, controller, options.headers)\n      )\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      if (message.responses) {\n        message.responses = message.responses.map((/** @type {{ ID: string, Addrs: string[] }} */ { ID, Addrs }) => ({\n          id: ID,\n          addrs: (Addrs || []).map(a => new Multiaddr(a))\n        }))\n      }\n      yield message\n    }\n  }\n\n  return put\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AAC1C,MAAMC,OAAO,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AACjD,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAA6B,CAAC;AAChE,MAAMI,gBAAgB,GAAGJ,OAAO,CAAC,0BAA0B,CAAC;AAC5D,MAAMK,WAAW,GAAGL,OAAO,CAAC,qBAAqB,CAAC;AAClD,MAAM;EAAEM;AAAgB,CAAC,GAAGN,OAAO,CAAC,yBAAyB,CAAC;AAC9D,MAAM;EAAEO,QAAQ,EAAEC;AAAmB,CAAC,GAAGR,OAAO,CAAC,uBAAuB,CAAC;;AAEzE;AACA;AACA;AACA;;AAEAS,MAAM,CAACC,OAAO,GAAGR,SAAS,CAACS,GAAG,IAAI;EAChC;AACF;AACA;EACE,SAAiBC,GAAG,CAAEC,GAAG,EAAEC,KAAK;IAAA;MAAA,IAAEC,OAAO,uEAAG,CAAC,CAAC;MAAA,0BAAE;QAC9C;QACA,MAAMC,UAAU,GAAG,IAAIV,eAAe,EAAE;QACxC,MAAMW,MAAM,GAAGZ,WAAW,CAACW,UAAU,CAACC,MAAM,EAAEF,OAAO,CAACE,MAAM,CAAC;QAE7D,MAAMC,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,SAAS,EAAE;UACpCF,MAAM;UACNG,YAAY,EAAEjB,iBAAiB,CAAC;YAC9BkB,GAAG,EAAEb,kBAAkB,CAACK,GAAG,CAAC;YAC5B,GAAGE;UACL,CAAC,CAAC;UACF,IACE,MAAMX,gBAAgB,CAACU,KAAK,EAAEE,UAAU,EAAED,OAAO,CAACO,OAAO,CAAC;QAE9D,CAAC,CAAC;QAEF,WAAW,IAAIC,OAAO,IAAIL,GAAG,CAACM,MAAM,EAAE,EAAE;UACtCD,OAAO,GAAGtB,OAAO,CAACsB,OAAO,CAAC;UAC1B,IAAIA,OAAO,CAACE,SAAS,EAAE;YACrBF,OAAO,CAACE,SAAS,GAAGF,OAAO,CAACE,SAAS,CAACC,GAAG,CAAC,EAAC;cAAA,IAA+C;gBAAEC,EAAE;gBAAEC;cAAM,CAAC;cAAA,OAAM;gBAC3GC,EAAE,EAAEF,EAAE;gBACNG,KAAK,EAAE,CAACF,KAAK,IAAI,EAAE,EAAEF,GAAG,CAACK,CAAC,IAAI,IAAIhC,SAAS,CAACgC,CAAC,CAAC;cAChD,CAAC;YAAA,CAAC,CAAC;UACL;UACA,MAAMR,OAAO;QACf;MACF,CAAC;IAAA;MAAA;IAAA;EAAA;EAED,OAAOX,GAAG;AACZ,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}