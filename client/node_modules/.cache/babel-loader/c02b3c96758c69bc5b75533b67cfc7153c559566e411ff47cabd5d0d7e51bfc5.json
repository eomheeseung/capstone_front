{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _wrapNativeSuper = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EthereumProviderError = exports.EthereumRpcError = void 0;\nvar fast_safe_stringify_1 = require(\"fast-safe-stringify\");\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP-1474.\n * Permits any integer error code.\n */\nvar EthereumRpcError = /*#__PURE__*/function (_Error) {\n  _inherits(EthereumRpcError, _Error);\n  var _super = _createSuper(EthereumRpcError);\n  function EthereumRpcError(code, message, data) {\n    var _this;\n    _classCallCheck(this, EthereumRpcError);\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== 'string') {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n    _this = _super.call(this, message);\n    _this.code = code;\n    if (data !== undefined) {\n      _this.data = data;\n    }\n    return _this;\n  }\n  /**\n   * Returns a plain object with all public class properties.\n   */\n  _createClass(EthereumRpcError, [{\n    key: \"serialize\",\n    value: function serialize() {\n      var serialized = {\n        code: this.code,\n        message: this.message\n      };\n      if (this.data !== undefined) {\n        serialized.data = this.data;\n      }\n      if (this.stack) {\n        serialized.stack = this.stack;\n      }\n      return serialized;\n    }\n    /**\n     * Return a string representation of the serialized error, omitting\n     * any circular references.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return fast_safe_stringify_1.default(this.serialize(), stringifyReplacer, 2);\n    }\n  }]);\n  return EthereumRpcError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nexports.EthereumRpcError = EthereumRpcError;\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nvar EthereumProviderError = /*#__PURE__*/function (_EthereumRpcError) {\n  _inherits(EthereumProviderError, _EthereumRpcError);\n  var _super2 = _createSuper(EthereumProviderError);\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the 1000 <= 4999 range.\n   */\n  function EthereumProviderError(code, message, data) {\n    _classCallCheck(this, EthereumProviderError);\n    if (!isValidEthProviderCode(code)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    return _super2.call(this, code, message, data);\n  }\n  return _createClass(EthereumProviderError);\n}(EthereumRpcError);\nexports.EthereumProviderError = EthereumProviderError;\n// Internal\nfunction isValidEthProviderCode(code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\nfunction stringifyReplacer(_, value) {\n  if (value === '[Circular]') {\n    return undefined;\n  }\n  return value;\n}","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AASA;;;;;AAAA,IAKaA,gBAAoB;EAAA;EAAA;EAM/B,0BAAYC,IAAY,EAAEC,OAAe,EAAEC,IAAQ;IAAA;IAAA;IAEjD,IAAI,CAACC,MAAM,CAACC,SAAS,CAACJ,IAAI,CAAC,EAAE;MAC3B,MAAM,IAAIK,KAAK,CACb,4BAA4B,CAC7B;;IAEH,IAAI,CAACJ,OAAO,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;MAC3C,MAAM,IAAII,KAAK,CACb,sCAAsC,CACvC;;IAGH,0BAAMJ,OAAO;IACb,MAAKD,IAAI,GAAGA,IAAI;IAChB,IAAIE,IAAI,KAAKI,SAAS,EAAE;MACtB,MAAKJ,IAAI,GAAGA,IAAI;;IACjB;EACH;EAEA;;;EAAA;IAAA;IAAA,OAGA,qBAAS;MACP,IAAMK,UAAU,GAA+B;QAC7CP,IAAI,EAAE,IAAI,CAACA,IAAI;QACfC,OAAO,EAAE,IAAI,CAACA;OACf;MACD,IAAI,IAAI,CAACC,IAAI,KAAKI,SAAS,EAAE;QAC3BC,UAAU,CAACL,IAAI,GAAG,IAAI,CAACA,IAAI;;MAE7B,IAAI,IAAI,CAACM,KAAK,EAAE;QACdD,UAAU,CAACC,KAAK,GAAG,IAAI,CAACA,KAAK;;MAE/B,OAAOD,UAAU;IACnB;IAEA;;;;EAAA;IAAA;IAAA,OAIA,oBAAQ;MACN,OAAOE,6BAAa,CAClB,IAAI,CAACC,SAAS,EAAE,EAChBC,iBAAiB,EACjB,CAAC,CACF;IACH;EAAC;EAAA;AAAA,iCArDsCN,KAAK;AAA9CO;AAwDA;;;;AAAA,IAIaC,qBAAyB;EAAA;EAAA;EAEpC;;;;EAIA,+BAAYb,IAAY,EAAEC,OAAe,EAAEC,IAAQ;IAAA;IAEjD,IAAI,CAACY,sBAAsB,CAACd,IAAI,CAAC,EAAE;MACjC,MAAM,IAAIK,KAAK,CACb,2DAA2D,CAC5D;;IACF,0BAEKL,IAAI,EAAEC,OAAO,EAAEC,IAAI;EAC3B;EAAC;AAAA,EAf2CH,gBAAmB;AAAjEa;AAkBA;AAEA,SAASE,sBAAsB,CAACd,IAAY;EAC1C,OAAOG,MAAM,CAACC,SAAS,CAACJ,IAAI,CAAC,IAAIA,IAAI,IAAI,IAAI,IAAIA,IAAI,IAAI,IAAI;AAC/D;AAEA,SAASW,iBAAiB,CAACI,CAAU,EAAEC,KAAc;EACnD,IAAIA,KAAK,KAAK,YAAY,EAAE;IAC1B,OAAOV,SAAS;;EAElB,OAAOU,KAAK;AACd","names":["EthereumRpcError","code","message","data","Number","isInteger","Error","undefined","serialized","stack","fast_safe_stringify_1","serialize","stringifyReplacer","exports","EthereumProviderError","isValidEthProviderCode","_","value"],"sources":["../src/classes.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}