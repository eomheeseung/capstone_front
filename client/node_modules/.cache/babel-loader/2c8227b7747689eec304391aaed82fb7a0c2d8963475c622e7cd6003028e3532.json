{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\paete\\\\Prototype\\\\nftmusicProtoCopy\\\\client\\\\src\\\\contexts\\\\EthContext\\\\EthProvider.jsx\",\n  _s = $RefreshSig$();\nimport React, { useReducer, useCallback, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\nimport WalletConnectProvdier from \"@walletconnect/web3-provider\";\nvar newjson = [];\nvar imgjson = [];\nimport { EthereumClient, modalConnectors, walletConnectProvider } from \"@web3modal/ethereum\";\nimport { Web3Modal } from \"@web3modal/react\";\nimport { configureChains, createClient, WagmiConfig } from \"wagmi\";\nimport { arbitrum, mainnet, polygon } from \"wagmi/chains\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function EthProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [proset, setProvider] = useState(false);\n\n  //  const provider = new WalletConnectProvdier({\n\n  //   rpc: {\n  //     5:'https://goerli.infura.io/v3/ff2d998f9cdf4be29197ce3ffb727d89'\n\n  //   },\n  //   infuraId: \"ff2d998f9cdf4be29197ce3ffb727d89\",\n\n  //  qrcodeModalOptions: {\n  //    desktopLinks: [\n  //      'ledger',\n  //      'tokenary',\n  //      'wallet',\n  //      'wallet 3',\n  //      'secuX',\n  //      'ambire',\n  //      'wallet3',\n  //      'apolloX',\n  //      'zerion',\n  //      'sequence',\n  //      'punkWallet',\n  //      'kryptoGO',\n  //      'nft',\n  //      'riceWallet',\n  //      'vision',\n  //      'keyring'\n  //    ],\n  //    mobileLinks: [\n  //      \"rainbow\",\n  //      \"metamask\",\n  //      \"argent\",\n  //      \"trust\",\n  //      \"imtoken\",\n  //      \"pillar\",\n\n  //    ],}});\n  const chains = [arbitrum, mainnet, polygon];\n\n  // Wagmi client\n  const {\n    provider\n  } = configureChains(chains, [infuraProvider({\n    apiKey: 'ff2d998f9cdf4be29197ce3ffb727d89'\n  })], [walletConnectProvider({\n    projectId: \"251542da3c8552393e55d6d3b636127e\"\n  })]);\n  const wagmiClient = createClient({\n    autoConnect: true,\n    connectors: modalConnectors({\n      projectId: \"251542da3c8552393e55d6d3b636127e\",\n      version: \"1\",\n      // or \"2\"\n      appName: \"web3Modal\",\n      chains\n    }),\n    provider\n  });\n\n  // Web3Modal Ethereum Client\n  const ethereumClient = new EthereumClient(wagmiClient, chains);\n  const init = useCallback(async artifact => {\n    if (artifact) {\n      // const web3 = new Web3(Web3.givenProvider || \"ws://127.0.0.1:7545\");\n\n      //             console.log(provider);\n      const web3 = new Web3(provider);\n\n      // await provider.disconnect();            \n      // await provider.enable();\n      // Subscribe to accounts change\n      provider.on(\"accountsChanged\", accounts => {\n        console.log(accounts);\n      });\n\n      // Subscribe to chainId change\n      provider.on(\"chainChanged\", chainId => {\n        console.log(chainId);\n      });\n\n      // Subscribe to session disconnection\n      provider.on(\"disconnect\", (code, reason) => {\n        console.log(code, reason);\n      });\n\n      // const web3 = new Web3(Web3.givenProvider || \"ws://goerli.infura.io/v3/ff2d998f9cdf4be29197ce3ffb727d89\");\n      const accounts = await web3.eth.getAccounts();\n      const networkID = await web3.eth.net.getId();\n      const {\n        abi\n      } = artifact;\n      let address, contract;\n      try {\n        address = artifact.networks[networkID].address;\n        contract = new web3.eth.Contract(abi, address);\n      } catch (err) {\n        console.error(err);\n        console.log(\"에러위치\");\n      }\n      dispatch({\n        type: actions.init,\n        data: {\n          artifact,\n          web3,\n          accounts,\n          networkID,\n          contract,\n          newjson,\n          provider\n        }\n      });\n    }\n  }, []);\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifact = require(\"../../contracts/ArtGrowNFT.json\");\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    tryInit();\n  }, [init]);\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n    const handleChange = () => {\n      init(state.artifact);\n    };\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init, state.artifact]);\n  async function Provide() {\n    console.log(provider);\n    await provider.enable();\n  }\n  return /*#__PURE__*/_jsxDEV(EthContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 7\n  }, this);\n}\n_s(EthProvider, \"zAynNKLG8PA4TBxKYif2YtVwKQ0=\");\n_c = EthProvider;\nexport default EthProvider;\nvar _c;\n$RefreshReg$(_c, \"EthProvider\");","map":{"version":3,"names":["React","useReducer","useCallback","useEffect","useState","Web3","EthContext","reducer","actions","initialState","WalletConnectProvdier","newjson","imgjson","EthereumClient","modalConnectors","walletConnectProvider","Web3Modal","configureChains","createClient","WagmiConfig","arbitrum","mainnet","polygon","EthProvider","children","state","dispatch","proset","setProvider","chains","provider","infuraProvider","apiKey","projectId","wagmiClient","autoConnect","connectors","version","appName","ethereumClient","init","artifact","web3","on","accounts","console","log","chainId","code","reason","eth","getAccounts","networkID","net","getId","abi","address","contract","networks","Contract","err","error","type","data","tryInit","require","events","handleChange","forEach","e","window","ethereum","removeListener","Provide","enable"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/src/contexts/EthContext/EthProvider.jsx"],"sourcesContent":["import React, { useReducer, useCallback, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\nimport WalletConnectProvdier from \"@walletconnect/web3-provider\";\n\nvar newjson=[]\nvar imgjson=[];\n  \nimport {\n  EthereumClient,\n  modalConnectors,\n  walletConnectProvider,\n} from \"@web3modal/ethereum\";\n\nimport { Web3Modal } from \"@web3modal/react\";\n\nimport { configureChains, createClient, WagmiConfig } from \"wagmi\";\n\nimport { arbitrum, mainnet, polygon } from \"wagmi/chains\";\n\n\nexport function EthProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [proset,setProvider]=useState(false);\n\n     \n//  const provider = new WalletConnectProvdier({\n  \n//   rpc: {\n//     5:'https://goerli.infura.io/v3/ff2d998f9cdf4be29197ce3ffb727d89'\n    \n//   },\n//   infuraId: \"ff2d998f9cdf4be29197ce3ffb727d89\",\n  \n \n//  qrcodeModalOptions: {\n//    desktopLinks: [\n//      'ledger',\n//      'tokenary',\n//      'wallet',\n//      'wallet 3',\n//      'secuX',\n//      'ambire',\n//      'wallet3',\n//      'apolloX',\n//      'zerion',\n//      'sequence',\n//      'punkWallet',\n//      'kryptoGO',\n//      'nft',\n//      'riceWallet',\n//      'vision',\n//      'keyring'\n//    ],\n//    mobileLinks: [\n//      \"rainbow\",\n//      \"metamask\",\n//      \"argent\",\n//      \"trust\",\n//      \"imtoken\",\n//      \"pillar\",\n     \n//    ],}});\nconst chains = [arbitrum, mainnet, polygon];\n\n// Wagmi client\nconst { provider } = configureChains(chains,[infuraProvider({ apiKey:'ff2d998f9cdf4be29197ce3ffb727d89' })], [\n  walletConnectProvider({ projectId: \"251542da3c8552393e55d6d3b636127e\" }),\n]);\nconst wagmiClient = createClient({\n  autoConnect: true,\n  connectors: modalConnectors({\n    projectId: \"251542da3c8552393e55d6d3b636127e\",\n    version: \"1\", // or \"2\"\n    appName: \"web3Modal\",\n    chains,\n  }),\n  provider,\n});\n\n// Web3Modal Ethereum Client\nconst ethereumClient = new EthereumClient(wagmiClient, chains);\n\n  const init = useCallback(\n    async artifact => {\n      if (artifact) {\n        // const web3 = new Web3(Web3.givenProvider || \"ws://127.0.0.1:7545\");\n\n  //             console.log(provider);\n              const web3 = new Web3(provider);\n              \n  // await provider.disconnect();            \n  // await provider.enable();\n              // Subscribe to accounts change\nprovider.on(\"accountsChanged\", (accounts) => {\n  console.log(accounts);\n});\n\n// Subscribe to chainId change\nprovider.on(\"chainChanged\", (chainId) => {\n  console.log(chainId);\n});\n\n// Subscribe to session disconnection\nprovider.on(\"disconnect\", (code,reason) => {\n  console.log(code, reason);\n});\n           \n \n           \n        // const web3 = new Web3(Web3.givenProvider || \"ws://goerli.infura.io/v3/ff2d998f9cdf4be29197ce3ffb727d89\");\n        const accounts = await web3.eth.getAccounts();\n        const networkID = await web3.eth.net.getId();\n       \n        const { abi } = artifact;\n        let address, contract;\n        try {\n          address = artifact.networks[networkID].address;\n          contract = new web3.eth.Contract(abi, address);   \n          \n        } catch (err) {\n          console.error(err);\n          console.log(\"에러위치\");\n        }\n        dispatch({\n          type: actions.init,\n          data: { artifact, web3, accounts, networkID, contract,newjson,provider}\n        });\n      }\n    }, []);\n\n  \n \n    \n   \n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifact = require(\"../../contracts/ArtGrowNFT.json\");\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    tryInit();\n  }, [init]);\n\n  \n\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n    const handleChange = () => {\n      init(state.artifact);\n\n    };\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init,state.artifact]);\n\n  \n  \nasync function Provide()\n{\n\n  console.log(provider)\n  \n  await provider.enable();\n}\n  return (\n    \n      <EthContext.Provider value={{\n      state,\n      dispatch\n    }}>\n      \n      {children}\n          {/* {!proset&&<div style={{display:'flex',gridRow:'5/6',gridColumn:'1/3'}}>\n    <button onClick={() => {Provide();  setProvider(true) } }>지갑연결</button>\n  </div>}\n       */}\n  \n    </EthContext.Provider>\n\n\n  );\n}\n\n\nexport default EthProvider;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}