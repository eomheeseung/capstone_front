{"ast":null,"code":"'use strict';\n\n/**\n * Collects all values from an (async) iterable into an array and returns it.\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n */\nvar _regeneratorRuntime = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _asyncIterator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\nvar all = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source) {\n    var arr, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, entry;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          arr = [];\n          _iteratorAbruptCompletion = false;\n          _didIteratorError = false;\n          _context.prev = 3;\n          _iterator = _asyncIterator(source);\n        case 5:\n          _context.next = 7;\n          return _iterator.next();\n        case 7:\n          if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n            _context.next = 13;\n            break;\n          }\n          entry = _step.value;\n          arr.push(entry);\n        case 10:\n          _iteratorAbruptCompletion = false;\n          _context.next = 5;\n          break;\n        case 13:\n          _context.next = 19;\n          break;\n        case 15:\n          _context.prev = 15;\n          _context.t0 = _context[\"catch\"](3);\n          _didIteratorError = true;\n          _iteratorError = _context.t0;\n        case 19:\n          _context.prev = 19;\n          _context.prev = 20;\n          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n            _context.next = 24;\n            break;\n          }\n          _context.next = 24;\n          return _iterator.return();\n        case 24:\n          _context.prev = 24;\n          if (!_didIteratorError) {\n            _context.next = 27;\n            break;\n          }\n          throw _iteratorError;\n        case 27:\n          return _context.finish(24);\n        case 28:\n          return _context.finish(19);\n        case 29:\n          return _context.abrupt(\"return\", arr);\n        case 30:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[3, 15, 19, 29], [20,, 24, 28]]);\n  }));\n  return function all(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nmodule.exports = all;","map":{"version":3,"names":["all","source","arr","entry","push","module","exports"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/it-all/index.js"],"sourcesContent":["'use strict'\n\n/**\n * Collects all values from an (async) iterable into an array and returns it.\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n */\nconst all = async (source) => {\n  const arr = []\n\n  for await (const entry of source) {\n    arr.push(entry)\n  }\n\n  return arr\n}\n\nmodule.exports = all\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAMA,IAAMA,GAAG;EAAA,sEAAG,iBAAOC,MAAM;IAAA;IAAA;MAAA;QAAA;UACjBC,GAAG,GAAG,EAAE;UAAA;UAAA;UAAA;UAAA,2BAEYD,MAAM;QAAA;UAAA;UAAA;QAAA;UAAA;YAAA;YAAA;UAAA;UAAfE,KAAK;UACpBD,GAAG,CAACE,IAAI,CAACD,KAAK,CAAC;QAAA;UAAA;UAAA;UAAA;QAAA;UAAA;UAAA;QAAA;UAAA;UAAA;UAAA;UAAA;QAAA;UAAA;UAAA;UAAA;YAAA;YAAA;UAAA;UAAA;UAAA;QAAA;UAAA;UAAA;YAAA;YAAA;UAAA;UAAA;QAAA;UAAA;QAAA;UAAA;QAAA;UAAA,iCAGVD,GAAG;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CACX;EAAA,gBARKF,GAAG;IAAA;EAAA;AAAA,GAQR;AAEDK,MAAM,CAACC,OAAO,GAAGN,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}