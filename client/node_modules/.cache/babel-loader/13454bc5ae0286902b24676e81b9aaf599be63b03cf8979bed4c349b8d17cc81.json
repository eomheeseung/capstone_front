{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _wrapAsyncGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\nvar _awaitAsyncGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\nvar _asyncGeneratorDelegate = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate.js\").default;\nvar _asyncIterator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\nvar _require = require('multiformats/cid'),\n  CID = _require.CID;\nvar configure = require('../lib/configure');\nvar _require2 = require('ipfs-core-utils/src/pins/normalise-input'),\n  normaliseInput = _require2.normaliseInput;\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {PinAPI[\"rmAll\"]}\n   */\n  function rmAll(_x) {\n    return _rmAll.apply(this, arguments);\n  }\n  function _rmAll() {\n    _rmAll = _wrapAsyncGenerator(function (source) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, path, recursive, searchParams, res, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, pin;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 2;\n              _iterator = _asyncIterator(normaliseInput(source));\n            case 4:\n              _context.next = 6;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 6:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 49;\n                break;\n              }\n              _step$value = _step.value, path = _step$value.path, recursive = _step$value.recursive;\n              searchParams = new URLSearchParams(options.searchParams);\n              searchParams.append('arg', \"\".concat(path));\n              if (recursive != null) searchParams.set('recursive', String(recursive));\n              _context.next = 13;\n              return _awaitAsyncGenerator(api.post('pin/rm', {\n                signal: options.signal,\n                headers: options.headers,\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({}, options), {}, {\n                  arg: \"\".concat(path),\n                  recursive: recursive\n                }))\n              }));\n            case 13:\n              res = _context.sent;\n              _iteratorAbruptCompletion2 = false;\n              _didIteratorError2 = false;\n              _context.prev = 16;\n              _iterator2 = _asyncIterator(res.ndjson());\n            case 18:\n              _context.next = 20;\n              return _awaitAsyncGenerator(_iterator2.next());\n            case 20:\n              if (!(_iteratorAbruptCompletion2 = !(_step2 = _context.sent).done)) {\n                _context.next = 30;\n                break;\n              }\n              pin = _step2.value;\n              if (!pin.Pins) {\n                _context.next = 25;\n                break;\n              }\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(pin.Pins.map(function ( /** @type {string} */cid) {\n                return CID.parse(cid);\n              })), _awaitAsyncGenerator), \"t0\", 24);\n            case 24:\n              return _context.abrupt(\"continue\", 27);\n            case 25:\n              _context.next = 27;\n              return CID.parse(pin);\n            case 27:\n              _iteratorAbruptCompletion2 = false;\n              _context.next = 18;\n              break;\n            case 30:\n              _context.next = 36;\n              break;\n            case 32:\n              _context.prev = 32;\n              _context.t1 = _context[\"catch\"](16);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context.t1;\n            case 36:\n              _context.prev = 36;\n              _context.prev = 37;\n              if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                _context.next = 41;\n                break;\n              }\n              _context.next = 41;\n              return _awaitAsyncGenerator(_iterator2.return());\n            case 41:\n              _context.prev = 41;\n              if (!_didIteratorError2) {\n                _context.next = 44;\n                break;\n              }\n              throw _iteratorError2;\n            case 44:\n              return _context.finish(41);\n            case 45:\n              return _context.finish(36);\n            case 46:\n              _iteratorAbruptCompletion = false;\n              _context.next = 4;\n              break;\n            case 49:\n              _context.next = 55;\n              break;\n            case 51:\n              _context.prev = 51;\n              _context.t2 = _context[\"catch\"](2);\n              _didIteratorError = true;\n              _iteratorError = _context.t2;\n            case 55:\n              _context.prev = 55;\n              _context.prev = 56;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 60;\n                break;\n              }\n              _context.next = 60;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 60:\n              _context.prev = 60;\n              if (!_didIteratorError) {\n                _context.next = 63;\n                break;\n              }\n              throw _iteratorError;\n            case 63:\n              return _context.finish(60);\n            case 64:\n              return _context.finish(55);\n            case 65:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[2, 51, 55, 65], [16, 32, 36, 46], [37,, 41, 45], [56,, 60, 64]]);\n      })();\n    });\n    return _rmAll.apply(this, arguments);\n  }\n  return rmAll;\n});","map":{"version":3,"names":["require","CID","configure","normaliseInput","toUrlSearchParams","module","exports","api","rmAll","source","options","path","recursive","searchParams","URLSearchParams","append","set","String","post","signal","headers","arg","res","ndjson","pin","Pins","map","cid","parse"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/ipfs-http-client/src/pin/rm-all.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst { normaliseInput } = require('ipfs-core-utils/src/pins/normalise-input')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"rmAll\"]}\n   */\n  async function * rmAll (source, options = {}) {\n    for await (const { path, recursive } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams)\n      searchParams.append('arg', `${path}`)\n\n      if (recursive != null) searchParams.set('recursive', String(recursive))\n\n      const res = await api.post('pin/rm', {\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${path}`,\n          recursive\n        })\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          yield * pin.Pins.map((/** @type {string} */ cid) => CID.parse(cid))\n          continue\n        }\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return rmAll\n})\n"],"mappings":"AAAA,YAAY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEZ,eAAgBA,OAAO,CAAC,kBAAkB,CAAC;EAAnCC,GAAG,YAAHA,GAAG;AACX,IAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAC7C,gBAA2BA,OAAO,CAAC,0CAA0C,CAAC;EAAtEG,cAAc,aAAdA,cAAc;AACtB,IAAMC,iBAAiB,GAAGJ,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;;AAEAK,MAAM,CAACC,OAAO,GAAGJ,SAAS,CAAC,UAAAK,GAAG,EAAI;EAChC;AACF;AACA;EAFE,SAGiBC,KAAK;IAAA;EAAA;EAAA;IAAA,6BAAtB,UAAwBC,MAAM;MAAA,IAAEC,OAAO,uEAAG,CAAC,CAAC;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;cAAA;cAAA;cAAA,2BACFP,cAAc,CAACM,MAAM,CAAC;YAAA;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA,2BAA3CE,IAAI,eAAJA,IAAI,EAAEC,SAAS,eAATA,SAAS;cAC1BC,YAAY,GAAG,IAAIC,eAAe,CAACJ,OAAO,CAACG,YAAY,CAAC;cAC9DA,YAAY,CAACE,MAAM,CAAC,KAAK,YAAKJ,IAAI,EAAG;cAErC,IAAIC,SAAS,IAAI,IAAI,EAAEC,YAAY,CAACG,GAAG,CAAC,WAAW,EAAEC,MAAM,CAACL,SAAS,CAAC,CAAC;cAAA;cAAA,4BAErDL,GAAG,CAACW,IAAI,CAAC,QAAQ,EAAE;gBACnCC,MAAM,EAAET,OAAO,CAACS,MAAM;gBACtBC,OAAO,EAAEV,OAAO,CAACU,OAAO;gBACxBP,YAAY,EAAET,iBAAiB,iCAC1BM,OAAO;kBACVW,GAAG,YAAKV,IAAI,CAAE;kBACdC,SAAS,EAATA;gBAAS;cAEb,CAAC,CAAC;YAAA;cARIU,GAAG;cAAA;cAAA;cAAA;cAAA,4BAUeA,GAAG,CAACC,MAAM,EAAE;YAAA;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAAnBC,GAAG;cAAA,KACdA,GAAG,CAACC,IAAI;gBAAA;gBAAA;cAAA;cACV,qEAAQD,GAAG,CAACC,IAAI,CAACC,GAAG,CAAC,WAAC,qBAAsBC,GAAG;gBAAA,OAAK1B,GAAG,CAAC2B,KAAK,CAACD,GAAG,CAAC;cAAA,EAAC;YAAA;cAAA;YAAA;cAAA;cAGrE,OAAM1B,GAAG,CAAC2B,KAAK,CAACJ,GAAG,CAAC;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA;YAAA;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA;YAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAGzB;IAAA;EAAA;EACD,OAAOhB,KAAK;AACd,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}