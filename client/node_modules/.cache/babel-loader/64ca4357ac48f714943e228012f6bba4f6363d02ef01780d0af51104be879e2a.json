{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.conv2dImpl = exports.conv2DConfig = void 0;\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.conv2DConfig = {\n  kernelName: tfjs_1.Conv2D,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var _a = args.inputs,\n      x = _a.x,\n      filter = _a.filter;\n    var backend = args.backend;\n    var _b = args.attrs,\n      strides = _b.strides,\n      pad = _b.pad,\n      dataFormat = _b.dataFormat,\n      dilations = _b.dilations,\n      dimRoundingMode = _b.dimRoundingMode;\n    var $dataFormat = tfjs_1.backend_util.convertConv2DDataFormat(dataFormat);\n    var convInfo = tfjs_1.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    return conv2dImpl(x, filter, convInfo, backend);\n  }\n};\nfunction conv2dImpl(x, filter, convInfo, backend) {\n  if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME' && convInfo.padInfo.type !== 'EXPLICIT') {\n    throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + \"while padding was \".concat(convInfo.padInfo.type));\n  }\n  var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n  var padding = convInfo.padInfo.type;\n  var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n  var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n  var opAttrs = [(0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)('T', x.dtype), {\n    name: 'strides',\n    type: backend.binding.TF_ATTR_INT,\n    value: strides\n  }, {\n    name: 'padding',\n    type: backend.binding.TF_ATTR_STRING,\n    value: padding\n  }, {\n    name: 'data_format',\n    type: backend.binding.TF_ATTR_STRING,\n    value: dataFormat\n  }, {\n    name: 'use_cudnn_on_gpu',\n    type: backend.binding.TF_ATTR_BOOL,\n    value: true\n  }, {\n    name: 'dilations',\n    type: backend.binding.TF_ATTR_INT,\n    value: dilations\n  }];\n  if (padding === 'EXPLICIT') {\n    var padValue = [convInfo.padInfo.top, convInfo.padInfo.bottom, convInfo.padInfo.left, convInfo.padInfo.right];\n    opAttrs.push({\n      name: 'explicit_paddings',\n      type: backend.binding.TF_ATTR_INT,\n      value: dataFormat === 'NHWC' ? __spreadArray(__spreadArray([0, 0], padValue, true), [0, 0], false) : __spreadArray([0, 0, 0, 0], padValue, true)\n    });\n  }\n  return backend.executeSingleOutput(tfjs_1.Conv2D, opAttrs, [x, filter]);\n}\nexports.conv2dImpl = conv2dImpl;","map":{"version":3,"names":["__spreadArray","to","from","pack","arguments","length","i","l","ar","Array","prototype","slice","call","concat","Object","defineProperty","exports","value","conv2dImpl","conv2DConfig","tfjs_1","require","nodejs_kernel_backend_1","kernelName","Conv2D","backendName","kernelFunc","args","_a","inputs","x","filter","backend","_b","attrs","strides","pad","dataFormat","dilations","dimRoundingMode","$dataFormat","backend_util","convertConv2DDataFormat","convInfo","computeConv2DInfo","shape","padInfo","type","Error","strideHeight","strideWidth","padding","dilationHeight","dilationWidth","opAttrs","createTensorsTypeOpAttr","dtype","name","binding","TF_ATTR_INT","TF_ATTR_STRING","TF_ATTR_BOOL","padValue","top","bottom","left","right","push","executeSingleOutput"],"sources":["C:/Users/paete/CapstonPro/nftmusicProtoCopy/client/node_modules/@tensorflow/tfjs-node/dist/kernels/Conv2D.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.conv2dImpl = exports.conv2DConfig = void 0;\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.conv2DConfig = {\n    kernelName: tfjs_1.Conv2D,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var _a = args.inputs, x = _a.x, filter = _a.filter;\n        var backend = args.backend;\n        var _b = args.attrs, strides = _b.strides, pad = _b.pad, dataFormat = _b.dataFormat, dilations = _b.dilations, dimRoundingMode = _b.dimRoundingMode;\n        var $dataFormat = tfjs_1.backend_util.convertConv2DDataFormat(dataFormat);\n        var convInfo = tfjs_1.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n        return conv2dImpl(x, filter, convInfo, backend);\n    }\n};\nfunction conv2dImpl(x, filter, convInfo, backend) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME' &&\n        convInfo.padInfo.type !== 'EXPLICIT') {\n        throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n            \"while padding was \".concat(convInfo.padInfo.type));\n    }\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [\n        (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)('T', x.dtype),\n        { name: 'strides', type: backend.binding.TF_ATTR_INT, value: strides },\n        { name: 'padding', type: backend.binding.TF_ATTR_STRING, value: padding },\n        {\n            name: 'data_format',\n            type: backend.binding.TF_ATTR_STRING,\n            value: dataFormat\n        },\n        { name: 'use_cudnn_on_gpu', type: backend.binding.TF_ATTR_BOOL, value: true },\n        { name: 'dilations', type: backend.binding.TF_ATTR_INT, value: dilations },\n    ];\n    if (padding === 'EXPLICIT') {\n        var padValue = [\n            convInfo.padInfo.top, convInfo.padInfo.bottom, convInfo.padInfo.left,\n            convInfo.padInfo.right\n        ];\n        opAttrs.push({\n            name: 'explicit_paddings',\n            type: backend.binding.TF_ATTR_INT,\n            value: dataFormat === 'NHWC' ? __spreadArray(__spreadArray([0, 0], padValue, true), [0, 0], false) : __spreadArray([0, 0, 0, 0], padValue, true)\n        });\n    }\n    return backend.executeSingleOutput(tfjs_1.Conv2D, opAttrs, [x, filter]);\n}\nexports.conv2dImpl = conv2dImpl;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}