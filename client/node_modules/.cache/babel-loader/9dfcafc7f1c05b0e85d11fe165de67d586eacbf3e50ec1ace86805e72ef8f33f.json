{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar codec = require('./codec');\nvar protocols = require('./protocols-table');\nvar varint = require('varint');\nvar _require = require('multiformats/cid'),\n  CID = _require.CID;\nvar _require2 = require('multiformats/bases/base58'),\n  base58btc = _require2.base58btc;\nvar errCode = require('err-code');\nvar inspect = Symbol.for('nodejs.util.inspect.custom');\nvar _require3 = require('uint8arrays/to-string'),\n  uint8ArrayToString = _require3.toString;\nvar _require4 = require('uint8arrays/equals'),\n  uint8ArrayEquals = _require4.equals;\n\n/**\n * @typedef {(addr: Multiaddr) => Promise<string[]>} Resolver\n * @typedef {string | Multiaddr | Uint8Array | null} MultiaddrInput\n * @typedef {import('./types').MultiaddrObject} MultiaddrObject\n * @typedef {import('./types').Protocol} Protocol\n */\n\n/** @type {Map<string, Resolver>} */\nvar resolvers = new Map();\nvar symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\n\n/**\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\n * a Uint8Array, String or another Multiaddr instance\n * public key.\n *\n */\nvar Multiaddr = /*#__PURE__*/function () {\n  /**\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   *\n   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n   */\n  function Multiaddr(addr) {\n    _classCallCheck(this, Multiaddr);\n    // default\n    if (addr == null) {\n      addr = '';\n    }\n\n    // Define symbol\n    Object.defineProperty(this, symbol, {\n      value: true\n    });\n    if (addr instanceof Uint8Array) {\n      /** @type {Uint8Array} - The raw bytes representing this multiaddress */\n      this.bytes = codec.fromBytes(addr);\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(\"multiaddr \\\"\".concat(addr, \"\\\" must start with a \\\"/\\\"\"));\n      }\n      this.bytes = codec.fromString(addr);\n    } else if (Multiaddr.isMultiaddr(addr)) {\n      // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr');\n    }\n  }\n\n  /**\n   * Returns Multiaddr as a String\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  _createClass(Multiaddr, [{\n    key: \"toString\",\n    value: function toString() {\n      return codec.bytesToString(this.bytes);\n    }\n\n    /**\n     * Returns Multiaddr as a JSON encoded object\n     *\n     * @example\n     * ```js\n     * JSON.stringify(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n     * // '/ip4/127.0.0.1/tcp/4001'\n     * ```\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n\n    /**\n     * Returns Multiaddr as a convinient options object to be used with net.createConnection\n     *\n     * @example\n     * ```js\n     * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n     * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\n     * ```\n     */\n  }, {\n    key: \"toOptions\",\n    value: function toOptions() {\n      /** @type {MultiaddrObject} */\n      var opts = {};\n      var parsed = this.toString().split('/');\n      opts.family = parsed[1] === 'ip4' ? 4 : 6;\n      opts.host = parsed[2];\n      opts.transport = parsed[3];\n      opts.port = parseInt(parsed[4]);\n      return opts;\n    }\n\n    /**\n     * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n     * left-to-right order. Each object contains the protocol code, protocol name,\n     * and the size of its address space in bits.\n     * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n     *\n     * @example\n     * ```js\n     * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n     * // [ { code: 4, size: 32, name: 'ip4' },\n     * //   { code: 6, size: 16, name: 'tcp' } ]\n     * ```\n     *\n     * @returns {Protocol[]} protocols - All the protocols the address is composed of\n     */\n  }, {\n    key: \"protos\",\n    value: function protos() {\n      return this.protoCodes().map(function (code) {\n        return Object.assign({}, protocols(code));\n      });\n    }\n\n    /**\n     * Returns the codes of the protocols in left-to-right order.\n     * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n     *\n     * @example\n     * ```js\n     * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n     * // [ 4, 6 ]\n     * ```\n     *\n     * @returns {number[]} protocol codes\n     */\n  }, {\n    key: \"protoCodes\",\n    value: function protoCodes() {\n      var codes = [];\n      var buf = this.bytes;\n      var i = 0;\n      while (i < buf.length) {\n        var code = varint.decode(buf, i);\n        var n = varint.decode.bytes;\n        var p = protocols(code);\n        var size = codec.sizeForAddr(p, buf.slice(i + n));\n        i += size + n;\n        codes.push(code);\n      }\n      return codes;\n    }\n\n    /**\n     * Returns the names of the protocols in left-to-right order.\n     * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n     *\n     * @example\n     * ```js\n     * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n     * // [ 'ip4', 'tcp' ]\n     * ```\n     *\n     * @returns {string[]} protocol names\n     */\n  }, {\n    key: \"protoNames\",\n    value: function protoNames() {\n      return this.protos().map(function (proto) {\n        return proto.name;\n      });\n    }\n\n    /**\n     * Returns a tuple of parts\n     *\n     * @example\n     * ```js\n     * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\n     * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n     * ```\n     */\n  }, {\n    key: \"tuples\",\n    value: function tuples() {\n      return codec.bytesToTuples(this.bytes);\n    }\n\n    /**\n     * Returns a tuple of string/number parts\n     * - tuples[][0] = code of protocol\n     * - tuples[][1] = contents of address\n     *\n     * @example\n     * ```js\n     * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\n     * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\n     * ```\n     */\n  }, {\n    key: \"stringTuples\",\n    value: function stringTuples() {\n      var t = codec.bytesToTuples(this.bytes);\n      return codec.tuplesToStringTuples(t);\n    }\n\n    /**\n     * Encapsulates a Multiaddr in another Multiaddr\n     *\n     * @example\n     * ```js\n     * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n     * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n     *\n     * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n     * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n     *\n     * const mh3 = mh1.encapsulate(mh2)\n     * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n     *\n     * mh3.toString()\n     * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n     * ```\n     *\n     * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\n     */\n  }, {\n    key: \"encapsulate\",\n    value: function encapsulate(addr) {\n      addr = new Multiaddr(addr);\n      return new Multiaddr(this.toString() + addr.toString());\n    }\n\n    /**\n     * Decapsulates a Multiaddr from another Multiaddr\n     *\n     * @example\n     * ```js\n     * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n     * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n     *\n     * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n     * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n     *\n     * const mh3 = mh1.encapsulate(mh2)\n     * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n     *\n     * mh3.decapsulate(mh2).toString()\n     * // '/ip4/8.8.8.8/tcp/1080'\n     * ```\n     *\n     * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\n     * @returns {Multiaddr}\n     */\n  }, {\n    key: \"decapsulate\",\n    value: function decapsulate(addr) {\n      var addrString = addr.toString();\n      var s = this.toString();\n      var i = s.lastIndexOf(addrString);\n      if (i < 0) {\n        throw new Error('Address ' + this + ' does not contain subaddress: ' + addr);\n      }\n      return new Multiaddr(s.slice(0, i));\n    }\n\n    /**\n     * A more reliable version of `decapsulate` if you are targeting a\n     * specific code, such as 421 (the `p2p` protocol code). The last index of the code\n     * will be removed from the `Multiaddr`, and a new instance will be returned.\n     * If the code is not present, the original `Multiaddr` is returned.\n     *\n     * @example\n     * ```js\n     * const addr = new Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n     * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>\n     *\n     * addr.decapsulateCode(421).toString()\n     * // '/ip4/0.0.0.0/tcp/8080'\n     *\n     * new Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n     * // '/ip4/127.0.0.1/tcp/8080'\n     * ```\n     *\n     * @param {number} code - The code of the protocol to decapsulate from this Multiaddr\n     * @returns {Multiaddr}\n     */\n  }, {\n    key: \"decapsulateCode\",\n    value: function decapsulateCode(code) {\n      var tuples = this.tuples();\n      for (var i = tuples.length - 1; i >= 0; i--) {\n        if (tuples[i][0] === code) {\n          return new Multiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n        }\n      }\n      return this;\n    }\n\n    /**\n     * Extract the peerId if the multiaddr contains one\n     *\n     * @example\n     * ```js\n     * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n     * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\n     *\n     * // should return QmValidBase58string or null if the id is missing or invalid\n     * const peerId = mh1.getPeerId()\n     * ```\n     *\n     * @returns {string | null} peerId - The id of the peer or null if invalid or missing from the ma\n     */\n  }, {\n    key: \"getPeerId\",\n    value: function getPeerId() {\n      try {\n        var tuples = this.stringTuples().filter(function (tuple) {\n          if (tuple[0] === protocols.names.ipfs.code) {\n            return true;\n          }\n          return false;\n        });\n\n        // Get the last ipfs tuple ['ipfs', 'peerid string']\n        var tuple = tuples.pop();\n        if (tuple && tuple[1]) {\n          var peerIdStr = tuple[1];\n\n          // peer id is base58btc encoded string but not multibase encoded so add the `z`\n          // prefix so we can validate that it is correctly encoded\n          if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n            return uint8ArrayToString(base58btc.decode(\"z\".concat(peerIdStr)), 'base58btc');\n          }\n\n          // try to parse peer id as CID\n          return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n        }\n        return null;\n      } catch (e) {\n        return null;\n      }\n    }\n\n    /**\n     * Extract the path if the multiaddr contains one\n     *\n     * @example\n     * ```js\n     * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n     * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>\n     *\n     * // should return utf8 string or null if the id is missing or invalid\n     * const path = mh1.getPath()\n     * ```js\n     *\n     * @returns {string | null} path - The path of the multiaddr, or null if no path protocol is present\n     */\n  }, {\n    key: \"getPath\",\n    value: function getPath() {\n      var path = null;\n      try {\n        path = this.stringTuples().filter(function (tuple) {\n          var proto = protocols(tuple[0]);\n          if (proto.path) {\n            return true;\n          }\n          return false;\n        })[0][1];\n        if (!path) {\n          path = null;\n        }\n      } catch (e) {\n        path = null;\n      }\n      return path;\n    }\n\n    /**\n     * Checks if two Multiaddrs are the same\n     *\n     * @example\n     * ```js\n     * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n     * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n     *\n     * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n     * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n     *\n     * mh1.equals(mh1)\n     * // true\n     *\n     * mh1.equals(mh2)\n     * // false\n     * ```\n     *\n     * @param {Multiaddr} addr\n     * @returns {boolean}\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(addr) {\n      return uint8ArrayEquals(this.bytes, addr.bytes);\n    }\n\n    /**\n     * Resolve multiaddr if containing resolvable hostname.\n     *\n     * @example\n     * ```js\n     * Multiaddr.resolvers.set('dnsaddr', resolverFunction)\n     * const mh1 = new Multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\n     * const resolvedMultiaddrs = await mh1.resolve()\n     * // [\n     * //   <Multiaddr 04934b5353060fa1a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n     * //   <Multiaddr 04934b53530601bbde03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n     * //   <Multiaddr 04934b535391020fa1cc03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>\n     * // ]\n     * ```\n     *\n     * @returns {Promise<Array<Multiaddr>>}\n     */\n  }, {\n    key: \"resolve\",\n    value: function () {\n      var _resolve = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var resolvableProto, resolver, addresses;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              resolvableProto = this.protos().find(function (p) {\n                return p.resolvable;\n              }); // Multiaddr is not resolvable?\n              if (resolvableProto) {\n                _context.next = 3;\n                break;\n              }\n              return _context.abrupt(\"return\", [this]);\n            case 3:\n              resolver = resolvers.get(resolvableProto.name);\n              if (resolver) {\n                _context.next = 6;\n                break;\n              }\n              throw errCode(new Error(\"no available resolver for \".concat(resolvableProto.name)), 'ERR_NO_AVAILABLE_RESOLVER');\n            case 6:\n              _context.next = 8;\n              return resolver(this);\n            case 8:\n              addresses = _context.sent;\n              return _context.abrupt(\"return\", addresses.map(function (a) {\n                return new Multiaddr(a);\n              }));\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function resolve() {\n        return _resolve.apply(this, arguments);\n      }\n      return resolve;\n    }()\n    /**\n     * Gets a Multiaddrs node-friendly address object. Note that protocol information\n     * is left out: in Node (and most network systems) the protocol is unknowable\n     * given only the address.\n     *\n     * Has to be a ThinWaist Address, otherwise throws error\n     *\n     * @example\n     * ```js\n     * new Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n     * // {family: 4, address: '127.0.0.1', port: 4001}\n     * ```\n     *\n     * @returns {{family: 4 | 6, address: string, port: number}}\n     * @throws {Error} Throws error if Multiaddr is not a Thin Waist address\n     */\n  }, {\n    key: \"nodeAddress\",\n    value: function nodeAddress() {\n      var codes = this.protoCodes();\n      var names = this.protoNames();\n      var parts = this.toString().split('/').slice(1);\n      if (parts.length < 4) {\n        throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6}/{address}/{tcp, udp}/{port}\".');\n      } else if (codes[0] !== 4 && codes[0] !== 41 && codes[0] !== 54 && codes[0] !== 55) {\n        throw new Error(\"no protocol with name: \\\"'\".concat(names[0], \"'\\\". Must have a valid family name: \\\"{ip4, ip6, dns4, dns6}\\\".\"));\n      } else if (parts[2] !== 'tcp' && parts[2] !== 'udp') {\n        throw new Error(\"no protocol with name: \\\"'\".concat(names[1], \"'\\\". Must have a valid transport protocol: \\\"{tcp, udp}\\\".\"));\n      }\n      return {\n        family: codes[0] === 41 || codes[0] === 55 ? 6 : 4,\n        address: parts[1],\n        port: parseInt(parts[3]) // tcp or udp port\n      };\n    }\n\n    /**\n     * Returns if a Multiaddr is a Thin Waist address or not.\n     *\n     * Thin Waist is if a Multiaddr adheres to the standard combination of:\n     *\n     * `{IPv4, IPv6}/{TCP, UDP}`\n     *\n     * @example\n     * ```js\n     * const mh1 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n     * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n     * const mh2 = new Multiaddr('/ip4/192.168.2.1/tcp/5001')\n     * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\n     * const mh3 = mh1.encapsulate(mh2)\n     * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\n     * const mh4 = new Multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\n     * // <Multiaddr 047f0000010607d0de039302a503221220d52ebb89d85b02a284948203a62ff28389c57c9f42beec4ec20db76a64835843 - /ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a>\n     * mh1.isThinWaistAddress()\n     * // true\n     * mh2.isThinWaistAddress()\n     * // true\n     * mh3.isThinWaistAddress()\n     * // false\n     * mh4.isThinWaistAddress()\n     * // false\n     * ```\n     *\n     * @param {Multiaddr} [addr] - Defaults to using `this` instance\n     */\n  }, {\n    key: \"isThinWaistAddress\",\n    value: function isThinWaistAddress(addr) {\n      var protos = (addr || this).protos();\n      if (protos.length !== 2) {\n        return false;\n      }\n      if (protos[0].code !== 4 && protos[0].code !== 41) {\n        return false;\n      }\n      if (protos[1].code !== 6 && protos[1].code !== 273) {\n        return false;\n      }\n      return true;\n    }\n\n    /**\n     * Creates a Multiaddr from a node-friendly address object\n     *\n     * @example\n     * ```js\n     * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n     * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n     * ```\n     *\n     * @param {{family: 4 | 6, address: string, port: number}} addr\n     * @param {string} transport\n     */\n  }, {\n    key: inspect,\n    value:\n    /**\n     * Returns Multiaddr as a human-readable string.\n     * For post Node.js v10.0.0.\n     * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n     *\n     * @example\n     * ```js\n     * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n     * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n     * ```\n     *\n     * @returns {string}\n     */\n    function value() {\n      return '<Multiaddr ' + uint8ArrayToString(this.bytes, 'base16') + ' - ' + codec.bytesToString(this.bytes) + '>';\n    }\n\n    /**\n     * Returns Multiaddr as a human-readable string.\n     * Fallback for pre Node.js v10.0.0.\n     * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n     *\n     * @example\n     * ```js\n     * new Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\n     * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n     * ```\n     *\n     * @returns {string}\n     */\n  }, {\n    key: \"inspect\",\n    value: function inspect() {\n      return '<Multiaddr ' + uint8ArrayToString(this.bytes, 'base16') + ' - ' + codec.bytesToString(this.bytes) + '>';\n    }\n  }], [{\n    key: \"fromNodeAddress\",\n    value: function fromNodeAddress(addr, transport) {\n      if (!addr) {\n        throw new Error('requires node address object');\n      }\n      if (!transport) {\n        throw new Error('requires transport protocol');\n      }\n      var ip;\n      switch (addr.family) {\n        case 4:\n          ip = 'ip4';\n          break;\n        case 6:\n          ip = 'ip6';\n          break;\n        default:\n          throw Error(\"Invalid addr family. Got '\".concat(addr.family, \"' instead of 4 or 6\"));\n      }\n      return new Multiaddr('/' + [ip, addr.address, transport, addr.port].join('/'));\n    }\n\n    /**\n     * Returns if something is a Multiaddr that is a name\n     *\n     * @param {Multiaddr} addr\n     * @returns {boolean} isName\n     */\n  }, {\n    key: \"isName\",\n    value: function isName(addr) {\n      if (!Multiaddr.isMultiaddr(addr)) {\n        return false;\n      }\n\n      // if a part of the multiaddr is resolvable, then return true\n      return addr.protos().some(function (proto) {\n        return proto.resolvable;\n      });\n    }\n\n    /**\n     * Check if object is a CID instance\n     *\n     * @param {any} value\n     * @returns {value is Multiaddr}\n     */\n  }, {\n    key: \"isMultiaddr\",\n    value: function isMultiaddr(value) {\n      return value instanceof Multiaddr || Boolean(value && value[symbol]);\n    }\n  }]);\n  return Multiaddr;\n}();\n/**\n * Object containing table, names and codes of all supported protocols.\n * To get the protocol values from a Multiaddr, you can use\n * [`.protos()`](#multiaddrprotos),\n * [`.protoCodes()`](#multiaddrprotocodes) or\n * [`.protoNames()`](#multiaddrprotonames)\n *\n * @returns {{table: Array, names: Object, codes: Object}}\n */\nMultiaddr.protocols = protocols;\nMultiaddr.resolvers = resolvers;\n\n/**\n * Static factory\n *\n * @param {MultiaddrInput} addr\n */\nfunction multiaddr(addr) {\n  return new Multiaddr(addr);\n}\nmodule.exports = {\n  Multiaddr: Multiaddr,\n  multiaddr: multiaddr,\n  protocols: protocols,\n  resolvers: resolvers\n};","map":{"version":3,"names":["codec","require","protocols","varint","CID","base58btc","errCode","inspect","Symbol","for","uint8ArrayToString","toString","uint8ArrayEquals","equals","resolvers","Map","symbol","Multiaddr","addr","Object","defineProperty","value","Uint8Array","bytes","fromBytes","length","charAt","Error","fromString","isMultiaddr","bytesToString","opts","parsed","split","family","host","transport","port","parseInt","protoCodes","map","code","assign","codes","buf","i","decode","n","p","size","sizeForAddr","slice","push","protos","proto","name","bytesToTuples","t","tuplesToStringTuples","addrString","s","lastIndexOf","tuples","tuplesToBytes","stringTuples","filter","tuple","names","ipfs","pop","peerIdStr","parse","multihash","e","path","resolvableProto","find","resolvable","resolver","get","addresses","a","protoNames","parts","address","ip","join","some","Boolean","multiaddr","module","exports"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/multiaddr/src/index.js"],"sourcesContent":["'use strict'\n\nconst codec = require('./codec')\nconst protocols = require('./protocols-table')\nconst varint = require('varint')\nconst { CID } = require('multiformats/cid')\nconst { base58btc } = require('multiformats/bases/base58')\nconst errCode = require('err-code')\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { equals: uint8ArrayEquals } = require('uint8arrays/equals')\n\n/**\n * @typedef {(addr: Multiaddr) => Promise<string[]>} Resolver\n * @typedef {string | Multiaddr | Uint8Array | null} MultiaddrInput\n * @typedef {import('./types').MultiaddrObject} MultiaddrObject\n * @typedef {import('./types').Protocol} Protocol\n */\n\n/** @type {Map<string, Resolver>} */\nconst resolvers = new Map()\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr')\n\n/**\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\n * a Uint8Array, String or another Multiaddr instance\n * public key.\n *\n */\nclass Multiaddr {\n  /**\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   *\n   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n   */\n  constructor (addr) {\n    // default\n    if (addr == null) {\n      addr = ''\n    }\n\n    // Define symbol\n    Object.defineProperty(this, symbol, { value: true })\n\n    if (addr instanceof Uint8Array) {\n      /** @type {Uint8Array} - The raw bytes representing this multiaddress */\n      this.bytes = codec.fromBytes(addr)\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`)\n      }\n      this.bytes = codec.fromString(addr)\n    } else if (Multiaddr.isMultiaddr(addr)) { // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes) // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr')\n    }\n  }\n\n  /**\n   * Returns Multiaddr as a String\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toString () {\n    return codec.bytesToString(this.bytes)\n  }\n\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   *\n   * @example\n   * ```js\n   * JSON.stringify(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Returns Multiaddr as a convinient options object to be used with net.createConnection\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\n   * ```\n   */\n  toOptions () {\n    /** @type {MultiaddrObject} */\n    const opts = {}\n    const parsed = this.toString().split('/')\n    opts.family = parsed[1] === 'ip4' ? 4 : 6\n    opts.host = parsed[2]\n    opts.transport = parsed[3]\n    opts.port = parseInt(parsed[4])\n    return opts\n  }\n\n  /**\n   * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n   * left-to-right order. Each object contains the protocol code, protocol name,\n   * and the size of its address space in bits.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n   * // [ { code: 4, size: 32, name: 'ip4' },\n   * //   { code: 6, size: 16, name: 'tcp' } ]\n   * ```\n   *\n   * @returns {Protocol[]} protocols - All the protocols the address is composed of\n   */\n  protos () {\n    return this.protoCodes().map(code => Object.assign({}, protocols(code)))\n  }\n\n  /**\n   * Returns the codes of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n   * // [ 4, 6 ]\n   * ```\n   *\n   * @returns {number[]} protocol codes\n   */\n  protoCodes () {\n    const codes = []\n    const buf = this.bytes\n    let i = 0\n    while (i < buf.length) {\n      const code = varint.decode(buf, i)\n      const n = varint.decode.bytes\n\n      const p = protocols(code)\n      const size = codec.sizeForAddr(p, buf.slice(i + n))\n\n      i += (size + n)\n      codes.push(code)\n    }\n\n    return codes\n  }\n\n  /**\n   * Returns the names of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n   * // [ 'ip4', 'tcp' ]\n   * ```\n   *\n   * @returns {string[]} protocol names\n   */\n  protoNames () {\n    return this.protos().map(proto => proto.name)\n  }\n\n  /**\n   * Returns a tuple of parts\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\n   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n   * ```\n   */\n  tuples () {\n    return codec.bytesToTuples(this.bytes)\n  }\n\n  /**\n   * Returns a tuple of string/number parts\n   * - tuples[][0] = code of protocol\n   * - tuples[][1] = contents of address\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\n   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\n   * ```\n   */\n  stringTuples () {\n    const t = codec.bytesToTuples(this.bytes)\n    return codec.tuplesToStringTuples(t)\n  }\n\n  /**\n   * Encapsulates a Multiaddr in another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.toString()\n   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n   * ```\n   *\n   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\n   */\n  encapsulate (addr) {\n    addr = new Multiaddr(addr)\n    return new Multiaddr(this.toString() + addr.toString())\n  }\n\n  /**\n   * Decapsulates a Multiaddr from another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.decapsulate(mh2).toString()\n   * // '/ip4/8.8.8.8/tcp/1080'\n   * ```\n   *\n   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\n   * @returns {Multiaddr}\n   */\n  decapsulate (addr) {\n    const addrString = addr.toString()\n    const s = this.toString()\n    const i = s.lastIndexOf(addrString)\n    if (i < 0) {\n      throw new Error('Address ' + this + ' does not contain subaddress: ' + addr)\n    }\n    return new Multiaddr(s.slice(0, i))\n  }\n\n  /**\n   * A more reliable version of `decapsulate` if you are targeting a\n   * specific code, such as 421 (the `p2p` protocol code). The last index of the code\n   * will be removed from the `Multiaddr`, and a new instance will be returned.\n   * If the code is not present, the original `Multiaddr` is returned.\n   *\n   * @example\n   * ```js\n   * const addr = new Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n   * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>\n   *\n   * addr.decapsulateCode(421).toString()\n   * // '/ip4/0.0.0.0/tcp/8080'\n   *\n   * new Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n   * // '/ip4/127.0.0.1/tcp/8080'\n   * ```\n   *\n   * @param {number} code - The code of the protocol to decapsulate from this Multiaddr\n   * @returns {Multiaddr}\n   */\n  decapsulateCode (code) {\n    const tuples = this.tuples()\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new Multiaddr(codec.tuplesToBytes(tuples.slice(0, i)))\n      }\n    }\n    return this\n  }\n\n  /**\n   * Extract the peerId if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\n   *\n   * // should return QmValidBase58string or null if the id is missing or invalid\n   * const peerId = mh1.getPeerId()\n   * ```\n   *\n   * @returns {string | null} peerId - The id of the peer or null if invalid or missing from the ma\n   */\n  getPeerId () {\n    try {\n      const tuples = this.stringTuples().filter((tuple) => {\n        if (tuple[0] === protocols.names.ipfs.code) {\n          return true\n        }\n        return false\n      })\n\n      // Get the last ipfs tuple ['ipfs', 'peerid string']\n      const tuple = tuples.pop()\n      if (tuple && tuple[1]) {\n        const peerIdStr = tuple[1]\n\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc')\n        }\n\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc')\n      }\n\n      return null\n    } catch (e) {\n      return null\n    }\n  }\n\n  /**\n   * Extract the path if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>\n   *\n   * // should return utf8 string or null if the id is missing or invalid\n   * const path = mh1.getPath()\n   * ```js\n   *\n   * @returns {string | null} path - The path of the multiaddr, or null if no path protocol is present\n   */\n  getPath () {\n    let path = null\n    try {\n      path = this.stringTuples().filter((tuple) => {\n        const proto = protocols(tuple[0])\n        if (proto.path) {\n          return true\n        }\n        return false\n      })[0][1]\n\n      if (!path) {\n        path = null\n      }\n    } catch (e) {\n      path = null\n    }\n    return path\n  }\n\n  /**\n   * Checks if two Multiaddrs are the same\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * mh1.equals(mh1)\n   * // true\n   *\n   * mh1.equals(mh2)\n   * // false\n   * ```\n   *\n   * @param {Multiaddr} addr\n   * @returns {boolean}\n   */\n  equals (addr) {\n    return uint8ArrayEquals(this.bytes, addr.bytes)\n  }\n\n  /**\n   * Resolve multiaddr if containing resolvable hostname.\n   *\n   * @example\n   * ```js\n   * Multiaddr.resolvers.set('dnsaddr', resolverFunction)\n   * const mh1 = new Multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\n   * const resolvedMultiaddrs = await mh1.resolve()\n   * // [\n   * //   <Multiaddr 04934b5353060fa1a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b53530601bbde03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b535391020fa1cc03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>\n   * // ]\n   * ```\n   *\n   * @returns {Promise<Array<Multiaddr>>}\n   */\n  async resolve () {\n    const resolvableProto = this.protos().find((p) => p.resolvable)\n\n    // Multiaddr is not resolvable?\n    if (!resolvableProto) {\n      return [this]\n    }\n\n    const resolver = resolvers.get(resolvableProto.name)\n    if (!resolver) {\n      throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER')\n    }\n\n    const addresses = await resolver(this)\n    return addresses.map((a) => new Multiaddr(a))\n  }\n\n  /**\n   * Gets a Multiaddrs node-friendly address object. Note that protocol information\n   * is left out: in Node (and most network systems) the protocol is unknowable\n   * given only the address.\n   *\n   * Has to be a ThinWaist Address, otherwise throws error\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n   * // {family: 4, address: '127.0.0.1', port: 4001}\n   * ```\n   *\n   * @returns {{family: 4 | 6, address: string, port: number}}\n   * @throws {Error} Throws error if Multiaddr is not a Thin Waist address\n   */\n  nodeAddress () {\n    const codes = this.protoCodes()\n    const names = this.protoNames()\n    const parts = this.toString().split('/').slice(1)\n\n    if (parts.length < 4) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6}/{address}/{tcp, udp}/{port}\".')\n    } else if (codes[0] !== 4 && codes[0] !== 41 && codes[0] !== 54 && codes[0] !== 55) {\n      throw new Error(`no protocol with name: \"'${names[0]}'\". Must have a valid family name: \"{ip4, ip6, dns4, dns6}\".`)\n    } else if (parts[2] !== 'tcp' && parts[2] !== 'udp') {\n      throw new Error(`no protocol with name: \"'${names[1]}'\". Must have a valid transport protocol: \"{tcp, udp}\".`)\n    }\n\n    return {\n      family: (codes[0] === 41 || codes[0] === 55) ? 6 : 4,\n      address: parts[1],\n      port: parseInt(parts[3]) // tcp or udp port\n    }\n  }\n\n  /**\n   * Returns if a Multiaddr is a Thin Waist address or not.\n   *\n   * Thin Waist is if a Multiaddr adheres to the standard combination of:\n   *\n   * `{IPv4, IPv6}/{TCP, UDP}`\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * const mh2 = new Multiaddr('/ip4/192.168.2.1/tcp/5001')\n   * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\n   * const mh4 = new Multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\n   * // <Multiaddr 047f0000010607d0de039302a503221220d52ebb89d85b02a284948203a62ff28389c57c9f42beec4ec20db76a64835843 - /ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a>\n   * mh1.isThinWaistAddress()\n   * // true\n   * mh2.isThinWaistAddress()\n   * // true\n   * mh3.isThinWaistAddress()\n   * // false\n   * mh4.isThinWaistAddress()\n   * // false\n   * ```\n   *\n   * @param {Multiaddr} [addr] - Defaults to using `this` instance\n   */\n  isThinWaistAddress (addr) {\n    const protos = (addr || this).protos()\n\n    if (protos.length !== 2) {\n      return false\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Creates a Multiaddr from a node-friendly address object\n   *\n   * @example\n   * ```js\n   * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   *\n   * @param {{family: 4 | 6, address: string, port: number}} addr\n   * @param {string} transport\n   */\n  static fromNodeAddress (addr, transport) {\n    if (!addr) { throw new Error('requires node address object') }\n    if (!transport) { throw new Error('requires transport protocol') }\n    let ip\n    switch (addr.family) {\n      case 4:\n        ip = 'ip4'\n        break\n      case 6:\n        ip = 'ip6'\n        break\n      default:\n        throw Error(`Invalid addr family. Got '${addr.family}' instead of 4 or 6`)\n    }\n    return new Multiaddr('/' + [ip, addr.address, transport, addr.port].join('/'))\n  }\n\n  /**\n   * Returns if something is a Multiaddr that is a name\n   *\n   * @param {Multiaddr} addr\n   * @returns {boolean} isName\n   */\n  static isName (addr) {\n    if (!Multiaddr.isMultiaddr(addr)) {\n      return false\n    }\n\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some((proto) => proto.resolvable)\n  }\n\n  /**\n   * Check if object is a CID instance\n   *\n   * @param {any} value\n   * @returns {value is Multiaddr}\n   */\n  static isMultiaddr (value) {\n    return value instanceof Multiaddr || Boolean(value && value[symbol])\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * For post Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   *\n   * @returns {string}\n   */\n  [inspect] () {\n    return '<Multiaddr ' +\n    uint8ArrayToString(this.bytes, 'base16') + ' - ' +\n    codec.bytesToString(this.bytes) + '>'\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * Fallback for pre Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   *\n   * @returns {string}\n   */\n  inspect () {\n    return '<Multiaddr ' +\n      uint8ArrayToString(this.bytes, 'base16') + ' - ' +\n      codec.bytesToString(this.bytes) + '>'\n  }\n}\n\n/**\n * Object containing table, names and codes of all supported protocols.\n * To get the protocol values from a Multiaddr, you can use\n * [`.protos()`](#multiaddrprotos),\n * [`.protoCodes()`](#multiaddrprotocodes) or\n * [`.protoNames()`](#multiaddrprotonames)\n *\n * @returns {{table: Array, names: Object, codes: Object}}\n */\nMultiaddr.protocols = protocols\n\nMultiaddr.resolvers = resolvers\n\n/**\n * Static factory\n *\n * @param {MultiaddrInput} addr\n */\nfunction multiaddr (addr) {\n  return new Multiaddr(addr)\n}\n\nmodule.exports = { Multiaddr, multiaddr, protocols, resolvers }\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}