{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar addAll = require('./add-all');\nvar last = require('it-last');\nvar configure = require('./lib/configure');\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nmodule.exports = function (options) {\n  var all = addAll(options);\n  return configure(function () {\n    /**\n     * @type {RootAPI[\"add\"]}\n     */\n    function add(_x) {\n      return _add.apply(this, arguments);\n    }\n    function _add() {\n      _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input) {\n        var options,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return last(all(input, options));\n            case 3:\n              return _context.abrupt(\"return\", _context.sent);\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return _add.apply(this, arguments);\n    }\n    return add;\n  })(options);\n};","map":{"version":3,"names":["addAll","require","last","configure","module","exports","options","all","add","input"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/ipfs-http-client/src/add.js"],"sourcesContent":["'use strict'\n\nconst addAll = require('./add-all')\nconst last = require('it-last')\nconst configure = require('./lib/configure')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nmodule.exports = (options) => {\n  const all = addAll(options)\n  return configure(() => {\n    /**\n     * @type {RootAPI[\"add\"]}\n     */\n    async function add (input, options = {}) {\n      // @ts-ignore - last may return undefined if source is empty\n      return await last(all(input, options))\n    }\n    return add\n  })(options)\n}\n"],"mappings":"AAAA,YAAY;;AAAA;AAAA;AAEZ,IAAMA,MAAM,GAAGC,OAAO,CAAC,WAAW,CAAC;AACnC,IAAMC,IAAI,GAAGD,OAAO,CAAC,SAAS,CAAC;AAC/B,IAAME,SAAS,GAAGF,OAAO,CAAC,iBAAiB,CAAC;;AAE5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACAG,MAAM,CAACC,OAAO,GAAG,UAACC,OAAO,EAAK;EAC5B,IAAMC,GAAG,GAAGP,MAAM,CAACM,OAAO,CAAC;EAC3B,OAAOH,SAAS,CAAC,YAAM;IACrB;AACJ;AACA;IAFI,SAGeK,GAAG;MAAA;IAAA;IAAA;MAAA,kEAAlB,iBAAoBC,KAAK;QAAA;UAAA;QAAA;UAAA;YAAA;cAAEH,OAAO,2DAAG,CAAC,CAAC;cAAA;cAAA,OAExBJ,IAAI,CAACK,GAAG,CAACE,KAAK,EAAEH,OAAO,CAAC,CAAC;YAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CACvC;MAAA;IAAA;IACD,OAAOE,GAAG;EACZ,CAAC,CAAC,CAACF,OAAO,CAAC;AACb,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}