{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar configure = require('../lib/configure');\nvar toUrlSearchParams = require('../lib/to-url-search-params');\nvar multipartRequest = require('../lib/multipart-request');\nvar abortSignal = require('../lib/abort-signal');\nvar _require = require('native-abort-controller'),\n  AbortController = _require.AbortController;\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {PubsubAPI[\"publish\"]}\n   */\n  function publish(_x, _x2) {\n    return _publish.apply(this, arguments);\n  }\n  function _publish() {\n    _publish = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(topic, data) {\n      var options,\n        searchParams,\n        controller,\n        signal,\n        res,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            searchParams = toUrlSearchParams(_objectSpread({\n              arg: topic\n            }, options)); // allow aborting requests on body errors\n            controller = new AbortController();\n            signal = abortSignal(controller.signal, options.signal);\n            _context.t0 = api;\n            _context.t1 = _objectSpread;\n            _context.t2 = {\n              signal: signal,\n              searchParams: searchParams\n            };\n            _context.next = 9;\n            return multipartRequest(data, controller, options.headers);\n          case 9:\n            _context.t3 = _context.sent;\n            _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n            _context.next = 13;\n            return _context.t0.post.call(_context.t0, 'pubsub/pub', _context.t4);\n          case 13:\n            res = _context.sent;\n            _context.next = 16;\n            return res.text();\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _publish.apply(this, arguments);\n  }\n  return publish;\n});","map":{"version":3,"names":["configure","require","toUrlSearchParams","multipartRequest","abortSignal","AbortController","module","exports","api","publish","topic","data","options","searchParams","arg","controller","signal","headers","post","res","text"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/ipfs-http-client/src/pubsub/publish.js"],"sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst multipartRequest = require('../lib/multipart-request')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PubsubAPI[\"publish\"]}\n   */\n  async function publish (topic, data, options = {}) {\n    const searchParams = toUrlSearchParams({\n      arg: topic,\n      ...options\n    })\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('pubsub/pub', {\n      signal,\n      searchParams,\n      ...(\n        await multipartRequest(data, controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return publish\n})\n"],"mappings":"AAAA,YAAY;;AAAA;AAAA;AAAA;AAEZ,IAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC7C,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAA6B,CAAC;AAChE,IAAME,gBAAgB,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AAC5D,IAAMG,WAAW,GAAGH,OAAO,CAAC,qBAAqB,CAAC;AAClD,eAA4BA,OAAO,CAAC,yBAAyB,CAAC;EAAtDI,eAAe,YAAfA,eAAe;;AAEvB;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAGP,SAAS,CAAC,UAAAQ,GAAG,EAAI;EAChC;AACF;AACA;EAFE,SAGeC,OAAO;IAAA;EAAA;EAAA;IAAA,sEAAtB,iBAAwBC,KAAK,EAAEC,IAAI;MAAA;QAAA;QAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAEC,OAAO,2DAAG,CAAC,CAAC;YACzCC,YAAY,GAAGX,iBAAiB;cACpCY,GAAG,EAAEJ;YAAK,GACPE,OAAO,EACV,EAEF;YACMG,UAAU,GAAG,IAAIV,eAAe,EAAE;YAClCW,MAAM,GAAGZ,WAAW,CAACW,UAAU,CAACC,MAAM,EAAEJ,OAAO,CAACI,MAAM,CAAC;YAAA,cAE3CR,GAAG;YAAA;YAAA;cACnBQ,MAAM,EAANA,MAAM;cACNH,YAAY,EAAZA;YAAY;YAAA;YAAA,OAEJV,gBAAgB,CAACQ,IAAI,EAAEI,UAAU,EAAEH,OAAO,CAACK,OAAO,CAAC;UAAA;YAAA;YAAA;YAAA;YAAA,mBAJvCC,IAAI,mBAAC,YAAY;UAAA;YAAjCC,GAAG;YAAA;YAAA,OAQHA,GAAG,CAACC,IAAI,EAAE;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACjB;IAAA;EAAA;EACD,OAAOX,OAAO;AAChB,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}