{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar t = window,\n  e = t.ShadowRoot && (void 0 === t.ShadyCSS || t.ShadyCSS.nativeShadow) && \"adoptedStyleSheets\" in Document.prototype && \"replace\" in CSSStyleSheet.prototype,\n  s = Symbol(),\n  n = new WeakMap();\nvar o = /*#__PURE__*/function () {\n  function o(t, e, n) {\n    _classCallCheck(this, o);\n    if (this._$cssResult$ = !0, n !== s) throw Error(\"CSSResult is not constructable. Use `unsafeCSS` or `css` instead.\");\n    this.cssText = t, this.t = e;\n  }\n  _createClass(o, [{\n    key: \"styleSheet\",\n    get: function get() {\n      var t = this.o;\n      var s = this.t;\n      if (e && void 0 === t) {\n        var _e = void 0 !== s && 1 === s.length;\n        _e && (t = n.get(s)), void 0 === t && ((this.o = t = new CSSStyleSheet()).replaceSync(this.cssText), _e && n.set(s, t));\n      }\n      return t;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.cssText;\n    }\n  }]);\n  return o;\n}();\nvar r = function r(t) {\n    return new o(\"string\" == typeof t ? t : t + \"\", void 0, s);\n  },\n  i = function i(t) {\n    for (var _len = arguments.length, e = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      e[_key - 1] = arguments[_key];\n    }\n    var n = 1 === t.length ? t[0] : e.reduce(function (e, s, n) {\n      return e + function (t) {\n        if (!0 === t._$cssResult$) return t.cssText;\n        if (\"number\" == typeof t) return t;\n        throw Error(\"Value passed to 'css' function must be a 'css' function result: \" + t + \". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.\");\n      }(s) + t[n + 1];\n    }, t[0]);\n    return new o(n, t, s);\n  },\n  S = function S(s, n) {\n    e ? s.adoptedStyleSheets = n.map(function (t) {\n      return t instanceof CSSStyleSheet ? t : t.styleSheet;\n    }) : n.forEach(function (e) {\n      var n = document.createElement(\"style\"),\n        o = t.litNonce;\n      void 0 !== o && n.setAttribute(\"nonce\", o), n.textContent = e.cssText, s.appendChild(n);\n    });\n  },\n  c = e ? function (t) {\n    return t;\n  } : function (t) {\n    return t instanceof CSSStyleSheet ? function (t) {\n      var e = \"\";\n      var _iterator = _createForOfIteratorHelper(t.cssRules),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _s = _step.value;\n          e += _s.cssText;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return r(e);\n    }(t) : t;\n  };\nexport { o as CSSResult, S as adoptStyles, i as css, c as getCompatibleStyle, e as supportsAdoptingStyleSheets, r as unsafeCSS };","map":{"version":3,"mappings":";;;;;;;;AAMA,IACMA,IAAkCC;EAK3BC,IACXF,EAAOG,oBACcC,MAApBJ,EAAOK,YAA0BL,EAAOK,SAASC,iBAClD,wBAAwBC,SAASC,aACjC,aAAaC,cAAcD;EAkBvBE,IAAoBC;EAEpBC,IAAc,IAAIC;AAAAA,IASXC;EAOXC,WACEC,GACAC,GACAC;IAAAA;IAEA,IAVFC,KAAeC,gBAAI,GAUbF,MAAcR,GAChB,MAAUW,MACR;IAGJF,KAAKH,UAAUA,GACfG,KAAKG,IAAWL,CACjB;EAAA;EAIGM;IAAAA;IAAAA;MAGF,IAAIA,IAAaJ,KAAKK;MACtB,IAAMP,IAAUE,KAAKG;MACrB,IAAIpB,UAA8CE,MAAfmB,GAA0B;QAC3D,IAAME,UAAwBrB,MAAZa,KAA4C,MAAnBA,EAAQS;QAC/CD,OACFF,IAAaX,EAAYe,IAAIV,UAEZb,MAAfmB,OACDJ,KAAKK,IAAcD,IAAa,IAAId,iBAAiBmB,YACpDT,KAAKH,UAEHS,MACFb,EAAYiB,IAAIZ,GAASM,GAG9B;MAAA;MACD,OAAOA,CACR;IAAA;EAEDO;IAAAA;IAAAA;MACE,OAAOX,KAAKH,OACb;IAAA;EAAA;EAAA;AAAA;AAWH,IAsBae,IAAaC,SAAbD,EAAaC;IAAAA,OACxB,IAAKlB,EACc,mBAAVkB,IAAqBA,IAAeA,IAAPC,SACpC7B,GACAM;EAAAA;EAWSwB,IAAM,SAANA,EACXjB,GACGkB;IAAAA;MAAAA;IAAAA;IAEH,IAAMnB,IACe,MAAnBC,EAAQS,SACJT,EAAQ,KACRkB,EAAOC,OACL,UAACC,GAAKC,GAAGC;MAAAA,OAAQF,IA7CAL;QAEzB,KAA6C,MAAxCA,EAAkCZ,cACrC,OAAQY,EAAoBhB;QACvB,IAAqB,mBAAVgB,GAChB,OAAOA;QAEP,MAAUX,MACR,qEACKW,IADL,uFAIH;MAAA,EAiCgDM,KAAKrB,EAAQsB,IAAM;IAAA,GAC5DtB,EAAQ;IAEhB,OAAO,IAAKH,EACVE,GACAC,GACAP,EACD;EAAA;EAYU8B,IAAc,SAAdA,EACXC,GACAC;IAEIxC,IACDuC,EAA0BE,qBAAqBD,EAAOE,IAAKC;MAAAA,OAC1DA,aAAapC,gBAAgBoC,IAAIA,EAAEtB;IAAAA,KAGrCmB,EAAOI,QAASD;MACd,IAAME,IAAQC,SAASC,cAAc;QAE/BC,IAASlD,EAAyBmD;MAAA,KAC1B/C,MAAV8C,KACFH,EAAMK,aAAa,SAASF,IAE9BH,EAAMM,cAAeR,EAAgB7B,SACrCyB,EAAWa,YAAYP,EAAM;IAAA,EAEhC;EAAA;EAWUQ,IACXrD,IAEK2C;IAAAA,OAAyBA;EAAAA,IACzBA;IAAAA,OACCA,aAAapC,gBAbY+C;MAC/B,IAAIxC,IAAU;MACd,2CAAmBwC,EAAMC;QAAAA;MAAAA;QAAzB,oDACEzC;UAAAA,IADS0C;UACT1C,KAAW0C,GAAK1C;QAAAA;MAElB;QAAA;MAAA;QAAA;MAAA;MAAA,OAAOe,EAAUf,EAAQ;IAAA,EAQkC6B,KAAKA;EAAAA;AAAAA","names":["global","window","supportsAdoptingStyleSheets","ShadowRoot","undefined","ShadyCSS","nativeShadow","Document","prototype","CSSStyleSheet","constructionToken","Symbol","cssTagCache","WeakMap","CSSResult","constructor","cssText","strings","safeToken","this","_$cssResult$","Error","_strings","styleSheet","_styleSheet","cacheable","length","get","replaceSync","set","toString","unsafeCSS","value","String","css","values","reduce","acc","v","idx","adoptStyles","renderRoot","styles","adoptedStyleSheets","map","s","forEach","style","document","createElement","nonce","litNonce","setAttribute","textContent","appendChild","getCompatibleStyle","sheet","cssRules","rule"],"sources":["C:\\Users\\paete\\Prototype\\nftmusicProtoCopy\\client\\node_modules\\@lit\\reactive-element\\src\\css-tag.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets =\n  global.ShadowRoot &&\n  (global.ShadyCSS === undefined || global.ShadyCSS.nativeShadow) &&\n  'adoptedStyleSheets' in Document.prototype &&\n  'replace' in CSSStyleSheet.prototype;\n\n/**\n * A CSSResult or native CSSStyleSheet.\n *\n * In browsers that support constructible CSS style sheets, CSSStyleSheet\n * object can be used for styling along side CSSResult from the `css`\n * template tag.\n */\nexport type CSSResultOrNative = CSSResult | CSSStyleSheet;\n\nexport type CSSResultArray = Array<CSSResultOrNative | CSSResultArray>;\n\n/**\n * A single CSSResult, CSSStyleSheet, or an array or nested arrays of those.\n */\nexport type CSSResultGroup = CSSResultOrNative | CSSResultArray;\n\nconst constructionToken = Symbol();\n\nconst cssTagCache = new WeakMap<TemplateStringsArray, CSSStyleSheet>();\n\n/**\n * A container for a string of CSS text, that may be used to create a CSSStyleSheet.\n *\n * CSSResult is the return value of `css`-tagged template literals and\n * `unsafeCSS()`. In order to ensure that CSSResults are only created via the\n * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.\n */\nexport class CSSResult {\n  // This property needs to remain unminified.\n  ['_$cssResult$'] = true;\n  readonly cssText: string;\n  private _styleSheet?: CSSStyleSheet;\n  private _strings: TemplateStringsArray | undefined;\n\n  private constructor(\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n        'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.'\n      );\n    }\n    this.cssText = cssText;\n    this._strings = strings;\n  }\n\n  // This is a getter so that it's lazy. In practice, this means stylesheets\n  // are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet | undefined {\n    // If `supportsAdoptingStyleSheets` is true then we assume CSSStyleSheet is\n    // constructable.\n    let styleSheet = this._styleSheet;\n    const strings = this._strings;\n    if (supportsAdoptingStyleSheets && styleSheet === undefined) {\n      const cacheable = strings !== undefined && strings.length === 1;\n      if (cacheable) {\n        styleSheet = cssTagCache.get(strings);\n      }\n      if (styleSheet === undefined) {\n        (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(\n          this.cssText\n        );\n        if (cacheable) {\n          cssTagCache.set(strings, styleSheet);\n        }\n      }\n    }\n    return styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\ntype ConstructableCSSResult = CSSResult & {\n  new (\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ): CSSResult;\n};\n\nconst textFromCSSResult = (value: CSSResultGroup | number) => {\n  // This property needs to remain unminified.\n  if ((value as CSSResult)['_$cssResult$'] === true) {\n    return (value as CSSResult).cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n      `Value passed to 'css' function must be a 'css' function result: ` +\n        `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` +\n        `to ensure page security.`\n    );\n  }\n};\n\n/**\n * Wrap a value for interpolation in a {@linkcode css} tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) =>\n  new (CSSResult as ConstructableCSSResult)(\n    typeof value === 'string' ? value : String(value),\n    undefined,\n    constructionToken\n  );\n\n/**\n * A template literal tag which can be used with LitElement's\n * {@linkcode LitElement.styles} property to set element styles.\n *\n * For security reasons, only literal string values and number may be used in\n * embedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}\n * may be used inside an expression.\n */\nexport const css = (\n  strings: TemplateStringsArray,\n  ...values: (CSSResultGroup | number)[]\n): CSSResult => {\n  const cssText =\n    strings.length === 1\n      ? strings[0]\n      : values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]\n        );\n  return new (CSSResult as ConstructableCSSResult)(\n    cssText,\n    strings,\n    constructionToken\n  );\n};\n\n/**\n * Applies the given styles to a `shadowRoot`. When Shadow DOM is\n * available but `adoptedStyleSheets` is not, styles are appended to the\n * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n * Note, when shimming is used, any styles that are subsequently placed into\n * the shadowRoot should be placed *before* any shimmed adopted styles. This\n * will match spec behavior that gives adopted sheets precedence over styles in\n * shadowRoot.\n */\nexport const adoptStyles = (\n  renderRoot: ShadowRoot,\n  styles: Array<CSSResultOrNative>\n) => {\n  if (supportsAdoptingStyleSheets) {\n    (renderRoot as ShadowRoot).adoptedStyleSheets = styles.map((s) =>\n      s instanceof CSSStyleSheet ? s : s.styleSheet!\n    );\n  } else {\n    styles.forEach((s) => {\n      const style = document.createElement('style');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const nonce = (global as any)['litNonce'];\n      if (nonce !== undefined) {\n        style.setAttribute('nonce', nonce);\n      }\n      style.textContent = (s as CSSResult).cssText;\n      renderRoot.appendChild(style);\n    });\n  }\n};\n\nconst cssResultFromStyleSheet = (sheet: CSSStyleSheet) => {\n  let cssText = '';\n  for (const rule of sheet.cssRules) {\n    cssText += rule.cssText;\n  }\n  return unsafeCSS(cssText);\n};\n\nexport const getCompatibleStyle =\n  supportsAdoptingStyleSheets ||\n  (NODE_MODE && global.CSSStyleSheet === undefined)\n    ? (s: CSSResultOrNative) => s\n    : (s: CSSResultOrNative) =>\n        s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}