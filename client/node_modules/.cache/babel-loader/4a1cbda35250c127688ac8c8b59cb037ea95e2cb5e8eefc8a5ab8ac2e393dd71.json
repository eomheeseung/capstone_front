{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _require = require('uint8arrays/from-string'),\n  uint8ArrayFromString = _require.fromString;\nvar multipartRequest = require('../lib/multipart-request');\nvar configure = require('../lib/configure');\nvar toUrlSearchParams = require('../lib/to-url-search-params');\nvar abortSignal = require('../lib/abort-signal');\nvar _require2 = require('native-abort-controller'),\n  AbortController = _require2.AbortController;\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {ConfigAPI[\"replace\"]}\n   */\n  var replace = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(config) {\n      var options,\n        controller,\n        signal,\n        res,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            // allow aborting requests on body errors\n            controller = new AbortController();\n            signal = abortSignal(controller.signal, options.signal);\n            _context.t0 = api;\n            _context.t1 = _objectSpread;\n            _context.t2 = {\n              signal: signal,\n              searchParams: toUrlSearchParams(options)\n            };\n            _context.next = 8;\n            return multipartRequest(uint8ArrayFromString(JSON.stringify(config)), controller, options.headers);\n          case 8:\n            _context.t3 = _context.sent;\n            _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n            _context.next = 12;\n            return _context.t0.post.call(_context.t0, 'config/replace', _context.t4);\n          case 12:\n            res = _context.sent;\n            _context.next = 15;\n            return res.text();\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function replace(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return replace;\n});","map":{"version":3,"names":["require","uint8ArrayFromString","fromString","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","module","exports","api","replace","config","options","controller","signal","searchParams","JSON","stringify","headers","post","res","text"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/ipfs-http-client/src/config/replace.js"],"sourcesContent":["'use strict'\n\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst multipartRequest = require('../lib/multipart-request')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ConfigAPI[\"replace\"]}\n   */\n  const replace = async (config, options = {}) => {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('config/replace', {\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest(uint8ArrayFromString(JSON.stringify(config)), controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n\n  return replace\n})\n"],"mappings":"AAAA,YAAY;;AAAA;AAAA;AAAA;AAEZ,eAA6CA,OAAO,CAAC,yBAAyB,CAAC;EAA3DC,oBAAoB,YAAhCC,UAAU;AAClB,IAAMC,gBAAgB,GAAGH,OAAO,CAAC,0BAA0B,CAAC;AAC5D,IAAMI,SAAS,GAAGJ,OAAO,CAAC,kBAAkB,CAAC;AAC7C,IAAMK,iBAAiB,GAAGL,OAAO,CAAC,6BAA6B,CAAC;AAChE,IAAMM,WAAW,GAAGN,OAAO,CAAC,qBAAqB,CAAC;AAClD,gBAA4BA,OAAO,CAAC,yBAAyB,CAAC;EAAtDO,eAAe,aAAfA,eAAe;;AAEvB;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAGL,SAAS,CAAC,UAAAM,GAAG,EAAI;EAChC;AACF;AACA;EACE,IAAMC,OAAO;IAAA,sEAAG,iBAAOC,MAAM;MAAA;QAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAEC,OAAO,2DAAG,CAAC,CAAC;YACzC;YACMC,UAAU,GAAG,IAAIP,eAAe,EAAE;YAClCQ,MAAM,GAAGT,WAAW,CAACQ,UAAU,CAACC,MAAM,EAAEF,OAAO,CAACE,MAAM,CAAC;YAAA,cAE3CL,GAAG;YAAA;YAAA;cACnBK,MAAM,EAANA,MAAM;cACNC,YAAY,EAAEX,iBAAiB,CAACQ,OAAO;YAAC;YAAA;YAAA,OAEhCV,gBAAgB,CAACF,oBAAoB,CAACgB,IAAI,CAACC,SAAS,CAACN,MAAM,CAAC,CAAC,EAAEE,UAAU,EAAED,OAAO,CAACM,OAAO,CAAC;UAAA;YAAA;YAAA;YAAA;YAAA,mBAJ/EC,IAAI,mBAAC,gBAAgB;UAAA;YAArCC,GAAG;YAAA;YAAA,OAQHA,GAAG,CAACC,IAAI,EAAE;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACjB;IAAA,gBAdKX,OAAO;MAAA;IAAA;EAAA,GAcZ;EAED,OAAOA,OAAO;AAChB,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}