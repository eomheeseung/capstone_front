{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ensureTensorflowBackend = exports.createOpAttr = exports.createTensorsTypeOpAttr = exports.getTFDType = exports.nodeBackend = exports.NodeJSKernelBackend = void 0;\nvar tf = require(\"@tensorflow/tfjs\");\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar util_1 = require(\"util\");\nvar int64_tensors_1 = require(\"./int64_tensors\");\n// tslint:disable-next-line:no-require-imports\nvar messages = require('./proto/api_pb');\nvar NodeJSKernelBackend = /** @class */function (_super) {\n  __extends(NodeJSKernelBackend, _super);\n  function NodeJSKernelBackend(binding, packageName) {\n    var _this = _super.call(this) || this;\n    _this.binding = binding;\n    _this.isGPUPackage = packageName === '@tensorflow/tfjs-node-gpu';\n    _this.isUsingGpuDevice = _this.binding.isUsingGpuDevice();\n    _this.tensorMap = new tf.DataStorage(_this, tf.engine());\n    return _this;\n  }\n  NodeJSKernelBackend.prototype.getDTypeInteger = function (dtype) {\n    switch (dtype) {\n      case 'float32':\n        return this.binding.TF_FLOAT;\n      case 'int32':\n        return this.binding.TF_INT32;\n      case 'bool':\n        return this.binding.TF_BOOL;\n      case 'complex64':\n        return this.binding.TF_COMPLEX64;\n      case 'string':\n        return this.binding.TF_STRING;\n      default:\n        throw new Error(\"Unsupported DType: \".concat(dtype));\n    }\n  };\n  NodeJSKernelBackend.prototype.typeAttributeFromTensor = function (value) {\n    return this.getDTypeInteger(value.dtype);\n  };\n  // Creates a new Tensor and maps the dataId to the passed in ID.\n  NodeJSKernelBackend.prototype.createOutputTensor = function (metadata) {\n    var newId = {};\n    this.tensorMap.set(newId, {\n      shape: metadata.shape,\n      dtype: metadata.dtype,\n      id: metadata.id,\n      values: null,\n      refCount: 1\n    });\n    var dtype;\n    switch (metadata.dtype) {\n      case this.binding.TF_FLOAT:\n        dtype = 'float32';\n        break;\n      case this.binding.TF_INT32:\n        dtype = 'int32';\n        break;\n      case this.binding.TF_INT64:\n        console.warn('INT64 output tensor will be stored as BigInt64Array.');\n        // INT64 is not supported in TFJS yet, cast it to int32.\n        dtype = 'int32';\n        break;\n      case this.binding.TF_BOOL:\n        dtype = 'bool';\n        break;\n      case this.binding.TF_COMPLEX64:\n        dtype = 'complex64';\n        break;\n      case this.binding.TF_STRING:\n        dtype = 'string';\n        break;\n      case this.binding.TF_RESOURCE:\n        // NOTE(cais): We currently represent resource-type Tensors\n        // as string of ubytes.\n        dtype = 'string';\n        break;\n      case this.binding.TF_UINT8:\n        // TensorFlow uses UINT8 as dtype for image tensor. UINT8 is not\n        // supported in TFJS yet, cast it to int32.\n        dtype = 'int32';\n        break;\n      default:\n        throw new Error(\"Unknown dtype enum \".concat(metadata.dtype));\n    }\n    // TODO(yassogba) Enable this once all the kernels are removed from backend.\n    // We can then change the return type from Tensor to TensorInfo.\n    // return {dataId: newId, shape: metadata.shape, dtype};\n    var tensorInfo = {\n      dataId: newId,\n      shape: metadata.shape,\n      dtype: dtype\n    };\n    return tf.engine().makeTensorFromTensorInfo(tensorInfo);\n  };\n  // Prepares Tensor instances for Op execution.\n  NodeJSKernelBackend.prototype.getInputTensorIds = function (tensors) {\n    var ids = [];\n    for (var i = 0; i < tensors.length; i++) {\n      if (tensors[i] instanceof int64_tensors_1.Int64Scalar) {\n        // Then `tensors[i]` is a Int64Scalar, which we currently represent\n        // using an `Int32Array`.\n        var value = tensors[i].valueArray;\n        var id = this.binding.createTensor([], this.binding.TF_INT64, value);\n        ids.push(id);\n      } else {\n        var info = this.tensorMap.get(tensors[i].dataId);\n        // TODO - what about ID in this case? Handle in write()??\n        if (info.values != null) {\n          // Values were delayed to write into the TensorHandle. Do that before\n          // Op execution and clear stored values.\n          info.id = this.binding.createTensor(info.shape, info.dtype, info.values);\n          info.values = null;\n        }\n        ids.push(info.id);\n      }\n    }\n    return ids;\n  };\n  NodeJSKernelBackend.prototype.createReductionOpAttrs = function (tensor, keepDims) {\n    if (keepDims === void 0) {\n      keepDims = false;\n    }\n    return [{\n      name: 'keep_dims',\n      type: this.binding.TF_ATTR_BOOL,\n      value: keepDims\n    }, createTensorsTypeOpAttr('T', tensor.dtype), createTensorsTypeOpAttr('Tidx', 'int32')];\n  };\n  NodeJSKernelBackend.prototype.floatPrecision = function () {\n    return 32;\n  };\n  NodeJSKernelBackend.prototype.epsilon = function () {\n    return _super.prototype.epsilon.call(this);\n  };\n  /**\n   * Executes an op that has a single input and output.\n   *\n   * Helper function to wrap executeSingleOutput in a particular case.\n   * @param name The name of the Op to execute.\n   * @param input The input Tensor for the Op.\n   */\n  NodeJSKernelBackend.prototype.executeSingleInput = function (name, input) {\n    var opAttrs = [createTensorsTypeOpAttr('T', input.dtype)];\n    return this.executeSingleOutput(name, opAttrs, [input]);\n  };\n  /**\n   * Executes a TensorFlow Eager Op that provides one output Tensor.\n   * @param name The name of the Op to execute.\n   * @param opAttrs The list of Op attributes required to execute.\n   * @param inputs The list of input Tensors for the Op.\n   * @return A resulting Tensor from Op execution.\n   */\n  NodeJSKernelBackend.prototype.executeSingleOutput = function (name, opAttrs, inputs) {\n    var outputMetadata = this.binding.executeOp(name, opAttrs, this.getInputTensorIds(inputs), 1);\n    return this.createOutputTensor(outputMetadata[0]);\n  };\n  /**\n   * Executes a TensorFlow Eager Op that provides multiple output Tensors.\n   * @param name The name of the Op to execute.\n   * @param opAttrs The list of Op attributes required to execute.\n   * @param inputs The list of input Tensors for the Op.\n   * @param numOutputs The number of output Tensors for Op execution.\n   * @return A resulting Tensor array from Op execution.\n   */\n  NodeJSKernelBackend.prototype.executeMultipleOutputs = function (name, opAttrs, inputs, numOutputs) {\n    var _this = this;\n    var outputMetadata = this.binding.executeOp(name, opAttrs, this.getInputTensorIds(inputs), numOutputs);\n    return outputMetadata.map(function (m) {\n      return _this.createOutputTensor(m);\n    });\n  };\n  NodeJSKernelBackend.prototype.numDataIds = function () {\n    return this.tensorMap.numDataIds();\n  };\n  NodeJSKernelBackend.prototype.dispose = function () {};\n  NodeJSKernelBackend.prototype.read = function (dataId) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.readSync(dataId)];\n      });\n    });\n  };\n  NodeJSKernelBackend.prototype.readSync = function (dataId) {\n    if (!this.tensorMap.has(dataId)) {\n      throw new Error(\"Tensor \".concat(dataId, \" was not registered!\"));\n    }\n    var info = this.tensorMap.get(dataId);\n    if (info.values != null) {\n      return info.values;\n    } else {\n      return this.binding.tensorDataSync(info.id);\n    }\n  };\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released, false otherwise.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  NodeJSKernelBackend.prototype.disposeData = function (dataId, force) {\n    if (force === void 0) {\n      force = false;\n    }\n    // No-op if already disposed.\n    if (this.tensorMap.has(dataId)) {\n      var id = this.tensorMap.get(dataId).id;\n      this.tensorMap.get(dataId).refCount--;\n      if (!force && this.tensorMap.get(dataId).refCount > 0) {\n        return false;\n      }\n      if (id != null && id >= 0) {\n        this.binding.deleteTensor(id);\n      }\n      this.tensorMap.delete(dataId);\n    }\n    return true;\n  };\n  /** Return refCount of a `TensorData`. */\n  NodeJSKernelBackend.prototype.refCount = function (dataId) {\n    if (this.tensorMap.has(dataId)) {\n      var tensorData = this.tensorMap.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  };\n  NodeJSKernelBackend.prototype.incRef = function (dataId) {\n    this.tensorMap.get(dataId).refCount++;\n  };\n  NodeJSKernelBackend.prototype.move = function (dataId, values, shape, dtype, refCount) {\n    this.tensorMap.set(dataId, {\n      shape: shape,\n      dtype: getTFDType(dtype),\n      values: values,\n      id: -1,\n      refCount: refCount\n    });\n  };\n  NodeJSKernelBackend.prototype.write = function (values, shape, dtype) {\n    var dataId = {};\n    this.move(dataId, values, shape, dtype, 1);\n    return dataId;\n  };\n  NodeJSKernelBackend.prototype.applyActivation = function (input, activation, preluActivationWeights, leakyreluAlpha) {\n    var result = input;\n    if (activation != null) {\n      if (activation === 'linear') {\n        // No-op\n      } else if (activation === 'relu') {\n        result = tf.relu(result);\n      } else if (activation === 'prelu') {\n        result = tf.prelu(result, preluActivationWeights);\n      } else if (activation === 'leakyrelu') {\n        result = tf.leakyRelu(result, leakyreluAlpha);\n      } else if (activation === 'elu') {\n        result = tf.elu(result);\n      } else if (activation === 'relu6') {\n        result = tf.relu6(result);\n      } else if (activation === 'sigmoid') {\n        result = tf.sigmoid(result);\n      } else {\n        throw new Error(\"Activation: \".concat(activation, \" has not been implemented for the Node.js backend\"));\n      }\n    }\n    return result;\n  };\n  NodeJSKernelBackend.prototype.divide = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('Div', opAttrs, [a, b]);\n  };\n  NodeJSKernelBackend.prototype.divNoNan = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('DivNoNan', opAttrs, [a, b]);\n  };\n  NodeJSKernelBackend.prototype.where = function (condition) {\n    return this.executeSingleOutput('Where', [], [condition]);\n  };\n  NodeJSKernelBackend.prototype.topKValues = function (x, k) {\n    throw new Error('Method not implemented.');\n  };\n  NodeJSKernelBackend.prototype.topKIndices = function (x, k) {\n    throw new Error('Method not implemented.');\n  };\n  NodeJSKernelBackend.prototype.int = function (x) {\n    throw new Error('Method not implemented.');\n  };\n  NodeJSKernelBackend.prototype.decodeJpeg = function (contents, channels, ratio, fancyUpscaling, tryRecoverTruncated, acceptableFraction, dctMethod) {\n    var opAttrs = [{\n      name: 'channels',\n      type: this.binding.TF_ATTR_INT,\n      value: channels\n    }, {\n      name: 'ratio',\n      type: this.binding.TF_ATTR_INT,\n      value: ratio\n    }, {\n      name: 'fancy_upscaling',\n      type: this.binding.TF_ATTR_BOOL,\n      value: fancyUpscaling\n    }, {\n      name: 'try_recover_truncated',\n      type: this.binding.TF_ATTR_BOOL,\n      value: tryRecoverTruncated\n    }, {\n      name: 'acceptable_fraction',\n      type: this.binding.TF_ATTR_FLOAT,\n      value: acceptableFraction\n    }, {\n      name: 'dct_method',\n      type: this.binding.TF_ATTR_STRING,\n      value: dctMethod\n    }];\n    var inputArgs = [(0, tfjs_1.scalar)(contents, 'string')];\n    return this.executeSingleOutput('DecodeJpeg', opAttrs, inputArgs);\n  };\n  NodeJSKernelBackend.prototype.decodePng = function (contents, channels) {\n    var opAttrs = [{\n      name: 'channels',\n      type: this.binding.TF_ATTR_INT,\n      value: channels\n    }];\n    var inputArgs = [(0, tfjs_1.scalar)(contents, 'string')];\n    return this.executeSingleOutput('DecodePng', opAttrs, inputArgs);\n  };\n  NodeJSKernelBackend.prototype.decodeBmp = function (contents, channels) {\n    var opAttrs = [{\n      name: 'channels',\n      type: this.binding.TF_ATTR_INT,\n      value: channels\n    }];\n    var inputArgs = [(0, tfjs_1.scalar)(contents, 'string')];\n    return this.executeSingleOutput('DecodeBmp', opAttrs, inputArgs);\n  };\n  NodeJSKernelBackend.prototype.decodeGif = function (contents) {\n    var inputArgs = [(0, tfjs_1.scalar)(contents, 'string')];\n    return this.executeSingleOutput('DecodeGif', [], inputArgs);\n  };\n  NodeJSKernelBackend.prototype.executeEncodeImageOp = function (name, opAttrs, imageData, imageShape) {\n    var inputTensorId = this.binding.createTensor(imageShape, this.binding.TF_UINT8, imageData);\n    var outputMetadata = this.binding.executeOp(name, opAttrs, [inputTensorId], 1);\n    var outputTensorInfo = outputMetadata[0];\n    // prevent the tensor data from being converted to a UTF8 string, since\n    // the encoded data is not valid UTF8\n    outputTensorInfo.dtype = this.binding.TF_UINT8;\n    return this.createOutputTensor(outputTensorInfo);\n  };\n  NodeJSKernelBackend.prototype.encodeJpeg = function (imageData, imageShape, format, quality, progressive, optimizeSize, chromaDownsampling, densityUnit, xDensity, yDensity, xmpMetadata) {\n    var opAttrs = [{\n      name: 'format',\n      type: this.binding.TF_ATTR_STRING,\n      value: format\n    }, {\n      name: 'quality',\n      type: this.binding.TF_ATTR_INT,\n      value: quality\n    }, {\n      name: 'progressive',\n      type: this.binding.TF_ATTR_BOOL,\n      value: progressive\n    }, {\n      name: 'optimize_size',\n      type: this.binding.TF_ATTR_BOOL,\n      value: optimizeSize\n    }, {\n      name: 'chroma_downsampling',\n      type: this.binding.TF_ATTR_BOOL,\n      value: chromaDownsampling\n    }, {\n      name: 'density_unit',\n      type: this.binding.TF_ATTR_STRING,\n      value: densityUnit\n    }, {\n      name: 'x_density',\n      type: this.binding.TF_ATTR_INT,\n      value: xDensity\n    }, {\n      name: 'y_density',\n      type: this.binding.TF_ATTR_INT,\n      value: yDensity\n    }, {\n      name: 'xmp_metadata',\n      type: this.binding.TF_ATTR_STRING,\n      value: xmpMetadata\n    }];\n    return this.executeEncodeImageOp('EncodeJpeg', opAttrs, imageData, imageShape);\n  };\n  NodeJSKernelBackend.prototype.encodePng = function (imageData, imageShape, compression) {\n    var opAttrs = [{\n      name: 'compression',\n      type: this.binding.TF_ATTR_INT,\n      value: compression\n    }];\n    return this.executeEncodeImageOp('EncodePng', opAttrs, imageData, imageShape);\n  };\n  NodeJSKernelBackend.prototype.deleteSavedModel = function (id) {\n    this.binding.deleteSavedModel(id);\n  };\n  NodeJSKernelBackend.prototype.loadSavedModelMetaGraph = function (path, tags) {\n    return this.binding.loadSavedModel(path, tags);\n  };\n  NodeJSKernelBackend.prototype.getMappedInputTensorIds = function (inputs, inputTensorInfos) {\n    var tensorIds = this.getInputTensorIds(inputs);\n    for (var i = 0; i < inputs.length; i++) {\n      if (inputTensorInfos[i] != null) {\n        if (inputTensorInfos[i].tfDtype === 'DT_UINT8') {\n          var data = Uint8Array.from(inputs[i].dataSync());\n          var inputTensorId = this.binding.createTensor(inputs[i].shape, this.binding.TF_UINT8, data);\n          tensorIds[i] = inputTensorId;\n        } else if (inputTensorInfos[i].tfDtype === 'DT_INT64') {\n          var data = (0, int64_tensors_1.encodeInt32ArrayAsInt64)(inputs[i].dataSync());\n          var inputTensorId = this.binding.createTensor(inputs[i].shape, this.binding.TF_INT64, data);\n          tensorIds[i] = inputTensorId;\n        }\n      }\n    }\n    return tensorIds;\n  };\n  NodeJSKernelBackend.prototype.runSavedModel = function (id, inputs, inputTensorInfos, outputOpNames) {\n    var _this = this;\n    var outputMetadata = this.binding.runSavedModel(id, this.getMappedInputTensorIds(inputs, inputTensorInfos), inputTensorInfos.map(function (info) {\n      return info.name;\n    }).join(','), outputOpNames.join(','));\n    return outputMetadata.map(function (m) {\n      return _this.createOutputTensor(m);\n    });\n  };\n  // ------------------------------------------------------------\n  // TensorBoard-related (tfjs-node-specific) backend kernels.\n  NodeJSKernelBackend.prototype.summaryWriter = function (logdir) {\n    var opAttrs = [{\n      name: 'shared_name',\n      type: this.binding.TF_ATTR_STRING,\n      value: \"logdir:\".concat(logdir)\n    }, {\n      name: 'container',\n      type: this.binding.TF_ATTR_STRING,\n      value: ''\n    }];\n    var writerResource = this.executeSingleOutput('SummaryWriter', opAttrs, []);\n    return writerResource;\n  };\n  NodeJSKernelBackend.prototype.createSummaryFileWriter = function (resourceHandle, logdir, maxQueue, flushMillis, filenameSuffix) {\n    var inputArgs = [resourceHandle, (0, tfjs_1.scalar)(logdir), (0, tfjs_1.scalar)(maxQueue == null ? 10 : maxQueue, 'int32'), (0, tfjs_1.scalar)(flushMillis == null ? 2 * 60 * 1000 : flushMillis, 'int32'), (0, tfjs_1.scalar)(filenameSuffix == null ? '.v2' : filenameSuffix)];\n    this.executeMultipleOutputs('CreateSummaryFileWriter', [], inputArgs, 0);\n  };\n  NodeJSKernelBackend.prototype.writeScalarSummary = function (resourceHandle, step, name, value) {\n    var _this = this;\n    (0, tfjs_1.tidy)(function () {\n      tfjs_1.util.assert(Number.isInteger(step), function () {\n        return \"step is expected to be an integer, but is instead \".concat(step);\n      });\n      var inputArgs = [resourceHandle, new int64_tensors_1.Int64Scalar(step), (0, tfjs_1.scalar)(name, 'string')];\n      var typeAttr;\n      if (typeof value === 'number') {\n        inputArgs.push((0, tfjs_1.scalar)(value));\n        typeAttr = _this.binding.TF_FLOAT;\n      } else {\n        // `value` is a Scalar.\n        tfjs_1.util.assert(value.rank === 0, function () {\n          return \"A non-scalar tensor (rank \".concat(value.rank, \") is passed to \") + \"writeScalarSummary()\";\n        });\n        inputArgs.push(value);\n        typeAttr = _this.typeAttributeFromTensor(value);\n      }\n      var opAttrs = [{\n        name: 'T',\n        type: _this.binding.TF_ATTR_TYPE,\n        value: typeAttr\n      }];\n      _this.binding.executeOp('WriteScalarSummary', opAttrs, _this.getInputTensorIds(inputArgs), 0);\n    });\n  };\n  NodeJSKernelBackend.prototype.writeHistogramSummary = function (resourceHandle, step, name, data, bucketCount, description) {\n    var _this = this;\n    (0, tfjs_1.tidy)(function () {\n      tfjs_1.util.assert(Number.isInteger(step), function () {\n        return \"step is expected to be an integer, but is instead \".concat(step);\n      });\n      // We use the WriteSummary op, and not WriteHistogramSummary. The\n      // difference is that WriteHistogramSummary takes a tensor of any shape,\n      // and places the values in 30 buckets, while WriteSummary expects a\n      // tensor which already describes the bucket widths and counts.\n      //\n      // If we were to use WriteHistogramSummary, we wouldn't have to implement\n      // the \"bucketization\" of the input tensor, but we also wouldn't have\n      // control over the number of buckets, or the description of the graph.\n      //\n      // Therefore, we instead use WriteSummary, which makes it possible to\n      // support these features. However, the trade-off is that we have to\n      // implement our own \"bucketization\", and have to write the summary as a\n      // protobuf message.\n      var content = new messages.HistogramPluginData().setVersion(0);\n      var pluginData = new messages.SummaryMetadata.PluginData().setPluginName('histograms').setContent(content.serializeBinary());\n      var summary = new messages.SummaryMetadata().setPluginData(pluginData).setDisplayName(null).setSummaryDescription(description);\n      var summaryTensor = (0, tfjs_1.scalar)(summary.serializeBinary(), 'string');\n      var nameTensor = (0, tfjs_1.scalar)(name, 'string');\n      var stepScalar = new int64_tensors_1.Int64Scalar(step);\n      var buckets = _this.buckets(data, bucketCount);\n      tfjs_1.util.assert(buckets.rank === 2 && buckets.shape[1] === 3, function () {\n        return \"Expected buckets to have shape [k, 3], but they had shape \".concat(buckets.shape);\n      });\n      tfjs_1.util.assert(buckets.dtype === 'float32', function () {\n        return \"Expected buckets to have dtype float32, but they had dtype \".concat(buckets.dtype);\n      });\n      var inputArgs = [resourceHandle, stepScalar, buckets, nameTensor, summaryTensor];\n      var typeAttr = _this.typeAttributeFromTensor(buckets);\n      var opAttrs = [{\n        name: 'T',\n        type: _this.binding.TF_ATTR_TYPE,\n        value: typeAttr\n      }];\n      _this.binding.executeOp('WriteSummary', opAttrs, _this.getInputTensorIds(inputArgs), 0);\n    });\n  };\n  NodeJSKernelBackend.prototype.flushSummaryWriter = function (resourceHandle) {\n    var inputArgs = [resourceHandle];\n    this.executeMultipleOutputs('FlushSummaryWriter', [], inputArgs, 0);\n  };\n  /**\n   * Group data into histogram buckets.\n   *\n   * @param data A `Tensor` of any shape. Must be castable to `float32`\n   * @param bucketCount Optional positive `number`\n   * @returns A `Tensor` of shape `[k, 3]` and type `float32`. The `i`th row is\n   *   a triple `[leftEdge, rightEdge, count]` for a single bucket. The value of\n   *   `k` is either `bucketCount`, `1` or `0`.\n   */\n  NodeJSKernelBackend.prototype.buckets = function (data, bucketCount) {\n    if (data.size === 0) {\n      return tf.tensor([], [0, 3], 'float32');\n    }\n    // 30 is the default number of buckets in the TensorFlow Python\n    // implementation. See\n    // https://github.com/tensorflow/tensorboard/blob/master/tensorboard/plugins/histogram/summary_v2.py\n    bucketCount = bucketCount !== undefined ? bucketCount : 30;\n    tfjs_1.util.assert(Number.isInteger(bucketCount) && bucketCount > 0, function () {\n      return \"Expected bucket count to be a strictly positive integer, but it was \" + \"\".concat(bucketCount);\n    });\n    data = data.flatten();\n    data = data.cast('float32');\n    var min = data.min();\n    var max = data.max();\n    var range = max.sub(min);\n    var isSingular = range.equal(0).arraySync() !== 0;\n    if (isSingular) {\n      var center = min;\n      var bucketStart = center.sub(0.5);\n      var bucketEnd = center.add(0.5);\n      var bucketCounts_1 = tf.scalar(data.size, 'float32');\n      return tf.concat([bucketStart, bucketEnd, bucketCounts_1]).reshape([1, 3]);\n    }\n    var bucketWidth = range.div(bucketCount);\n    var offsets = data.sub(min);\n    var bucketIndices = offsets.floorDiv(bucketWidth).cast('int32');\n    var clampedIndices = tf.minimum(bucketIndices, bucketCount - 1).cast('int32');\n    var oneHots = tf.oneHot(clampedIndices, bucketCount);\n    var bucketCounts = oneHots.sum(0).cast('int32');\n    var edges = tf.linspace(min.arraySync(), max.arraySync(), bucketCount + 1);\n    // Ensure last value in edges is max (TF's linspace op doesn't do this)\n    edges = tf.concat([edges.slice(0, bucketCount), max.reshape([1])], 0);\n    var leftEdges = edges.slice(0, bucketCount);\n    var rightEdges = edges.slice(1, bucketCount);\n    return tf.stack([leftEdges, rightEdges, bucketCounts.cast('float32')]).transpose();\n  };\n  // ~ TensorBoard-related (tfjs-node-specific) backend kernels.\n  // ------------------------------------------------------------\n  NodeJSKernelBackend.prototype.memory = function () {\n    // Due to automatic garbage collection, the numbers are unreliable.\n    // TODO(kreeger): Since there is finalization in C, count the true\n    // number of undisposed tensors.\n    return {\n      unreliable: true\n    };\n  };\n  NodeJSKernelBackend.prototype.time = function (f) {\n    return __awaiter(this, void 0, void 0, function () {\n      var start, elapsed;\n      return __generator(this, function (_a) {\n        start = process.hrtime();\n        f();\n        elapsed = process.hrtime(start);\n        return [2 /*return*/, {\n          kernelMs: elapsed[0] * 1000 + elapsed[1] / 1000000\n        }];\n      });\n    });\n  };\n  NodeJSKernelBackend.prototype.getNumOfSavedModels = function () {\n    return this.binding.getNumOfSavedModels();\n  };\n  return NodeJSKernelBackend;\n}(tfjs_1.KernelBackend);\nexports.NodeJSKernelBackend = NodeJSKernelBackend;\n/** Returns an instance of the Node.js backend. */\nfunction nodeBackend() {\n  return tf.findBackend('tensorflow');\n}\nexports.nodeBackend = nodeBackend;\n/** Returns the TF dtype for a given DataType. */\nfunction getTFDType(dataType) {\n  var binding = nodeBackend().binding;\n  switch (dataType) {\n    case 'float32':\n      return binding.TF_FLOAT;\n    case 'int32':\n      return binding.TF_INT32;\n    case 'bool':\n      return binding.TF_BOOL;\n    case 'complex64':\n      return binding.TF_COMPLEX64;\n    case 'string':\n      return binding.TF_STRING;\n    // tslint:disable-next-line:no-any\n    case 'int64':\n      // int64 is not a generally supported dtype in TensorFlow.js\n      // (tfjs-core). However, it needs to be included here for the purpose of\n      // writing the `step` value to TensorBoard via WriteScalarSummary and\n      // other op kernels.\n      return binding.TF_INT64;\n    default:\n      var errorMessage = \"Unknown dtype: \".concat(dataType);\n      throw new Error(errorMessage);\n  }\n}\nexports.getTFDType = getTFDType;\n/**\n * Creates a TFEOpAttr for a 'type' OpDef attribute from a Tensor or list of\n * Tensors.\n */\nfunction createTensorsTypeOpAttr(attrName, tensorsOrDtype) {\n  if ((0, util_1.isNullOrUndefined)(tensorsOrDtype)) {\n    throw new Error('Invalid input tensors value.');\n  }\n  return {\n    name: attrName,\n    type: nodeBackend().binding.TF_ATTR_TYPE,\n    value: tensorsOrDtype instanceof tf.Tensor || Array.isArray(tensorsOrDtype) ? getTFDTypeForInputs(tensorsOrDtype) : getTFDType(tensorsOrDtype)\n  };\n}\nexports.createTensorsTypeOpAttr = createTensorsTypeOpAttr;\n// TODO(yassogba) remove? who uses this?\nfunction createOpAttr(attrName, tensorsOrDtype, value) {\n  if ((0, util_1.isNullOrUndefined)(tensorsOrDtype)) {\n    throw new Error('Invalid input tensors value.');\n  }\n  return {\n    name: attrName,\n    type: nodeBackend().binding.TF_BOOL,\n    value: value\n  };\n}\nexports.createOpAttr = createOpAttr;\n/** Returns the dtype number for a single or list of input Tensors. */\nfunction getTFDTypeForInputs(tensors) {\n  if ((0, util_1.isNullOrUndefined)(tensors)) {\n    throw new Error('Invalid input tensors value.');\n  }\n  if ((0, util_1.isArray)(tensors)) {\n    for (var i = 0; i < tensors.length; i++) {\n      return getTFDType(tensors[i].dtype);\n    }\n    return -1;\n  } else {\n    return getTFDType(tensors.dtype);\n  }\n}\nfunction ensureTensorflowBackend() {\n  tf.util.assert(tf.getBackend() === 'tensorflow', function () {\n    return \"Expect the current backend to be \\\"tensorflow\\\", but got \\\"\".concat(tf.getBackend(), \"\\\"\");\n  });\n}\nexports.ensureTensorflowBackend = ensureTensorflowBackend;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","pop","length","push","defineProperty","exports","ensureTensorflowBackend","createOpAttr","createTensorsTypeOpAttr","getTFDType","nodeBackend","NodeJSKernelBackend","tf","require","tfjs_1","util_1","int64_tensors_1","messages","_super","binding","packageName","_this","isGPUPackage","isUsingGpuDevice","tensorMap","DataStorage","engine","getDTypeInteger","dtype","TF_FLOAT","TF_INT32","TF_BOOL","TF_COMPLEX64","TF_STRING","Error","concat","typeAttributeFromTensor","createOutputTensor","metadata","newId","set","shape","id","values","refCount","TF_INT64","console","warn","TF_RESOURCE","TF_UINT8","tensorInfo","dataId","makeTensorFromTensorInfo","getInputTensorIds","tensors","ids","i","Int64Scalar","valueArray","createTensor","info","get","createReductionOpAttrs","tensor","keepDims","name","type","TF_ATTR_BOOL","floatPrecision","epsilon","executeSingleInput","input","opAttrs","executeSingleOutput","inputs","outputMetadata","executeOp","executeMultipleOutputs","numOutputs","map","m","numDataIds","dispose","read","_a","readSync","has","tensorDataSync","disposeData","force","deleteTensor","delete","tensorData","incRef","move","write","applyActivation","activation","preluActivationWeights","leakyreluAlpha","relu","prelu","leakyRelu","elu","relu6","sigmoid","divide","a","backend_util","upcastType","divNoNan","where","condition","topKValues","x","k","topKIndices","int","decodeJpeg","contents","channels","ratio","fancyUpscaling","tryRecoverTruncated","acceptableFraction","dctMethod","TF_ATTR_INT","TF_ATTR_FLOAT","TF_ATTR_STRING","inputArgs","scalar","decodePng","decodeBmp","decodeGif","executeEncodeImageOp","imageData","imageShape","inputTensorId","outputTensorInfo","encodeJpeg","format","quality","progressive","optimizeSize","chromaDownsampling","densityUnit","xDensity","yDensity","xmpMetadata","encodePng","compression","deleteSavedModel","loadSavedModelMetaGraph","path","tags","loadSavedModel","getMappedInputTensorIds","inputTensorInfos","tensorIds","tfDtype","data","Uint8Array","from","dataSync","encodeInt32ArrayAsInt64","runSavedModel","outputOpNames","join","summaryWriter","logdir","writerResource","createSummaryFileWriter","resourceHandle","maxQueue","flushMillis","filenameSuffix","writeScalarSummary","tidy","util","assert","Number","isInteger","typeAttr","rank","TF_ATTR_TYPE","writeHistogramSummary","bucketCount","description","content","HistogramPluginData","setVersion","pluginData","SummaryMetadata","PluginData","setPluginName","setContent","serializeBinary","summary","setPluginData","setDisplayName","setSummaryDescription","summaryTensor","nameTensor","stepScalar","buckets","flushSummaryWriter","size","undefined","flatten","cast","min","max","range","sub","isSingular","equal","arraySync","center","bucketStart","bucketEnd","add","bucketCounts_1","reshape","bucketWidth","div","offsets","bucketIndices","floorDiv","clampedIndices","minimum","oneHots","oneHot","bucketCounts","sum","edges","linspace","slice","leftEdges","rightEdges","stack","transpose","memory","unreliable","time","start","elapsed","process","hrtime","kernelMs","getNumOfSavedModels","KernelBackend","findBackend","dataType","errorMessage","attrName","tensorsOrDtype","isNullOrUndefined","Tensor","isArray","getTFDTypeForInputs","getBackend"],"sources":["C:/Users/paete/CapstonPro/nftmusicProtoCopy/client/node_modules/@tensorflow/tfjs-node/dist/nodejs_kernel_backend.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ensureTensorflowBackend = exports.createOpAttr = exports.createTensorsTypeOpAttr = exports.getTFDType = exports.nodeBackend = exports.NodeJSKernelBackend = void 0;\nvar tf = require(\"@tensorflow/tfjs\");\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar util_1 = require(\"util\");\nvar int64_tensors_1 = require(\"./int64_tensors\");\n// tslint:disable-next-line:no-require-imports\nvar messages = require('./proto/api_pb');\nvar NodeJSKernelBackend = /** @class */ (function (_super) {\n    __extends(NodeJSKernelBackend, _super);\n    function NodeJSKernelBackend(binding, packageName) {\n        var _this = _super.call(this) || this;\n        _this.binding = binding;\n        _this.isGPUPackage = packageName === '@tensorflow/tfjs-node-gpu';\n        _this.isUsingGpuDevice = _this.binding.isUsingGpuDevice();\n        _this.tensorMap = new tf.DataStorage(_this, tf.engine());\n        return _this;\n    }\n    NodeJSKernelBackend.prototype.getDTypeInteger = function (dtype) {\n        switch (dtype) {\n            case 'float32':\n                return this.binding.TF_FLOAT;\n            case 'int32':\n                return this.binding.TF_INT32;\n            case 'bool':\n                return this.binding.TF_BOOL;\n            case 'complex64':\n                return this.binding.TF_COMPLEX64;\n            case 'string':\n                return this.binding.TF_STRING;\n            default:\n                throw new Error(\"Unsupported DType: \".concat(dtype));\n        }\n    };\n    NodeJSKernelBackend.prototype.typeAttributeFromTensor = function (value) {\n        return this.getDTypeInteger(value.dtype);\n    };\n    // Creates a new Tensor and maps the dataId to the passed in ID.\n    NodeJSKernelBackend.prototype.createOutputTensor = function (metadata) {\n        var newId = {};\n        this.tensorMap.set(newId, {\n            shape: metadata.shape,\n            dtype: metadata.dtype,\n            id: metadata.id,\n            values: null,\n            refCount: 1\n        });\n        var dtype;\n        switch (metadata.dtype) {\n            case this.binding.TF_FLOAT:\n                dtype = 'float32';\n                break;\n            case this.binding.TF_INT32:\n                dtype = 'int32';\n                break;\n            case this.binding.TF_INT64:\n                console.warn('INT64 output tensor will be stored as BigInt64Array.');\n                // INT64 is not supported in TFJS yet, cast it to int32.\n                dtype = 'int32';\n                break;\n            case this.binding.TF_BOOL:\n                dtype = 'bool';\n                break;\n            case this.binding.TF_COMPLEX64:\n                dtype = 'complex64';\n                break;\n            case this.binding.TF_STRING:\n                dtype = 'string';\n                break;\n            case this.binding.TF_RESOURCE:\n                // NOTE(cais): We currently represent resource-type Tensors\n                // as string of ubytes.\n                dtype = 'string';\n                break;\n            case this.binding.TF_UINT8:\n                // TensorFlow uses UINT8 as dtype for image tensor. UINT8 is not\n                // supported in TFJS yet, cast it to int32.\n                dtype = 'int32';\n                break;\n            default:\n                throw new Error(\"Unknown dtype enum \".concat(metadata.dtype));\n        }\n        // TODO(yassogba) Enable this once all the kernels are removed from backend.\n        // We can then change the return type from Tensor to TensorInfo.\n        // return {dataId: newId, shape: metadata.shape, dtype};\n        var tensorInfo = {\n            dataId: newId, shape: metadata.shape,\n            dtype: dtype\n        };\n        return tf.engine().makeTensorFromTensorInfo(tensorInfo);\n    };\n    // Prepares Tensor instances for Op execution.\n    NodeJSKernelBackend.prototype.getInputTensorIds = function (tensors) {\n        var ids = [];\n        for (var i = 0; i < tensors.length; i++) {\n            if (tensors[i] instanceof int64_tensors_1.Int64Scalar) {\n                // Then `tensors[i]` is a Int64Scalar, which we currently represent\n                // using an `Int32Array`.\n                var value = tensors[i].valueArray;\n                var id = this.binding.createTensor([], this.binding.TF_INT64, value);\n                ids.push(id);\n            }\n            else {\n                var info = this.tensorMap.get(tensors[i].dataId);\n                // TODO - what about ID in this case? Handle in write()??\n                if (info.values != null) {\n                    // Values were delayed to write into the TensorHandle. Do that before\n                    // Op execution and clear stored values.\n                    info.id =\n                        this.binding.createTensor(info.shape, info.dtype, info.values);\n                    info.values = null;\n                }\n                ids.push(info.id);\n            }\n        }\n        return ids;\n    };\n    NodeJSKernelBackend.prototype.createReductionOpAttrs = function (tensor, keepDims) {\n        if (keepDims === void 0) { keepDims = false; }\n        return [\n            { name: 'keep_dims', type: this.binding.TF_ATTR_BOOL, value: keepDims },\n            createTensorsTypeOpAttr('T', tensor.dtype),\n            createTensorsTypeOpAttr('Tidx', 'int32')\n        ];\n    };\n    NodeJSKernelBackend.prototype.floatPrecision = function () {\n        return 32;\n    };\n    NodeJSKernelBackend.prototype.epsilon = function () {\n        return _super.prototype.epsilon.call(this);\n    };\n    /**\n     * Executes an op that has a single input and output.\n     *\n     * Helper function to wrap executeSingleOutput in a particular case.\n     * @param name The name of the Op to execute.\n     * @param input The input Tensor for the Op.\n     */\n    NodeJSKernelBackend.prototype.executeSingleInput = function (name, input) {\n        var opAttrs = [createTensorsTypeOpAttr('T', input.dtype)];\n        return this.executeSingleOutput(name, opAttrs, [input]);\n    };\n    /**\n     * Executes a TensorFlow Eager Op that provides one output Tensor.\n     * @param name The name of the Op to execute.\n     * @param opAttrs The list of Op attributes required to execute.\n     * @param inputs The list of input Tensors for the Op.\n     * @return A resulting Tensor from Op execution.\n     */\n    NodeJSKernelBackend.prototype.executeSingleOutput = function (name, opAttrs, inputs) {\n        var outputMetadata = this.binding.executeOp(name, opAttrs, this.getInputTensorIds(inputs), 1);\n        return this.createOutputTensor(outputMetadata[0]);\n    };\n    /**\n     * Executes a TensorFlow Eager Op that provides multiple output Tensors.\n     * @param name The name of the Op to execute.\n     * @param opAttrs The list of Op attributes required to execute.\n     * @param inputs The list of input Tensors for the Op.\n     * @param numOutputs The number of output Tensors for Op execution.\n     * @return A resulting Tensor array from Op execution.\n     */\n    NodeJSKernelBackend.prototype.executeMultipleOutputs = function (name, opAttrs, inputs, numOutputs) {\n        var _this = this;\n        var outputMetadata = this.binding.executeOp(name, opAttrs, this.getInputTensorIds(inputs), numOutputs);\n        return outputMetadata.map(function (m) { return _this.createOutputTensor(m); });\n    };\n    NodeJSKernelBackend.prototype.numDataIds = function () {\n        return this.tensorMap.numDataIds();\n    };\n    NodeJSKernelBackend.prototype.dispose = function () { };\n    NodeJSKernelBackend.prototype.read = function (dataId) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.readSync(dataId)];\n            });\n        });\n    };\n    NodeJSKernelBackend.prototype.readSync = function (dataId) {\n        if (!this.tensorMap.has(dataId)) {\n            throw new Error(\"Tensor \".concat(dataId, \" was not registered!\"));\n        }\n        var info = this.tensorMap.get(dataId);\n        if (info.values != null) {\n            return info.values;\n        }\n        else {\n            return this.binding.tensorDataSync(info.id);\n        }\n    };\n    /**\n     * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n     * is released, false otherwise.\n     * @param dataId\n     * @oaram force Optional, remove the data regardless of refCount\n     */\n    NodeJSKernelBackend.prototype.disposeData = function (dataId, force) {\n        if (force === void 0) { force = false; }\n        // No-op if already disposed.\n        if (this.tensorMap.has(dataId)) {\n            var id = this.tensorMap.get(dataId).id;\n            this.tensorMap.get(dataId).refCount--;\n            if (!force && this.tensorMap.get(dataId).refCount > 0) {\n                return false;\n            }\n            if (id != null && id >= 0) {\n                this.binding.deleteTensor(id);\n            }\n            this.tensorMap.delete(dataId);\n        }\n        return true;\n    };\n    /** Return refCount of a `TensorData`. */\n    NodeJSKernelBackend.prototype.refCount = function (dataId) {\n        if (this.tensorMap.has(dataId)) {\n            var tensorData = this.tensorMap.get(dataId);\n            return tensorData.refCount;\n        }\n        return 0;\n    };\n    NodeJSKernelBackend.prototype.incRef = function (dataId) {\n        this.tensorMap.get(dataId).refCount++;\n    };\n    NodeJSKernelBackend.prototype.move = function (dataId, values, shape, dtype, refCount) {\n        this.tensorMap.set(dataId, { shape: shape, dtype: getTFDType(dtype), values: values, id: -1, refCount: refCount });\n    };\n    NodeJSKernelBackend.prototype.write = function (values, shape, dtype) {\n        var dataId = {};\n        this.move(dataId, values, shape, dtype, 1);\n        return dataId;\n    };\n    NodeJSKernelBackend.prototype.applyActivation = function (input, activation, preluActivationWeights, leakyreluAlpha) {\n        var result = input;\n        if (activation != null) {\n            if (activation === 'linear') {\n                // No-op\n            }\n            else if (activation === 'relu') {\n                result = tf.relu(result);\n            }\n            else if (activation === 'prelu') {\n                result = tf.prelu(result, preluActivationWeights);\n            }\n            else if (activation === 'leakyrelu') {\n                result = tf.leakyRelu(result, leakyreluAlpha);\n            }\n            else if (activation === 'elu') {\n                result = tf.elu(result);\n            }\n            else if (activation === 'relu6') {\n                result = tf.relu6(result);\n            }\n            else if (activation === 'sigmoid') {\n                result = tf.sigmoid(result);\n            }\n            else {\n                throw new Error(\"Activation: \".concat(activation, \" has not been implemented for the Node.js backend\"));\n            }\n        }\n        return result;\n    };\n    NodeJSKernelBackend.prototype.divide = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('Div', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.divNoNan = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('DivNoNan', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.where = function (condition) {\n        return this.executeSingleOutput('Where', [], [condition]);\n    };\n    NodeJSKernelBackend.prototype.topKValues = function (x, k) {\n        throw new Error('Method not implemented.');\n    };\n    NodeJSKernelBackend.prototype.topKIndices = function (x, k) {\n        throw new Error('Method not implemented.');\n    };\n    NodeJSKernelBackend.prototype.int = function (x) {\n        throw new Error('Method not implemented.');\n    };\n    NodeJSKernelBackend.prototype.decodeJpeg = function (contents, channels, ratio, fancyUpscaling, tryRecoverTruncated, acceptableFraction, dctMethod) {\n        var opAttrs = [\n            { name: 'channels', type: this.binding.TF_ATTR_INT, value: channels },\n            { name: 'ratio', type: this.binding.TF_ATTR_INT, value: ratio }, {\n                name: 'fancy_upscaling',\n                type: this.binding.TF_ATTR_BOOL,\n                value: fancyUpscaling\n            },\n            {\n                name: 'try_recover_truncated',\n                type: this.binding.TF_ATTR_BOOL,\n                value: tryRecoverTruncated\n            },\n            {\n                name: 'acceptable_fraction',\n                type: this.binding.TF_ATTR_FLOAT,\n                value: acceptableFraction\n            },\n            { name: 'dct_method', type: this.binding.TF_ATTR_STRING, value: dctMethod }\n        ];\n        var inputArgs = [(0, tfjs_1.scalar)(contents, 'string')];\n        return this.executeSingleOutput('DecodeJpeg', opAttrs, inputArgs);\n    };\n    NodeJSKernelBackend.prototype.decodePng = function (contents, channels) {\n        var opAttrs = [{ name: 'channels', type: this.binding.TF_ATTR_INT, value: channels }];\n        var inputArgs = [(0, tfjs_1.scalar)(contents, 'string')];\n        return this.executeSingleOutput('DecodePng', opAttrs, inputArgs);\n    };\n    NodeJSKernelBackend.prototype.decodeBmp = function (contents, channels) {\n        var opAttrs = [{ name: 'channels', type: this.binding.TF_ATTR_INT, value: channels }];\n        var inputArgs = [(0, tfjs_1.scalar)(contents, 'string')];\n        return this.executeSingleOutput('DecodeBmp', opAttrs, inputArgs);\n    };\n    NodeJSKernelBackend.prototype.decodeGif = function (contents) {\n        var inputArgs = [(0, tfjs_1.scalar)(contents, 'string')];\n        return this.executeSingleOutput('DecodeGif', [], inputArgs);\n    };\n    NodeJSKernelBackend.prototype.executeEncodeImageOp = function (name, opAttrs, imageData, imageShape) {\n        var inputTensorId = this.binding.createTensor(imageShape, this.binding.TF_UINT8, imageData);\n        var outputMetadata = this.binding.executeOp(name, opAttrs, [inputTensorId], 1);\n        var outputTensorInfo = outputMetadata[0];\n        // prevent the tensor data from being converted to a UTF8 string, since\n        // the encoded data is not valid UTF8\n        outputTensorInfo.dtype = this.binding.TF_UINT8;\n        return this.createOutputTensor(outputTensorInfo);\n    };\n    NodeJSKernelBackend.prototype.encodeJpeg = function (imageData, imageShape, format, quality, progressive, optimizeSize, chromaDownsampling, densityUnit, xDensity, yDensity, xmpMetadata) {\n        var opAttrs = [\n            { name: 'format', type: this.binding.TF_ATTR_STRING, value: format },\n            { name: 'quality', type: this.binding.TF_ATTR_INT, value: quality }, {\n                name: 'progressive',\n                type: this.binding.TF_ATTR_BOOL,\n                value: progressive\n            },\n            {\n                name: 'optimize_size',\n                type: this.binding.TF_ATTR_BOOL,\n                value: optimizeSize\n            },\n            {\n                name: 'chroma_downsampling',\n                type: this.binding.TF_ATTR_BOOL,\n                value: chromaDownsampling\n            },\n            {\n                name: 'density_unit',\n                type: this.binding.TF_ATTR_STRING,\n                value: densityUnit\n            },\n            { name: 'x_density', type: this.binding.TF_ATTR_INT, value: xDensity },\n            { name: 'y_density', type: this.binding.TF_ATTR_INT, value: yDensity }, {\n                name: 'xmp_metadata',\n                type: this.binding.TF_ATTR_STRING,\n                value: xmpMetadata\n            }\n        ];\n        return this.executeEncodeImageOp('EncodeJpeg', opAttrs, imageData, imageShape);\n    };\n    NodeJSKernelBackend.prototype.encodePng = function (imageData, imageShape, compression) {\n        var opAttrs = [\n            { name: 'compression', type: this.binding.TF_ATTR_INT, value: compression }\n        ];\n        return this.executeEncodeImageOp('EncodePng', opAttrs, imageData, imageShape);\n    };\n    NodeJSKernelBackend.prototype.deleteSavedModel = function (id) {\n        this.binding.deleteSavedModel(id);\n    };\n    NodeJSKernelBackend.prototype.loadSavedModelMetaGraph = function (path, tags) {\n        return this.binding.loadSavedModel(path, tags);\n    };\n    NodeJSKernelBackend.prototype.getMappedInputTensorIds = function (inputs, inputTensorInfos) {\n        var tensorIds = this.getInputTensorIds(inputs);\n        for (var i = 0; i < inputs.length; i++) {\n            if (inputTensorInfos[i] != null) {\n                if (inputTensorInfos[i].tfDtype === 'DT_UINT8') {\n                    var data = Uint8Array.from(inputs[i].dataSync());\n                    var inputTensorId = this.binding.createTensor(inputs[i].shape, this.binding.TF_UINT8, data);\n                    tensorIds[i] = inputTensorId;\n                }\n                else if (inputTensorInfos[i].tfDtype === 'DT_INT64') {\n                    var data = (0, int64_tensors_1.encodeInt32ArrayAsInt64)(inputs[i].dataSync());\n                    var inputTensorId = this.binding.createTensor(inputs[i].shape, this.binding.TF_INT64, data);\n                    tensorIds[i] = inputTensorId;\n                }\n            }\n        }\n        return tensorIds;\n    };\n    NodeJSKernelBackend.prototype.runSavedModel = function (id, inputs, inputTensorInfos, outputOpNames) {\n        var _this = this;\n        var outputMetadata = this.binding.runSavedModel(id, this.getMappedInputTensorIds(inputs, inputTensorInfos), inputTensorInfos.map(function (info) { return info.name; }).join(','), outputOpNames.join(','));\n        return outputMetadata.map(function (m) { return _this.createOutputTensor(m); });\n    };\n    // ------------------------------------------------------------\n    // TensorBoard-related (tfjs-node-specific) backend kernels.\n    NodeJSKernelBackend.prototype.summaryWriter = function (logdir) {\n        var opAttrs = [\n            {\n                name: 'shared_name',\n                type: this.binding.TF_ATTR_STRING,\n                value: \"logdir:\".concat(logdir)\n            },\n            { name: 'container', type: this.binding.TF_ATTR_STRING, value: '' }\n        ];\n        var writerResource = this.executeSingleOutput('SummaryWriter', opAttrs, []);\n        return writerResource;\n    };\n    NodeJSKernelBackend.prototype.createSummaryFileWriter = function (resourceHandle, logdir, maxQueue, flushMillis, filenameSuffix) {\n        var inputArgs = [\n            resourceHandle, (0, tfjs_1.scalar)(logdir),\n            (0, tfjs_1.scalar)(maxQueue == null ? 10 : maxQueue, 'int32'),\n            (0, tfjs_1.scalar)(flushMillis == null ? 2 * 60 * 1000 : flushMillis, 'int32'),\n            (0, tfjs_1.scalar)(filenameSuffix == null ? '.v2' : filenameSuffix)\n        ];\n        this.executeMultipleOutputs('CreateSummaryFileWriter', [], inputArgs, 0);\n    };\n    NodeJSKernelBackend.prototype.writeScalarSummary = function (resourceHandle, step, name, value) {\n        var _this = this;\n        (0, tfjs_1.tidy)(function () {\n            tfjs_1.util.assert(Number.isInteger(step), function () { return \"step is expected to be an integer, but is instead \".concat(step); });\n            var inputArgs = [resourceHandle, new int64_tensors_1.Int64Scalar(step), (0, tfjs_1.scalar)(name, 'string')];\n            var typeAttr;\n            if (typeof value === 'number') {\n                inputArgs.push((0, tfjs_1.scalar)(value));\n                typeAttr = _this.binding.TF_FLOAT;\n            }\n            else {\n                // `value` is a Scalar.\n                tfjs_1.util.assert(value.rank === 0, function () { return \"A non-scalar tensor (rank \".concat(value.rank, \") is passed to \") +\n                    \"writeScalarSummary()\"; });\n                inputArgs.push(value);\n                typeAttr = _this.typeAttributeFromTensor(value);\n            }\n            var opAttrs = [{ name: 'T', type: _this.binding.TF_ATTR_TYPE, value: typeAttr }];\n            _this.binding.executeOp('WriteScalarSummary', opAttrs, _this.getInputTensorIds(inputArgs), 0);\n        });\n    };\n    NodeJSKernelBackend.prototype.writeHistogramSummary = function (resourceHandle, step, name, data, bucketCount, description) {\n        var _this = this;\n        (0, tfjs_1.tidy)(function () {\n            tfjs_1.util.assert(Number.isInteger(step), function () { return \"step is expected to be an integer, but is instead \".concat(step); });\n            // We use the WriteSummary op, and not WriteHistogramSummary. The\n            // difference is that WriteHistogramSummary takes a tensor of any shape,\n            // and places the values in 30 buckets, while WriteSummary expects a\n            // tensor which already describes the bucket widths and counts.\n            //\n            // If we were to use WriteHistogramSummary, we wouldn't have to implement\n            // the \"bucketization\" of the input tensor, but we also wouldn't have\n            // control over the number of buckets, or the description of the graph.\n            //\n            // Therefore, we instead use WriteSummary, which makes it possible to\n            // support these features. However, the trade-off is that we have to\n            // implement our own \"bucketization\", and have to write the summary as a\n            // protobuf message.\n            var content = new messages.HistogramPluginData().setVersion(0);\n            var pluginData = new messages.SummaryMetadata.PluginData()\n                .setPluginName('histograms')\n                .setContent(content.serializeBinary());\n            var summary = new messages.SummaryMetadata()\n                .setPluginData(pluginData)\n                .setDisplayName(null)\n                .setSummaryDescription(description);\n            var summaryTensor = (0, tfjs_1.scalar)(summary.serializeBinary(), 'string');\n            var nameTensor = (0, tfjs_1.scalar)(name, 'string');\n            var stepScalar = new int64_tensors_1.Int64Scalar(step);\n            var buckets = _this.buckets(data, bucketCount);\n            tfjs_1.util.assert(buckets.rank === 2 && buckets.shape[1] === 3, function () { return \"Expected buckets to have shape [k, 3], but they had shape \".concat(buckets.shape); });\n            tfjs_1.util.assert(buckets.dtype === 'float32', function () { return \"Expected buckets to have dtype float32, but they had dtype \".concat(buckets.dtype); });\n            var inputArgs = [resourceHandle, stepScalar, buckets, nameTensor, summaryTensor];\n            var typeAttr = _this.typeAttributeFromTensor(buckets);\n            var opAttrs = [{ name: 'T', type: _this.binding.TF_ATTR_TYPE, value: typeAttr }];\n            _this.binding.executeOp('WriteSummary', opAttrs, _this.getInputTensorIds(inputArgs), 0);\n        });\n    };\n    NodeJSKernelBackend.prototype.flushSummaryWriter = function (resourceHandle) {\n        var inputArgs = [resourceHandle];\n        this.executeMultipleOutputs('FlushSummaryWriter', [], inputArgs, 0);\n    };\n    /**\n     * Group data into histogram buckets.\n     *\n     * @param data A `Tensor` of any shape. Must be castable to `float32`\n     * @param bucketCount Optional positive `number`\n     * @returns A `Tensor` of shape `[k, 3]` and type `float32`. The `i`th row is\n     *   a triple `[leftEdge, rightEdge, count]` for a single bucket. The value of\n     *   `k` is either `bucketCount`, `1` or `0`.\n     */\n    NodeJSKernelBackend.prototype.buckets = function (data, bucketCount) {\n        if (data.size === 0) {\n            return tf.tensor([], [0, 3], 'float32');\n        }\n        // 30 is the default number of buckets in the TensorFlow Python\n        // implementation. See\n        // https://github.com/tensorflow/tensorboard/blob/master/tensorboard/plugins/histogram/summary_v2.py\n        bucketCount = bucketCount !== undefined ? bucketCount : 30;\n        tfjs_1.util.assert(Number.isInteger(bucketCount) && bucketCount > 0, function () {\n            return \"Expected bucket count to be a strictly positive integer, but it was \" +\n                \"\".concat(bucketCount);\n        });\n        data = data.flatten();\n        data = data.cast('float32');\n        var min = data.min();\n        var max = data.max();\n        var range = max.sub(min);\n        var isSingular = range.equal(0).arraySync() !== 0;\n        if (isSingular) {\n            var center = min;\n            var bucketStart = center.sub(0.5);\n            var bucketEnd = center.add(0.5);\n            var bucketCounts_1 = tf.scalar(data.size, 'float32');\n            return tf.concat([bucketStart, bucketEnd, bucketCounts_1]).reshape([1, 3]);\n        }\n        var bucketWidth = range.div(bucketCount);\n        var offsets = data.sub(min);\n        var bucketIndices = offsets.floorDiv(bucketWidth).cast('int32');\n        var clampedIndices = tf.minimum(bucketIndices, bucketCount - 1).cast('int32');\n        var oneHots = tf.oneHot(clampedIndices, bucketCount);\n        var bucketCounts = oneHots.sum(0).cast('int32');\n        var edges = tf.linspace(min.arraySync(), max.arraySync(), bucketCount + 1);\n        // Ensure last value in edges is max (TF's linspace op doesn't do this)\n        edges = tf.concat([edges.slice(0, bucketCount), max.reshape([1])], 0);\n        var leftEdges = edges.slice(0, bucketCount);\n        var rightEdges = edges.slice(1, bucketCount);\n        return tf.stack([leftEdges, rightEdges, bucketCounts.cast('float32')])\n            .transpose();\n    };\n    // ~ TensorBoard-related (tfjs-node-specific) backend kernels.\n    // ------------------------------------------------------------\n    NodeJSKernelBackend.prototype.memory = function () {\n        // Due to automatic garbage collection, the numbers are unreliable.\n        // TODO(kreeger): Since there is finalization in C, count the true\n        // number of undisposed tensors.\n        return { unreliable: true };\n    };\n    NodeJSKernelBackend.prototype.time = function (f) {\n        return __awaiter(this, void 0, void 0, function () {\n            var start, elapsed;\n            return __generator(this, function (_a) {\n                start = process.hrtime();\n                f();\n                elapsed = process.hrtime(start);\n                return [2 /*return*/, { kernelMs: elapsed[0] * 1000 + elapsed[1] / 1000000 }];\n            });\n        });\n    };\n    NodeJSKernelBackend.prototype.getNumOfSavedModels = function () {\n        return this.binding.getNumOfSavedModels();\n    };\n    return NodeJSKernelBackend;\n}(tfjs_1.KernelBackend));\nexports.NodeJSKernelBackend = NodeJSKernelBackend;\n/** Returns an instance of the Node.js backend. */\nfunction nodeBackend() {\n    return tf.findBackend('tensorflow');\n}\nexports.nodeBackend = nodeBackend;\n/** Returns the TF dtype for a given DataType. */\nfunction getTFDType(dataType) {\n    var binding = nodeBackend().binding;\n    switch (dataType) {\n        case 'float32':\n            return binding.TF_FLOAT;\n        case 'int32':\n            return binding.TF_INT32;\n        case 'bool':\n            return binding.TF_BOOL;\n        case 'complex64':\n            return binding.TF_COMPLEX64;\n        case 'string':\n            return binding.TF_STRING;\n        // tslint:disable-next-line:no-any\n        case 'int64':\n            // int64 is not a generally supported dtype in TensorFlow.js\n            // (tfjs-core). However, it needs to be included here for the purpose of\n            // writing the `step` value to TensorBoard via WriteScalarSummary and\n            // other op kernels.\n            return binding.TF_INT64;\n        default:\n            var errorMessage = \"Unknown dtype: \".concat(dataType);\n            throw new Error(errorMessage);\n    }\n}\nexports.getTFDType = getTFDType;\n/**\n * Creates a TFEOpAttr for a 'type' OpDef attribute from a Tensor or list of\n * Tensors.\n */\nfunction createTensorsTypeOpAttr(attrName, tensorsOrDtype) {\n    if ((0, util_1.isNullOrUndefined)(tensorsOrDtype)) {\n        throw new Error('Invalid input tensors value.');\n    }\n    return {\n        name: attrName,\n        type: nodeBackend().binding.TF_ATTR_TYPE,\n        value: (tensorsOrDtype instanceof tf.Tensor || Array.isArray(tensorsOrDtype)) ?\n            getTFDTypeForInputs(tensorsOrDtype) :\n            getTFDType(tensorsOrDtype)\n    };\n}\nexports.createTensorsTypeOpAttr = createTensorsTypeOpAttr;\n// TODO(yassogba) remove? who uses this?\nfunction createOpAttr(attrName, tensorsOrDtype, value) {\n    if ((0, util_1.isNullOrUndefined)(tensorsOrDtype)) {\n        throw new Error('Invalid input tensors value.');\n    }\n    return { name: attrName, type: nodeBackend().binding.TF_BOOL, value: value };\n}\nexports.createOpAttr = createOpAttr;\n/** Returns the dtype number for a single or list of input Tensors. */\nfunction getTFDTypeForInputs(tensors) {\n    if ((0, util_1.isNullOrUndefined)(tensors)) {\n        throw new Error('Invalid input tensors value.');\n    }\n    if ((0, util_1.isArray)(tensors)) {\n        for (var i = 0; i < tensors.length; i++) {\n            return getTFDType(tensors[i].dtype);\n        }\n        return -1;\n    }\n    else {\n        return getTFDType(tensors.dtype);\n    }\n}\nfunction ensureTensorflowBackend() {\n    tf.util.assert(tf.getBackend() === 'tensorflow', function () { return \"Expect the current backend to be \\\"tensorflow\\\", but got \\\"\".concat(tf.getBackend(), \"\\\"\"); });\n}\nexports.ensureTensorflowBackend = ensureTensorflowBackend;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}