{"ast":null,"code":"const e = Symbol(),\n  t = Symbol(),\n  r = \"a\",\n  n = \"w\";\nlet o = (e, t) => new Proxy(e, t);\nconst s = Object.getPrototypeOf,\n  c = new WeakMap(),\n  l = e => e && (c.has(e) ? c.get(e) : s(e) === Object.prototype || s(e) === Array.prototype),\n  f = e => \"object\" == typeof e && null !== e,\n  i = new WeakMap(),\n  a = e => e[t] || e,\n  u = (c, f, p) => {\n    if (!l(c)) return c;\n    const y = a(c),\n      g = (e => Object.isFrozen(e) || Object.values(Object.getOwnPropertyDescriptors(e)).some(e => !e.writable))(y);\n    let h = p && p.get(y);\n    return h && h[1].f === g || (h = ((o, s) => {\n      const c = {\n        f: s\n      };\n      let l = !1;\n      const f = (e, t) => {\n          if (!l) {\n            let s = c[r].get(o);\n            if (s || (s = {}, c[r].set(o, s)), e === n) s[n] = !0;else {\n              let r = s[e];\n              r || (r = new Set(), s[e] = r), r.add(t);\n            }\n          }\n        },\n        i = {\n          get: (e, n) => n === t ? o : (f(\"k\", n), u(Reflect.get(e, n), c[r], c.c)),\n          has: (t, n) => n === e ? (l = !0, c[r].delete(o), !0) : (f(\"h\", n), Reflect.has(t, n)),\n          getOwnPropertyDescriptor: (e, t) => (f(\"o\", t), Reflect.getOwnPropertyDescriptor(e, t)),\n          ownKeys: e => (f(n), Reflect.ownKeys(e))\n        };\n      return s && (i.set = i.deleteProperty = () => !1), [i, c];\n    })(y, g), h[1].p = o(g ? (e => {\n      let t = i.get(e);\n      if (!t) {\n        if (Array.isArray(e)) t = Array.from(e);else {\n          const r = Object.getOwnPropertyDescriptors(e);\n          Object.values(r).forEach(e => {\n            e.configurable = !0;\n          }), t = Object.create(s(e), r);\n        }\n        i.set(e, t);\n      }\n      return t;\n    })(y) : y, h[0]), p && p.set(y, h)), h[1][r] = f, h[1].c = p, h[1].p;\n  },\n  p = (e, t, r, o) => {\n    if (Object.is(e, t)) return !1;\n    if (!f(e) || !f(t)) return !0;\n    const s = r.get(a(e));\n    if (!s) return !0;\n    if (o) {\n      const r = o.get(e);\n      if (r && r.n === t) return r.g;\n      o.set(e, {\n        n: t,\n        g: !1\n      });\n    }\n    let c = null;\n    try {\n      for (const r of s.h || []) if (c = Reflect.has(e, r) !== Reflect.has(t, r), c) return c;\n      if (!0 === s[n]) {\n        if (c = ((e, t) => {\n          const r = Reflect.ownKeys(e),\n            n = Reflect.ownKeys(t);\n          return r.length !== n.length || r.some((e, t) => e !== n[t]);\n        })(e, t), c) return c;\n      } else for (const r of s.o || []) if (c = !!Reflect.getOwnPropertyDescriptor(e, r) != !!Reflect.getOwnPropertyDescriptor(t, r), c) return c;\n      for (const n of s.k || []) if (c = p(e[n], t[n], r, o), c) return c;\n      return null === c && (c = !0), c;\n    } finally {\n      o && o.set(e, {\n        n: t,\n        g: c\n      });\n    }\n  },\n  y = t => !!l(t) && e in t,\n  g = e => l(e) && e[t] || null,\n  h = function (e) {\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;\n    c.set(e, t);\n  },\n  w = (e, t, r) => {\n    const o = [],\n      s = new WeakSet(),\n      c = (e, l) => {\n        if (s.has(e)) return;\n        f(e) && s.add(e);\n        const i = f(e) && t.get(a(e));\n        if (i) {\n          var u, p;\n          if (null == (u = i.h) || u.forEach(e => {\n            const t = `:has(${String(e)})`;\n            o.push(l ? [...l, t] : [t]);\n          }), !0 === i[n]) {\n            const e = \":ownKeys\";\n            o.push(l ? [...l, e] : [e]);\n          } else {\n            var y;\n            null == (y = i.o) || y.forEach(e => {\n              const t = `:hasOwn(${String(e)})`;\n              o.push(l ? [...l, t] : [t]);\n            });\n          }\n          null == (p = i.k) || p.forEach(t => {\n            r && !(\"value\" in (Object.getOwnPropertyDescriptor(e, t) || {})) || c(e[t], l ? [...l, t] : [t]);\n          });\n        } else l && o.push(l);\n      };\n    return c(e), o;\n  },\n  O = e => {\n    o = e;\n  };\nexport { w as affectedToPathList, u as createProxy, g as getUntracked, p as isChanged, h as markToTrack, O as replaceNewProxy, y as trackMemo };","map":{"version":3,"mappings":"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","names":["Symbol","AFFECTED_PROPERTY","ALL_OWN_KEYS_PROPERTY","newProxy","target","handler","Proxy","getProto","Object","getPrototypeOf","objectsToTrack","WeakMap","obj","has","get","prototype","Array","isObject","x","unfrozenCache","GET_ORIGINAL_SYMBOL","createProxy","affected","proxyCache","isObjectToTrack","getOriginalObject","frozen","isFrozen","values","getOwnPropertyDescriptors","some","descriptor","writable","handlerAndState","f","origObj","state","trackObject","type","key","used","set","Set","add","recordUsage","Reflect","c","TRACK_MEMO_SYMBOL","delete","getOwnPropertyDescriptor","ownKeys","deleteProperty","p","unfrozen","isArray","from","descriptors","forEach","desc","configurable","create","prevObj","nextObj","cache","is","hit","n","g","changed","h","prevKeys","length","nextKeys","k","i","o","isChanged","trackMemo","mark","affectedToPathList","onlyWithValues","list","seen","WeakSet","walk","path","_used$HAS_KEY_PROPERT","push","segment","_used$HAS_OWN_KEY_PRO","_used$KEYS_PROPERTY","replaceNewProxy","fn"],"sources":["C:\\Users\\paete\\Prototype\\nftmusicProtoCopy\\client\\node_modules\\proxy-compare\\src\\index.ts"],"sourcesContent":["// symbols\nconst TRACK_MEMO_SYMBOL = Symbol();\nconst GET_ORIGINAL_SYMBOL = Symbol();\n\n// properties\nconst AFFECTED_PROPERTY = 'a';\nconst FROZEN_PROPERTY = 'f';\nconst PROXY_PROPERTY = 'p';\nconst PROXY_CACHE_PROPERTY = 'c';\nconst NEXT_OBJECT_PROPERTY = 'n';\nconst CHANGED_PROPERTY = 'g';\nconst HAS_KEY_PROPERTY = 'h';\nconst ALL_OWN_KEYS_PROPERTY = 'w';\nconst HAS_OWN_KEY_PROPERTY = 'o';\nconst KEYS_PROPERTY = 'k';\n\n// function to create a new bare proxy\nlet newProxy = <T extends object>(\n  target: T,\n  handler: ProxyHandler<T>,\n) => new Proxy(target, handler);\n\n// get object prototype\nconst getProto = Object.getPrototypeOf;\n\nconst objectsToTrack = new WeakMap<object, boolean>();\n\n// check if obj is a plain object or an array\nconst isObjectToTrack = <T>(obj: T): obj is T extends object ? T : never => (\n  obj && (objectsToTrack.has(obj as unknown as object)\n    ? objectsToTrack.get(obj as unknown as object) as boolean\n    : (getProto(obj) === Object.prototype || getProto(obj) === Array.prototype)\n  )\n);\n\n// check if it is object\nconst isObject = (x: unknown): x is object => (\n  typeof x === 'object' && x !== null\n);\n\n// check if frozen\nconst isFrozen = (obj: object) => (\n  Object.isFrozen(obj) || (\n    // Object.isFrozen() doesn't detect non-writable properties\n    // See: https://github.com/dai-shi/proxy-compare/pull/8\n    Object.values(Object.getOwnPropertyDescriptors(obj)).some(\n      (descriptor) => !descriptor.writable,\n    )\n  )\n);\n\n// copy frozen object\nconst unfrozenCache = new WeakMap<object, object>();\nconst unfreeze = <T extends object>(obj: T): T => {\n  let unfrozen = unfrozenCache.get(obj);\n  if (!unfrozen) {\n    if (Array.isArray(obj)) {\n      // Arrays need a special way to copy\n      unfrozen = Array.from(obj);\n    } else {\n      // For non-array objects, we create a new object keeping the prototype\n      // with changing all configurable options (otherwise, proxies will complain)\n      const descriptors = Object.getOwnPropertyDescriptors(obj);\n      Object.values(descriptors).forEach((desc) => { desc.configurable = true; });\n      unfrozen = Object.create(getProto(obj), descriptors);\n    }\n    unfrozenCache.set(obj, unfrozen as object);\n  }\n  return unfrozen as T;\n};\n\ntype HasKeySet = Set<string | symbol>\ntype HasOwnKeySet = Set<string | symbol>\ntype KeysSet = Set<string | symbol>\ntype Used = {\n  [HAS_KEY_PROPERTY]?: HasKeySet;\n  [ALL_OWN_KEYS_PROPERTY]?: true;\n  [HAS_OWN_KEY_PROPERTY]?: HasOwnKeySet;\n  [KEYS_PROPERTY]?: KeysSet;\n};\ntype Affected = WeakMap<object, Used>;\ntype ProxyHandlerState<T extends object> = {\n  readonly [FROZEN_PROPERTY]: boolean;\n  [PROXY_PROPERTY]?: T;\n  [PROXY_CACHE_PROPERTY]?: ProxyCache<object> | undefined;\n  [AFFECTED_PROPERTY]?: Affected;\n}\ntype ProxyCache<T extends object> = WeakMap<\n  object,\n  readonly [ProxyHandler<T>, ProxyHandlerState<T>]\n>;\n\nconst createProxyHandler = <T extends object>(origObj: T, frozen: boolean) => {\n  const state: ProxyHandlerState<T> = {\n    [FROZEN_PROPERTY]: frozen,\n  };\n  let trackObject = false; // for trackMemo\n  const recordUsage = (\n    type:\n      | typeof HAS_KEY_PROPERTY\n      | typeof ALL_OWN_KEYS_PROPERTY\n      | typeof HAS_OWN_KEY_PROPERTY\n      | typeof KEYS_PROPERTY,\n    key?: string | symbol,\n  ) => {\n    if (!trackObject) {\n      let used = (state[AFFECTED_PROPERTY] as Affected).get(origObj);\n      if (!used) {\n        used = {};\n        (state[AFFECTED_PROPERTY] as Affected).set(origObj, used);\n      }\n      if (type === ALL_OWN_KEYS_PROPERTY) {\n        used[ALL_OWN_KEYS_PROPERTY] = true;\n      } else {\n        let set = used[type];\n        if (!set) {\n          set = new Set();\n          used[type] = set;\n        }\n        set.add(key as string | symbol);\n      }\n    }\n  };\n  const recordObjectAsUsed = () => {\n    trackObject = true;\n    (state[AFFECTED_PROPERTY] as Affected).delete(origObj);\n  };\n  const handler: ProxyHandler<T> = {\n    get(target, key) {\n      if (key === GET_ORIGINAL_SYMBOL) {\n        return origObj;\n      }\n      recordUsage(KEYS_PROPERTY, key);\n      return createProxy(\n        Reflect.get(target, key),\n        (state[AFFECTED_PROPERTY] as Affected),\n        state[PROXY_CACHE_PROPERTY],\n      );\n    },\n    has(target, key) {\n      if (key === TRACK_MEMO_SYMBOL) {\n        recordObjectAsUsed();\n        return true;\n      }\n      recordUsage(HAS_KEY_PROPERTY, key);\n      return Reflect.has(target, key);\n    },\n    getOwnPropertyDescriptor(target, key) {\n      recordUsage(HAS_OWN_KEY_PROPERTY, key);\n      return Reflect.getOwnPropertyDescriptor(target, key);\n    },\n    ownKeys(target) {\n      recordUsage(ALL_OWN_KEYS_PROPERTY);\n      return Reflect.ownKeys(target);\n    },\n  };\n  if (frozen) {\n    handler.set = handler.deleteProperty = () => false;\n  }\n  return [handler, state] as const;\n};\n\nconst getOriginalObject = <T extends object>(obj: T) => (\n  // unwrap proxy\n  (obj as { [GET_ORIGINAL_SYMBOL]?: typeof obj })[GET_ORIGINAL_SYMBOL]\n  // otherwise\n  || obj\n);\n\n/**\n * Create a proxy.\n *\n * This function will create a proxy at top level and proxy nested objects as you access them,\n * in order to keep track of which properties were accessed via get/has proxy handlers:\n *\n * NOTE: Printing of WeakMap is hard to inspect and not very readable\n * for this purpose you can use the `affectedToPathList` helper.\n *\n * @param {object} obj - Object that will be wrapped on the proxy.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that will hold the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [proxyCache] -\n * WeakMap that will help keep referential identity for proxies.\n * @returns {Proxy<object>} - Object wrapped in a proxy.\n *\n * @example\n * import { createProxy } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n * const proxy = createProxy(original, affected);\n *\n * proxy.a // Will mark as used and track its value.\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"a\"\n *\n * proxy.d // Will mark \"d\" as accessed to track and proxy itself ({ e: \"3\" }).\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"d\"\n */\nexport const createProxy = <T>(\n  obj: T,\n  affected: WeakMap<object, unknown>,\n  proxyCache?: WeakMap<object, unknown>,\n): T => {\n  if (!isObjectToTrack(obj)) return obj;\n  const target = getOriginalObject(obj);\n  const frozen = isFrozen(target);\n  let handlerAndState = (\n    proxyCache && (proxyCache as ProxyCache<typeof target>).get(target)\n  );\n  if (!handlerAndState || handlerAndState[1][FROZEN_PROPERTY] !== frozen) {\n    handlerAndState = createProxyHandler<typeof target>(target, frozen);\n    handlerAndState[1][PROXY_PROPERTY] = newProxy(\n      frozen ? unfreeze(target) : target,\n      handlerAndState[0],\n    );\n    if (proxyCache) {\n      proxyCache.set(target, handlerAndState);\n    }\n  }\n  handlerAndState[1][AFFECTED_PROPERTY] = affected as Affected;\n  handlerAndState[1][PROXY_CACHE_PROPERTY] = proxyCache as ProxyCache<object> | undefined;\n  return handlerAndState[1][PROXY_PROPERTY] as typeof target;\n};\n\nconst isAllOwnKeysChanged = (prevObj: object, nextObj: object) => {\n  const prevKeys = Reflect.ownKeys(prevObj);\n  const nextKeys = Reflect.ownKeys(nextObj);\n  return prevKeys.length !== nextKeys.length\n    || prevKeys.some((k, i) => k !== nextKeys[i]);\n};\n\ntype ChangedCache = WeakMap<object, {\n  [NEXT_OBJECT_PROPERTY]: object;\n  [CHANGED_PROPERTY]: boolean;\n}>;\n\n/**\n * Compare changes on objects.\n *\n * This will compare the affected properties on tracked objects inside the proxy\n * to check if there were any changes made to it,\n * by default if no property was accessed on the proxy it will attempt to do a\n * reference equality check for the objects provided (Object.is(a, b)). If you access a property\n * on the proxy, then isChanged will only compare the affected properties.\n *\n * @param {object} prevObj - The previous object to compare.\n * @param {object} nextObj - Object to compare with the previous one.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that holds the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [cache] -\n * WeakMap that holds a cache of the comparisons for better performance with repetitive comparisons,\n * and to avoid infinite loop with circular structures.\n * @returns {boolean} - Boolean indicating if the affected property on the object has changed.\n *\n * @example\n * import { createProxy, isChanged } from 'proxy-compare';\n *\n * const obj = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(obj, affected);\n *\n * proxy.a\n *\n * isChanged(obj, { a: \"1\" }, affected) // false\n *\n * proxy.a = \"2\"\n *\n * isChanged(obj, { a: \"1\" }, affected) // true\n */\n\nexport const isChanged = (\n  prevObj: unknown,\n  nextObj: unknown,\n  affected: WeakMap<object, unknown>,\n  cache?: WeakMap<object, unknown>,\n): boolean => {\n  if (Object.is(prevObj, nextObj)) {\n    return false;\n  }\n  if (!isObject(prevObj) || !isObject(nextObj)) return true;\n  const used = (affected as Affected).get(getOriginalObject(prevObj));\n  if (!used) return true;\n  if (cache) {\n    const hit = (cache as ChangedCache).get(prevObj);\n    if (hit && hit[NEXT_OBJECT_PROPERTY] === nextObj) {\n      return hit[CHANGED_PROPERTY];\n    }\n    // for object with cycles\n    (cache as ChangedCache).set(prevObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: false,\n    });\n  }\n  let changed: boolean | null = null;\n  try {\n    for (const key of used[HAS_KEY_PROPERTY] || []) {\n      changed = Reflect.has(prevObj, key) !== Reflect.has(nextObj, key);\n      if (changed) return changed;\n    }\n    if (used[ALL_OWN_KEYS_PROPERTY] === true) {\n      changed = isAllOwnKeysChanged(prevObj, nextObj);\n      if (changed) return changed;\n    } else {\n      for (const key of used[HAS_OWN_KEY_PROPERTY] || []) {\n        const hasPrev = !!Reflect.getOwnPropertyDescriptor(prevObj, key);\n        const hasNext = !!Reflect.getOwnPropertyDescriptor(nextObj, key);\n        changed = hasPrev !== hasNext;\n        if (changed) return changed;\n      }\n    }\n    for (const key of used[KEYS_PROPERTY] || []) {\n      changed = isChanged(\n        (prevObj as any)[key],\n        (nextObj as any)[key],\n        affected,\n        cache,\n      );\n      if (changed) return changed;\n    }\n    if (changed === null) changed = true;\n    return changed;\n  } finally {\n    if (cache) {\n      cache.set(prevObj, {\n        [NEXT_OBJECT_PROPERTY]: nextObj,\n        [CHANGED_PROPERTY]: changed,\n      });\n    }\n  }\n};\n\n// explicitly track object with memo\nexport const trackMemo = (obj: unknown) => {\n  if (isObjectToTrack(obj)) {\n    return TRACK_MEMO_SYMBOL in obj;\n  }\n  return false;\n};\n\n/**\n * Unwrap proxy to get the original object.\n *\n * Used to retrieve the original object used to create the proxy instance with `createProxy`.\n *\n * @param {Proxy<object>} obj -  The proxy wrapper of the originial object.\n * @returns {object | null} - Return either the unwrapped object if exists.\n *\n * @example\n * import { createProxy, getUntracked } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n * const originalFromProxy = getUntracked(proxy)\n *\n * Object.is(original, originalFromProxy) // true\n * isChanged(original, originalFromProxy, affected) // false\n */\nexport const getUntracked = <T>(obj: T): T | null => {\n  if (isObjectToTrack(obj)) {\n    return (obj as { [GET_ORIGINAL_SYMBOL]?: T })[GET_ORIGINAL_SYMBOL] || null;\n  }\n  return null;\n};\n\n/**\n * Mark object to be tracked.\n *\n * This function marks an object that will be passed into `createProxy`\n * as marked to track or not. By default only Array and Object are marked to track,\n * so this is useful for example to mark a class instance to track or to mark a object\n * to be untracked when creating your proxy.\n *\n * @param obj - Object to mark as tracked or not.\n * @param mark - Boolean indicating whether you want to track this object or not.\n * @returns - No return.\n *\n * @example\n * import { createProxy, markToTrack, isChanged } from 'proxy-compare';\n *\n * const nested = { e: \"3\" }\n *\n * markToTrack(nested, false)\n *\n * const original = { a: \"1\", c: \"2\", d: nested };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n *\n * proxy.d.e\n *\n * isChanged(original, { d: { e: \"3\" } }, affected) // true\n */\nexport const markToTrack = (obj: object, mark = true) => {\n  objectsToTrack.set(obj, mark);\n};\n\n/**\n * Convert `affected` to path list\n *\n * `affected` is a weak map which is not printable.\n * This function is can convert it to printable path list.\n * It's for debugging purpose.\n *\n * @param obj - An object that is used with `createProxy`.\n * @param affected - A weak map that is used with `createProxy`.\n * @param onlyWithValues - An optional boolean to exclude object getters.\n * @returns - An array of paths.\n */\nexport const affectedToPathList = (\n  obj: unknown,\n  affected: WeakMap<object, unknown>,\n  onlyWithValues?: boolean,\n) => {\n  const list: (string | symbol)[][] = [];\n  const seen = new WeakSet();\n  const walk = (x: unknown, path?: (string | symbol)[]) => {\n    if (seen.has(x as object)) {\n      // for object with cycles\n      return;\n    }\n    if (isObject(x)) {\n      seen.add(x);\n    }\n    const used = isObject(x) && (affected as Affected).get(getOriginalObject(x));\n    if (used) {\n      used[HAS_KEY_PROPERTY]?.forEach((key) => {\n        const segment = `:has(${String(key)})`;\n        list.push(path ? [...path, segment] : [segment]);\n      });\n      if (used[ALL_OWN_KEYS_PROPERTY] === true) {\n        const segment = ':ownKeys';\n        list.push(path ? [...path, segment] : [segment]);\n      } else {\n        used[HAS_OWN_KEY_PROPERTY]?.forEach((key) => {\n          const segment = `:hasOwn(${String(key)})`;\n          list.push(path ? [...path, segment] : [segment]);\n        });\n      }\n      used[KEYS_PROPERTY]?.forEach((key) => {\n        if (!onlyWithValues || 'value' in (Object.getOwnPropertyDescriptor(x, key) || {})) {\n          walk((x as any)[key], path ? [...path, key] : [key]);\n        }\n      });\n    } else if (path) {\n      list.push(path);\n    }\n  };\n  walk(obj);\n  return list;\n};\n\n/**\n * replace newProxy function.\n *\n * This can be used if you want to use proxy-polyfill.\n * Note that proxy-polyfill can't polyfill everything.\n * Use it at your own risk.\n */\nexport const replaceNewProxy = (fn: typeof newProxy) => {\n  newProxy = fn;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}