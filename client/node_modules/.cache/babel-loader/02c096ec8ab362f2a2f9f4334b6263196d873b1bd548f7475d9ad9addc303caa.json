{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _slicedToArray = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _awaitAsyncGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\nvar _wrapAsyncGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\nvar _asyncIterator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\nvar _require = require('multiformats/cid'),\n  CID = _require.CID;\nvar toCamel = require('./lib/object-to-camel');\nvar configure = require('./lib/configure');\nvar multipartRequest = require('./lib/multipart-request');\nvar toUrlSearchParams = require('./lib/to-url-search-params');\nvar abortSignal = require('./lib/abort-signal');\nvar _require2 = require('native-abort-controller'),\n  AbortController = _require2.AbortController;\n\n/**\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n * @typedef {import('ipfs-core-types/src/root').AddResult} AddResult\n */\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {RootAPI[\"addAll\"]}\n   */\n  function addAll(_x) {\n    return _addAll.apply(this, arguments);\n  }\n  function _addAll() {\n    _addAll = _wrapAsyncGenerator(function (source) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var controller, signal, _yield$_awaitAsyncGen, headers, body, total, parts, _ref, _ref2, progressFn, onUploadProgress, res, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, file;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // allow aborting requests on body errors\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.next = 4;\n              return _awaitAsyncGenerator(multipartRequest(source, controller, options.headers));\n            case 4:\n              _yield$_awaitAsyncGen = _context.sent;\n              headers = _yield$_awaitAsyncGen.headers;\n              body = _yield$_awaitAsyncGen.body;\n              total = _yield$_awaitAsyncGen.total;\n              parts = _yield$_awaitAsyncGen.parts;\n              // In browser response body only starts streaming once upload is\n              // complete, at which point all the progress updates are invalid. If\n              // length of the content is computable we can interpret progress from\n              // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n              // in which case we disable progress updates to be written out.\n              _ref = typeof options.progress === 'function'\n              // @ts-ignore tsc picks up the node codepath\n              ? createProgressHandler(total, parts, options.progress) : [undefined, undefined], _ref2 = _slicedToArray(_ref, 2), progressFn = _ref2[0], onUploadProgress = _ref2[1];\n              _context.next = 12;\n              return _awaitAsyncGenerator(api.post('add', {\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({\n                  'stream-channels': true\n                }, options), {}, {\n                  progress: Boolean(progressFn)\n                })),\n                onUploadProgress: onUploadProgress,\n                signal: signal,\n                headers: headers,\n                body: body\n              }));\n            case 12:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 15;\n              _iterator = _asyncIterator(res.ndjson());\n            case 17:\n              _context.next = 19;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 19:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 31;\n                break;\n              }\n              file = _step.value;\n              file = toCamel(file);\n              if (!(file.hash !== undefined)) {\n                _context.next = 27;\n                break;\n              }\n              _context.next = 25;\n              return toCoreInterface(file);\n            case 25:\n              _context.next = 28;\n              break;\n            case 27:\n              if (progressFn) {\n                progressFn(file.bytes || 0, file.name);\n              }\n            case 28:\n              _iteratorAbruptCompletion = false;\n              _context.next = 17;\n              break;\n            case 31:\n              _context.next = 37;\n              break;\n            case 33:\n              _context.prev = 33;\n              _context.t0 = _context[\"catch\"](15);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n            case 37:\n              _context.prev = 37;\n              _context.prev = 38;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 42;\n                break;\n              }\n              _context.next = 42;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 42:\n              _context.prev = 42;\n              if (!_didIteratorError) {\n                _context.next = 45;\n                break;\n              }\n              throw _iteratorError;\n            case 45:\n              return _context.finish(42);\n            case 46:\n              return _context.finish(37);\n            case 47:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[15, 33, 37, 47], [38,, 42, 46]]);\n      })();\n    });\n    return _addAll.apply(this, arguments);\n  }\n  return addAll;\n});\n\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\n */\nvar createProgressHandler = function createProgressHandler(total, parts, progress) {\n  return parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined];\n};\n\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {IPFSUtilsHttpUploadProgressFn}\n */\nvar createOnUploadProgress = function createOnUploadProgress(size, parts, progress) {\n  var index = 0;\n  var count = parts.length;\n  return function (_ref3) {\n    var loaded = _ref3.loaded,\n      total = _ref3.total;\n    // Derive position from the current progress.\n    var position = Math.floor(loaded / total * size);\n    while (index < count) {\n      var _parts$index = parts[index],\n        start = _parts$index.start,\n        end = _parts$index.end,\n        name = _parts$index.name;\n      // If within current part range report progress and break the loop\n      if (position < end) {\n        progress(position - start, name);\n        break;\n        // If passed current part range report final byte for the chunk and\n        // move to next one.\n      } else {\n        progress(end - start, name);\n        index += 1;\n      }\n    }\n  };\n};\n\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\nfunction toCoreInterface(_ref4) {\n  var name = _ref4.name,\n    hash = _ref4.hash,\n    size = _ref4.size,\n    mode = _ref4.mode,\n    mtime = _ref4.mtime,\n    mtimeNsecs = _ref4.mtimeNsecs;\n  /** @type {AddResult} */\n  var output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  };\n  if (mode != null) {\n    output.mode = parseInt(mode, 8);\n  }\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    };\n  }\n  return output;\n}","map":{"version":3,"names":["require","CID","toCamel","configure","multipartRequest","toUrlSearchParams","abortSignal","AbortController","module","exports","api","addAll","source","options","controller","signal","headers","body","total","parts","progress","createProgressHandler","undefined","progressFn","onUploadProgress","post","searchParams","Boolean","res","ndjson","file","hash","toCoreInterface","bytes","name","createOnUploadProgress","size","index","count","length","loaded","position","Math","floor","start","end","mode","mtime","mtimeNsecs","output","path","cid","parse","parseInt","secs","nsecs"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/ipfs-http-client/src/add-all.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst toCamel = require('./lib/object-to-camel')\nconst configure = require('./lib/configure')\nconst multipartRequest = require('./lib/multipart-request')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\nconst abortSignal = require('./lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n * @typedef {import('ipfs-core-types/src/root').AddResult} AddResult\n */\n\nmodule.exports = configure((api) => {\n  /**\n   * @type {RootAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body, total, parts } =\n      await multipartRequest(source, controller, options.headers)\n\n    // In browser response body only starts streaming once upload is\n    // complete, at which point all the progress updates are invalid. If\n    // length of the content is computable we can interpret progress from\n    // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n    // in which case we disable progress updates to be written out.\n    const [progressFn, onUploadProgress] = typeof options.progress === 'function'\n      // @ts-ignore tsc picks up the node codepath\n      ? createProgressHandler(total, parts, options.progress)\n      : [undefined, undefined]\n\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      onUploadProgress,\n      signal,\n      headers,\n      body\n    })\n\n    for await (let file of res.ndjson()) {\n      file = toCamel(file)\n\n      if (file.hash !== undefined) {\n        yield toCoreInterface(file)\n      } else if (progressFn) {\n        progressFn(file.bytes || 0, file.name)\n      }\n    }\n  }\n  return addAll\n})\n\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\n */\nconst createProgressHandler = (total, parts, progress) =>\n  parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined]\n\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {IPFSUtilsHttpUploadProgressFn}\n */\nconst createOnUploadProgress = (size, parts, progress) => {\n  let index = 0\n  const count = parts.length\n  return ({ loaded, total }) => {\n    // Derive position from the current progress.\n    const position = Math.floor(loaded / total * size)\n    while (index < count) {\n      const { start, end, name } = parts[index]\n      // If within current part range report progress and break the loop\n      if (position < end) {\n        progress(position - start, name)\n        break\n      // If passed current part range report final byte for the chunk and\n      // move to next one.\n      } else {\n        progress(end - start, name)\n        index += 1\n      }\n    }\n  }\n}\n\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\nfunction toCoreInterface ({ name, hash, size, mode, mtime, mtimeNsecs }) {\n  /** @type {AddResult} */\n  const output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  }\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8)\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    }\n  }\n\n  return output\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}