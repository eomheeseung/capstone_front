{"ast":null,"code":"'use strict';\n\nconst {\n  Multiaddr\n} = require('multiaddr');\nconst toCamel = require('../lib/object-to-camel');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"query\"]}\n   */\n  function query(peerId) {\n    try {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return async function* () {\n        const res = await api.post('dht/query', {\n          signal: options.signal,\n          searchParams: toUrlSearchParams({\n            arg: peerId.toString(),\n            ...options\n          }),\n          headers: options.headers\n        });\n        for await (let message of res.ndjson()) {\n          message = toCamel(message);\n          message.responses = (message.responses || []).map(( /** @type {{ ID: string, Addrs: string[] }} */_ref) => {\n            let {\n              ID,\n              Addrs\n            } = _ref;\n            return {\n              id: ID,\n              addrs: (Addrs || []).map(( /** @type {string} **/a) => new Multiaddr(a))\n            };\n          });\n          yield message;\n        }\n      }();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  return query;\n});","map":{"version":3,"names":["Multiaddr","require","toCamel","configure","toUrlSearchParams","module","exports","api","query","peerId","options","res","post","signal","searchParams","arg","toString","headers","message","ndjson","responses","map","ID","Addrs","id","addrs","a"],"sources":["C:/Users/paete/CapstonPro/nftmusicProtoCopy/client/node_modules/ipfs-http-client/src/dht/query.js"],"sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"query\"]}\n   */\n  async function * query (peerId, options = {}) {\n    const res = await api.post('dht/query', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      message.responses = (message.responses || []).map((/** @type {{ ID: string, Addrs: string[] }} */ { ID, Addrs }) => ({\n        id: ID,\n        addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n      }))\n      yield message\n    }\n  }\n\n  return query\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AAC1C,MAAMC,OAAO,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AACjD,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAGH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,SAAiBC,KAAK,CAAEC,MAAM;IAAA;MAAA,IAAEC,OAAO,uEAAG,CAAC,CAAC;MAAA,0BAAE;QAC5C,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,WAAW,EAAE;UACtCC,MAAM,EAAEH,OAAO,CAACG,MAAM;UACtBC,YAAY,EAAEV,iBAAiB,CAAC;YAC9BW,GAAG,EAAEN,MAAM,CAACO,QAAQ,EAAE;YACtB,GAAGN;UACL,CAAC,CAAC;UACFO,OAAO,EAAEP,OAAO,CAACO;QACnB,CAAC,CAAC;QAEF,WAAW,IAAIC,OAAO,IAAIP,GAAG,CAACQ,MAAM,EAAE,EAAE;UACtCD,OAAO,GAAGhB,OAAO,CAACgB,OAAO,CAAC;UAC1BA,OAAO,CAACE,SAAS,GAAG,CAACF,OAAO,CAACE,SAAS,IAAI,EAAE,EAAEC,GAAG,CAAC,EAAC;YAAA,IAA+C;cAAEC,EAAE;cAAEC;YAAM,CAAC;YAAA,OAAM;cACnHC,EAAE,EAAEF,EAAE;cACNG,KAAK,EAAE,CAACF,KAAK,IAAI,EAAE,EAAEF,GAAG,CAAC,EAAC,sBAAuBK,CAAC,KAAK,IAAI1B,SAAS,CAAC0B,CAAC,CAAC;YACzE,CAAC;UAAA,CAAC,CAAC;UACH,MAAMR,OAAO;QACf;MACF,CAAC;IAAA;MAAA;IAAA;EAAA;EAED,OAAOV,KAAK;AACd,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}