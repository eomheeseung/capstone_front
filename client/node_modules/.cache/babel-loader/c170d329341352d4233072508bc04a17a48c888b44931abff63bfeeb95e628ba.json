{"ast":null,"code":"import oe from \"pino\";\nimport { RELAYER_DEFAULT_PROTOCOL as ae, RELAYER_EVENTS as B, EXPIRER_EVENTS as ce, Store as j, Core as pe } from \"@walletconnect/core\";\nimport { getDefaultLoggerOptions as le, generateChildLogger as he, getLoggerContext as de } from \"@walletconnect/logger\";\nimport { IEngine as ge, ISignClient as me } from \"@walletconnect/types\";\nimport { TYPE_1 as we, createDelayedPromise as f, engineEvent as l, getInternalError as c, calcExpiry as R, isValidObject as k, getRequiredNamespacesFromNamespaces as ue, getSdkError as N, isSessionCompatible as ye, isExpired as P, isValidParams as S, isUndefined as D, isValidRelays as Se, isValidRequiredNamespaces as Ee, isValidNamespaces as z, isConformingNamespaces as Y, isValidString as b, isValidErrorReason as Ie, isValidRelay as _e, isValidController as Re, isValidNamespacesChainId as Q, isValidRequest as Ne, isValidNamespacesRequest as qe, isValidRequestExpiry as ve, isValidResponse as fe, isValidEvent as Pe, isValidNamespacesEvent as Oe, parseExpirerTarget as Ve, isValidId as Te, getAppMetadata as xe } from \"@walletconnect/utils\";\nimport De, { EventEmitter as be } from \"events\";\nimport { THIRTY_DAYS as Ae, SEVEN_DAYS as W, FIVE_MINUTES as E, ONE_DAY as O, THIRTY_SECONDS as Z } from \"@walletconnect/time\";\nimport { isJsonRpcResult as q, isJsonRpcError as v, formatJsonRpcRequest as Le, formatJsonRpcResult as Ce, formatJsonRpcError as Ge, isJsonRpcRequest as $e, isJsonRpcResponse as Me } from \"@walletconnect/jsonrpc-utils\";\nconst X = \"wc\",\n  J = 2,\n  H = \"client\",\n  C = `${X}@${J}:${H}:`,\n  G = {\n    name: H,\n    logger: \"error\",\n    controller: !1,\n    relayUrl: \"wss://relay.walletconnect.com\"\n  },\n  Ue = {\n    session_proposal: \"session_proposal\",\n    session_update: \"session_update\",\n    session_extend: \"session_extend\",\n    session_ping: \"session_ping\",\n    session_delete: \"session_delete\",\n    session_expire: \"session_expire\",\n    session_request: \"session_request\",\n    session_request_sent: \"session_request_sent\",\n    session_event: \"session_event\",\n    proposal_expire: \"proposal_expire\"\n  },\n  Ke = {\n    database: \":memory:\"\n  },\n  je = {\n    created: \"history_created\",\n    updated: \"history_updated\",\n    deleted: \"history_deleted\",\n    sync: \"history_sync\"\n  },\n  ke = \"history\",\n  ze = \"0.3\",\n  ee = \"proposal\",\n  Ye = Ae,\n  se = \"session\",\n  A = W,\n  te = \"engine\",\n  V = {\n    wc_sessionPropose: {\n      req: {\n        ttl: E,\n        prompt: !0,\n        tag: 1100\n      },\n      res: {\n        ttl: E,\n        prompt: !1,\n        tag: 1101\n      }\n    },\n    wc_sessionSettle: {\n      req: {\n        ttl: E,\n        prompt: !1,\n        tag: 1102\n      },\n      res: {\n        ttl: E,\n        prompt: !1,\n        tag: 1103\n      }\n    },\n    wc_sessionUpdate: {\n      req: {\n        ttl: O,\n        prompt: !1,\n        tag: 1104\n      },\n      res: {\n        ttl: O,\n        prompt: !1,\n        tag: 1105\n      }\n    },\n    wc_sessionExtend: {\n      req: {\n        ttl: O,\n        prompt: !1,\n        tag: 1106\n      },\n      res: {\n        ttl: O,\n        prompt: !1,\n        tag: 1107\n      }\n    },\n    wc_sessionRequest: {\n      req: {\n        ttl: E,\n        prompt: !0,\n        tag: 1108\n      },\n      res: {\n        ttl: E,\n        prompt: !1,\n        tag: 1109\n      }\n    },\n    wc_sessionEvent: {\n      req: {\n        ttl: E,\n        prompt: !0,\n        tag: 1110\n      },\n      res: {\n        ttl: E,\n        prompt: !1,\n        tag: 1111\n      }\n    },\n    wc_sessionDelete: {\n      req: {\n        ttl: O,\n        prompt: !1,\n        tag: 1112\n      },\n      res: {\n        ttl: O,\n        prompt: !1,\n        tag: 1113\n      }\n    },\n    wc_sessionPing: {\n      req: {\n        ttl: Z,\n        prompt: !1,\n        tag: 1114\n      },\n      res: {\n        ttl: Z,\n        prompt: !1,\n        tag: 1115\n      }\n    }\n  },\n  $ = {\n    min: E,\n    max: W\n  },\n  ie = \"request\";\nvar Xe = Object.defineProperty,\n  Je = Object.defineProperties,\n  He = Object.getOwnPropertyDescriptors,\n  ne = Object.getOwnPropertySymbols,\n  Fe = Object.prototype.hasOwnProperty,\n  Be = Object.prototype.propertyIsEnumerable,\n  re = (g, n, e) => n in g ? Xe(g, n, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: e\n  }) : g[n] = e,\n  y = (g, n) => {\n    for (var e in n || (n = {})) Fe.call(n, e) && re(g, e, n[e]);\n    if (ne) for (var e of ne(n)) Be.call(n, e) && re(g, e, n[e]);\n    return g;\n  },\n  F = (g, n) => Je(g, He(n));\nclass Qe extends ge {\n  constructor(n) {\n    var _this;\n    (super(n), _this = this), this.name = te, this.events = new De(), this.initialized = !1, this.ignoredPayloadTypes = [we], this.init = async () => {\n      this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.client.core.pairing.register({\n        methods: Object.keys(V)\n      }), this.initialized = !0);\n    }, this.connect = async e => {\n      this.isInitialized();\n      const s = F(y({}, e), {\n        requiredNamespaces: e.requiredNamespaces || {},\n        optionalNamespaces: e.optionalNamespaces || {}\n      });\n      await this.isValidConnect(s);\n      const {\n        pairingTopic: t,\n        requiredNamespaces: i,\n        optionalNamespaces: r,\n        sessionProperties: o,\n        relays: a\n      } = s;\n      let p = t,\n        h,\n        w = !1;\n      if (p && (w = this.client.core.pairing.pairings.get(p).active), !p || !w) {\n        const {\n          topic: _,\n          uri: m\n        } = await this.client.core.pairing.create();\n        p = _, h = m;\n      }\n      const d = await this.client.core.crypto.generateKeyPair(),\n        u = y({\n          requiredNamespaces: i,\n          optionalNamespaces: r,\n          relays: a ?? [{\n            protocol: ae\n          }],\n          proposer: {\n            publicKey: d,\n            metadata: this.client.metadata\n          }\n        }, o && {\n          sessionProperties: o\n        }),\n        {\n          reject: I,\n          resolve: T,\n          done: U\n        } = f();\n      if (this.events.once(l(\"session_connect\"), async _ref => {\n        let {\n          error: _,\n          session: m\n        } = _ref;\n        if (_) I(_);else if (m) {\n          m.self.publicKey = d;\n          const x = F(y({}, m), {\n            requiredNamespaces: m.requiredNamespaces,\n            optionalNamespaces: m.optionalNamespaces\n          });\n          await this.client.session.set(m.topic, x), await this.setExpiry(m.topic, m.expiry), p && (await this.client.core.pairing.updateMetadata({\n            topic: p,\n            metadata: m.peer.metadata\n          })), T(x);\n        }\n      }), !p) {\n        const {\n          message: _\n        } = c(\"NO_MATCHING_KEY\", `connect() pairing topic: ${p}`);\n        throw new Error(_);\n      }\n      const L = await this.sendRequest(p, \"wc_sessionPropose\", u),\n        K = R(E);\n      return await this.setProposal(L, y({\n        id: L,\n        expiry: K\n      }, u)), {\n        uri: h,\n        approval: U\n      };\n    }, this.pair = async e => (this.isInitialized(), await this.client.core.pairing.pair(e)), this.approve = async e => {\n      this.isInitialized(), await this.isValidApprove(e);\n      const {\n          id: s,\n          relayProtocol: t,\n          namespaces: i,\n          sessionProperties: r\n        } = e,\n        o = this.client.proposal.get(s);\n      let {\n        pairingTopic: a,\n        proposer: p,\n        requiredNamespaces: h,\n        optionalNamespaces: w\n      } = o;\n      k(h) || (h = ue(i, \"approve()\"));\n      const d = await this.client.core.crypto.generateKeyPair(),\n        u = p.publicKey,\n        I = await this.client.core.crypto.generateSharedKey(d, u);\n      a && s && (await this.client.core.pairing.updateMetadata({\n        topic: a,\n        metadata: p.metadata\n      }), await this.sendResult(s, a, {\n        relay: {\n          protocol: t ?? \"irn\"\n        },\n        responderPublicKey: d\n      }), await this.client.proposal.delete(s, N(\"USER_DISCONNECTED\")), await this.client.core.pairing.activate({\n        topic: a\n      }));\n      const T = y({\n        relay: {\n          protocol: t ?? \"irn\"\n        },\n        namespaces: i,\n        requiredNamespaces: h,\n        optionalNamespaces: w,\n        controller: {\n          publicKey: d,\n          metadata: this.client.metadata\n        },\n        expiry: R(A)\n      }, r && {\n        sessionProperties: r\n      });\n      await this.client.core.relayer.subscribe(I);\n      const U = await this.sendRequest(I, \"wc_sessionSettle\", T),\n        {\n          done: L,\n          resolve: K,\n          reject: _\n        } = f();\n      this.events.once(l(\"session_approve\", U), _ref2 => {\n        let {\n          error: x\n        } = _ref2;\n        x ? _(x) : K(this.client.session.get(I));\n      });\n      const m = F(y({}, T), {\n        topic: I,\n        acknowledged: !1,\n        self: T.controller,\n        peer: {\n          publicKey: p.publicKey,\n          metadata: p.metadata\n        },\n        controller: d\n      });\n      return await this.client.session.set(I, m), await this.setExpiry(I, R(A)), {\n        topic: I,\n        acknowledged: L\n      };\n    }, this.reject = async e => {\n      this.isInitialized(), await this.isValidReject(e);\n      const {\n          id: s,\n          reason: t\n        } = e,\n        {\n          pairingTopic: i\n        } = this.client.proposal.get(s);\n      i && (await this.sendError(s, i, t), await this.client.proposal.delete(s, N(\"USER_DISCONNECTED\")));\n    }, this.update = async e => {\n      this.isInitialized(), await this.isValidUpdate(e);\n      const {\n          topic: s,\n          namespaces: t\n        } = e,\n        i = await this.sendRequest(s, \"wc_sessionUpdate\", {\n          namespaces: t\n        }),\n        {\n          done: r,\n          resolve: o,\n          reject: a\n        } = f();\n      return this.events.once(l(\"session_update\", i), _ref3 => {\n        let {\n          error: p\n        } = _ref3;\n        p ? a(p) : o();\n      }), await this.client.session.update(s, {\n        namespaces: t\n      }), {\n        acknowledged: r\n      };\n    }, this.extend = async e => {\n      this.isInitialized(), await this.isValidExtend(e);\n      const {\n          topic: s\n        } = e,\n        t = await this.sendRequest(s, \"wc_sessionExtend\", {}),\n        {\n          done: i,\n          resolve: r,\n          reject: o\n        } = f();\n      return this.events.once(l(\"session_extend\", t), _ref4 => {\n        let {\n          error: a\n        } = _ref4;\n        a ? o(a) : r();\n      }), await this.setExpiry(s, R(A)), {\n        acknowledged: i\n      };\n    }, this.request = async e => {\n      this.isInitialized(), await this.isValidRequest(e);\n      const {\n          chainId: s,\n          request: t,\n          topic: i,\n          expiry: r\n        } = e,\n        o = await this.sendRequest(i, \"wc_sessionRequest\", {\n          request: t,\n          chainId: s\n        }, r),\n        {\n          done: a,\n          resolve: p,\n          reject: h\n        } = f(r);\n      return this.events.once(l(\"session_request\", o), _ref5 => {\n        let {\n          error: w,\n          result: d\n        } = _ref5;\n        w ? h(w) : p(d);\n      }), this.client.events.emit(\"session_request_sent\", {\n        topic: i,\n        request: t,\n        chainId: s\n      }), await a();\n    }, this.respond = async e => {\n      this.isInitialized(), await this.isValidRespond(e);\n      const {\n          topic: s,\n          response: t\n        } = e,\n        {\n          id: i\n        } = t;\n      q(t) ? await this.sendResult(i, s, t.result) : v(t) && (await this.sendError(i, s, t.error)), this.deletePendingSessionRequest(e.response.id, {\n        message: \"fulfilled\",\n        code: 0\n      });\n    }, this.ping = async e => {\n      this.isInitialized(), await this.isValidPing(e);\n      const {\n        topic: s\n      } = e;\n      if (this.client.session.keys.includes(s)) {\n        const t = await this.sendRequest(s, \"wc_sessionPing\", {}),\n          {\n            done: i,\n            resolve: r,\n            reject: o\n          } = f();\n        this.events.once(l(\"session_ping\", t), _ref6 => {\n          let {\n            error: a\n          } = _ref6;\n          a ? o(a) : r();\n        }), await i();\n      } else this.client.core.pairing.pairings.keys.includes(s) && (await this.client.core.pairing.ping({\n        topic: s\n      }));\n    }, this.emit = async e => {\n      this.isInitialized(), await this.isValidEmit(e);\n      const {\n        topic: s,\n        event: t,\n        chainId: i\n      } = e;\n      await this.sendRequest(s, \"wc_sessionEvent\", {\n        event: t,\n        chainId: i\n      });\n    }, this.disconnect = async e => {\n      this.isInitialized(), await this.isValidDisconnect(e);\n      const {\n        topic: s\n      } = e;\n      this.client.session.keys.includes(s) ? (await this.sendRequest(s, \"wc_sessionDelete\", N(\"USER_DISCONNECTED\")), await this.deleteSession(s)) : await this.client.core.pairing.disconnect({\n        topic: s\n      });\n    }, this.find = e => (this.isInitialized(), this.client.session.getAll().filter(s => ye(s, e))), this.getPendingSessionRequests = () => (this.isInitialized(), this.client.pendingRequest.getAll()), this.deleteSession = async (e, s) => {\n      const {\n        self: t\n      } = this.client.session.get(e);\n      await this.client.core.relayer.unsubscribe(e), await Promise.all([this.client.session.delete(e, N(\"USER_DISCONNECTED\")), this.client.core.crypto.deleteKeyPair(t.publicKey), this.client.core.crypto.deleteSymKey(e), s ? Promise.resolve() : this.client.core.expirer.del(e)]);\n    }, this.deleteProposal = async (e, s) => {\n      await Promise.all([this.client.proposal.delete(e, N(\"USER_DISCONNECTED\")), s ? Promise.resolve() : this.client.core.expirer.del(e)]);\n    }, this.deletePendingSessionRequest = async function (e, s) {\n      let t = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;\n      await Promise.all([_this.client.pendingRequest.delete(e, s), t ? Promise.resolve() : _this.client.core.expirer.del(e)]);\n    }, this.setExpiry = async (e, s) => {\n      this.client.session.keys.includes(e) && (await this.client.session.update(e, {\n        expiry: s\n      })), this.client.core.expirer.set(e, s);\n    }, this.setProposal = async (e, s) => {\n      await this.client.proposal.set(e, s), this.client.core.expirer.set(e, s.expiry);\n    }, this.setPendingSessionRequest = async e => {\n      const s = V.wc_sessionRequest.req.ttl,\n        {\n          id: t,\n          topic: i,\n          params: r\n        } = e;\n      await this.client.pendingRequest.set(t, {\n        id: t,\n        topic: i,\n        params: r\n      }), s && this.client.core.expirer.set(t, R(s));\n    }, this.sendRequest = async (e, s, t, i) => {\n      const r = Le(s, t),\n        o = await this.client.core.crypto.encode(e, r),\n        a = V[s].req;\n      return i && (a.ttl = i), this.client.core.history.set(e, r), this.client.core.relayer.publish(e, o, a), r.id;\n    }, this.sendResult = async (e, s, t) => {\n      const i = Ce(e, t),\n        r = await this.client.core.crypto.encode(s, i),\n        o = await this.client.core.history.get(s, e),\n        a = V[o.request.method].res;\n      this.client.core.relayer.publish(s, r, a), await this.client.core.history.resolve(i);\n    }, this.sendError = async (e, s, t) => {\n      const i = Ge(e, t),\n        r = await this.client.core.crypto.encode(s, i),\n        o = await this.client.core.history.get(s, e),\n        a = V[o.request.method].res;\n      this.client.core.relayer.publish(s, r, a), await this.client.core.history.resolve(i);\n    }, this.cleanup = async () => {\n      const e = [],\n        s = [];\n      this.client.session.getAll().forEach(t => {\n        P(t.expiry) && e.push(t.topic);\n      }), this.client.proposal.getAll().forEach(t => {\n        P(t.expiry) && s.push(t.id);\n      }), await Promise.all([...e.map(t => this.deleteSession(t)), ...s.map(t => this.deleteProposal(t))]);\n    }, this.onRelayEventRequest = e => {\n      const {\n          topic: s,\n          payload: t\n        } = e,\n        i = t.method;\n      switch (i) {\n        case \"wc_sessionPropose\":\n          return this.onSessionProposeRequest(s, t);\n        case \"wc_sessionSettle\":\n          return this.onSessionSettleRequest(s, t);\n        case \"wc_sessionUpdate\":\n          return this.onSessionUpdateRequest(s, t);\n        case \"wc_sessionExtend\":\n          return this.onSessionExtendRequest(s, t);\n        case \"wc_sessionPing\":\n          return this.onSessionPingRequest(s, t);\n        case \"wc_sessionDelete\":\n          return this.onSessionDeleteRequest(s, t);\n        case \"wc_sessionRequest\":\n          return this.onSessionRequest(s, t);\n        case \"wc_sessionEvent\":\n          return this.onSessionEventRequest(s, t);\n        default:\n          return this.client.logger.info(`Unsupported request method ${i}`);\n      }\n    }, this.onRelayEventResponse = async e => {\n      const {\n          topic: s,\n          payload: t\n        } = e,\n        i = (await this.client.core.history.get(s, t.id)).request.method;\n      switch (i) {\n        case \"wc_sessionPropose\":\n          return this.onSessionProposeResponse(s, t);\n        case \"wc_sessionSettle\":\n          return this.onSessionSettleResponse(s, t);\n        case \"wc_sessionUpdate\":\n          return this.onSessionUpdateResponse(s, t);\n        case \"wc_sessionExtend\":\n          return this.onSessionExtendResponse(s, t);\n        case \"wc_sessionPing\":\n          return this.onSessionPingResponse(s, t);\n        case \"wc_sessionRequest\":\n          return this.onSessionRequestResponse(s, t);\n        default:\n          return this.client.logger.info(`Unsupported response method ${i}`);\n      }\n    }, this.onSessionProposeRequest = async (e, s) => {\n      const {\n        params: t,\n        id: i\n      } = s;\n      try {\n        this.isValidConnect(y({}, s.params));\n        const r = R(E),\n          o = y({\n            id: i,\n            pairingTopic: e,\n            expiry: r\n          }, t);\n        await this.setProposal(i, o), this.client.events.emit(\"session_proposal\", {\n          id: i,\n          params: o\n        });\n      } catch (r) {\n        await this.sendError(i, e, r), this.client.logger.error(r);\n      }\n    }, this.onSessionProposeResponse = async (e, s) => {\n      const {\n        id: t\n      } = s;\n      if (q(s)) {\n        const {\n          result: i\n        } = s;\n        this.client.logger.trace({\n          type: \"method\",\n          method: \"onSessionProposeResponse\",\n          result: i\n        });\n        const r = this.client.proposal.get(t);\n        this.client.logger.trace({\n          type: \"method\",\n          method: \"onSessionProposeResponse\",\n          proposal: r\n        });\n        const o = r.proposer.publicKey;\n        this.client.logger.trace({\n          type: \"method\",\n          method: \"onSessionProposeResponse\",\n          selfPublicKey: o\n        });\n        const a = i.responderPublicKey;\n        this.client.logger.trace({\n          type: \"method\",\n          method: \"onSessionProposeResponse\",\n          peerPublicKey: a\n        });\n        const p = await this.client.core.crypto.generateSharedKey(o, a);\n        this.client.logger.trace({\n          type: \"method\",\n          method: \"onSessionProposeResponse\",\n          sessionTopic: p\n        });\n        const h = await this.client.core.relayer.subscribe(p);\n        this.client.logger.trace({\n          type: \"method\",\n          method: \"onSessionProposeResponse\",\n          subscriptionId: h\n        }), await this.client.core.pairing.activate({\n          topic: e\n        });\n      } else v(s) && (await this.client.proposal.delete(t, N(\"USER_DISCONNECTED\")), this.events.emit(l(\"session_connect\"), {\n        error: s.error\n      }));\n    }, this.onSessionSettleRequest = async (e, s) => {\n      const {\n        id: t,\n        params: i\n      } = s;\n      try {\n        this.isValidSessionSettleRequest(i);\n        const {\n            relay: r,\n            controller: o,\n            expiry: a,\n            namespaces: p,\n            requiredNamespaces: h,\n            optionalNamespaces: w,\n            sessionProperties: d\n          } = s.params,\n          u = y({\n            topic: e,\n            relay: r,\n            expiry: a,\n            namespaces: p,\n            acknowledged: !0,\n            requiredNamespaces: h,\n            optionalNamespaces: w,\n            controller: o.publicKey,\n            self: {\n              publicKey: \"\",\n              metadata: this.client.metadata\n            },\n            peer: {\n              publicKey: o.publicKey,\n              metadata: o.metadata\n            }\n          }, d && {\n            sessionProperties: d\n          });\n        await this.sendResult(s.id, e, !0), this.events.emit(l(\"session_connect\"), {\n          session: u\n        });\n      } catch (r) {\n        await this.sendError(t, e, r), this.client.logger.error(r);\n      }\n    }, this.onSessionSettleResponse = async (e, s) => {\n      const {\n        id: t\n      } = s;\n      q(s) ? (await this.client.session.update(e, {\n        acknowledged: !0\n      }), this.events.emit(l(\"session_approve\", t), {})) : v(s) && (await this.client.session.delete(e, N(\"USER_DISCONNECTED\")), this.events.emit(l(\"session_approve\", t), {\n        error: s.error\n      }));\n    }, this.onSessionUpdateRequest = async (e, s) => {\n      const {\n        params: t,\n        id: i\n      } = s;\n      try {\n        this.isValidUpdate(y({\n          topic: e\n        }, t)), await this.client.session.update(e, {\n          namespaces: t.namespaces\n        }), await this.sendResult(i, e, !0), this.client.events.emit(\"session_update\", {\n          id: i,\n          topic: e,\n          params: t\n        });\n      } catch (r) {\n        await this.sendError(i, e, r), this.client.logger.error(r);\n      }\n    }, this.onSessionUpdateResponse = (e, s) => {\n      const {\n        id: t\n      } = s;\n      q(s) ? this.events.emit(l(\"session_update\", t), {}) : v(s) && this.events.emit(l(\"session_update\", t), {\n        error: s.error\n      });\n    }, this.onSessionExtendRequest = async (e, s) => {\n      const {\n        id: t\n      } = s;\n      try {\n        this.isValidExtend({\n          topic: e\n        }), await this.setExpiry(e, R(A)), await this.sendResult(t, e, !0), this.client.events.emit(\"session_extend\", {\n          id: t,\n          topic: e\n        });\n      } catch (i) {\n        await this.sendError(t, e, i), this.client.logger.error(i);\n      }\n    }, this.onSessionExtendResponse = (e, s) => {\n      const {\n        id: t\n      } = s;\n      q(s) ? this.events.emit(l(\"session_extend\", t), {}) : v(s) && this.events.emit(l(\"session_extend\", t), {\n        error: s.error\n      });\n    }, this.onSessionPingRequest = async (e, s) => {\n      const {\n        id: t\n      } = s;\n      try {\n        this.isValidPing({\n          topic: e\n        }), await this.sendResult(t, e, !0), this.client.events.emit(\"session_ping\", {\n          id: t,\n          topic: e\n        });\n      } catch (i) {\n        await this.sendError(t, e, i), this.client.logger.error(i);\n      }\n    }, this.onSessionPingResponse = (e, s) => {\n      const {\n        id: t\n      } = s;\n      setTimeout(() => {\n        q(s) ? this.events.emit(l(\"session_ping\", t), {}) : v(s) && this.events.emit(l(\"session_ping\", t), {\n          error: s.error\n        });\n      }, 500);\n    }, this.onSessionDeleteRequest = async (e, s) => {\n      const {\n        id: t\n      } = s;\n      try {\n        this.isValidDisconnect({\n          topic: e,\n          reason: s.params\n        }), this.client.core.relayer.once(B.publish, async () => {\n          await this.deleteSession(e);\n        }), await this.sendResult(t, e, !0), this.client.events.emit(\"session_delete\", {\n          id: t,\n          topic: e\n        });\n      } catch (i) {\n        await this.sendError(t, e, i), this.client.logger.error(i);\n      }\n    }, this.onSessionRequest = async (e, s) => {\n      const {\n        id: t,\n        params: i\n      } = s;\n      try {\n        this.isValidRequest(y({\n          topic: e\n        }, i)), await this.setPendingSessionRequest({\n          id: t,\n          topic: e,\n          params: i\n        }), this.client.events.emit(\"session_request\", {\n          id: t,\n          topic: e,\n          params: i\n        });\n      } catch (r) {\n        await this.sendError(t, e, r), this.client.logger.error(r);\n      }\n    }, this.onSessionRequestResponse = (e, s) => {\n      const {\n        id: t\n      } = s;\n      q(s) ? this.events.emit(l(\"session_request\", t), {\n        result: s.result\n      }) : v(s) && this.events.emit(l(\"session_request\", t), {\n        error: s.error\n      });\n    }, this.onSessionEventRequest = async (e, s) => {\n      const {\n        id: t,\n        params: i\n      } = s;\n      try {\n        this.isValidEmit(y({\n          topic: e\n        }, i)), this.client.events.emit(\"session_event\", {\n          id: t,\n          topic: e,\n          params: i\n        });\n      } catch (r) {\n        await this.sendError(t, e, r), this.client.logger.error(r);\n      }\n    }, this.isValidConnect = async e => {\n      if (!S(e)) {\n        const {\n          message: a\n        } = c(\"MISSING_OR_INVALID\", `connect() params: ${JSON.stringify(e)}`);\n        throw new Error(a);\n      }\n      const {\n        pairingTopic: s,\n        requiredNamespaces: t,\n        optionalNamespaces: i,\n        sessionProperties: r,\n        relays: o\n      } = e;\n      if (D(s) || (await this.isValidPairingTopic(s)), !Se(o, !0)) {\n        const {\n          message: a\n        } = c(\"MISSING_OR_INVALID\", `connect() relays: ${o}`);\n        throw new Error(a);\n      }\n      !D(t) && k(t) !== 0 && this.validateNamespaces(t, \"requiredNamespaces\"), !D(i) && k(i) !== 0 && this.validateNamespaces(i, \"optionalNamespaces\"), D(r) || this.validateSessionProps(r, \"sessionProperties\");\n    }, this.validateNamespaces = (e, s) => {\n      const t = Ee(e, \"connect()\", s);\n      if (t) throw new Error(t.message);\n    }, this.isValidApprove = async e => {\n      if (!S(e)) throw new Error(c(\"MISSING_OR_INVALID\", `approve() params: ${e}`).message);\n      const {\n        id: s,\n        namespaces: t,\n        relayProtocol: i,\n        sessionProperties: r\n      } = e;\n      await this.isValidProposalId(s);\n      const o = this.client.proposal.get(s),\n        a = z(t, \"approve()\");\n      if (a) throw new Error(a.message);\n      const p = Y(o.requiredNamespaces, t, \"approve()\", \"requiredNamespaces\");\n      if (p) throw new Error(p.message);\n      if (!b(i, !0)) {\n        const {\n          message: h\n        } = c(\"MISSING_OR_INVALID\", `approve() relayProtocol: ${i}`);\n        throw new Error(h);\n      }\n      if (Object.keys(t).length > Object.keys(o.requiredNamespaces).length) {\n        const h = Object.keys(o.optionalNamespaces).filter(u => t[u]),\n          w = {};\n        for (const u in o.optionalNamespaces) h.includes(u) && (w[u] = o.optionalNamespaces[u]);\n        const d = Y(w, t, \"approve()\", \"optionalNamespaces\");\n        if (d) throw new Error(d.message);\n      }\n      D(r) || this.validateSessionProps(r, \"sessionProperties\");\n    }, this.isValidReject = async e => {\n      if (!S(e)) {\n        const {\n          message: i\n        } = c(\"MISSING_OR_INVALID\", `reject() params: ${e}`);\n        throw new Error(i);\n      }\n      const {\n        id: s,\n        reason: t\n      } = e;\n      if (await this.isValidProposalId(s), !Ie(t)) {\n        const {\n          message: i\n        } = c(\"MISSING_OR_INVALID\", `reject() reason: ${JSON.stringify(t)}`);\n        throw new Error(i);\n      }\n    }, this.isValidSessionSettleRequest = e => {\n      if (!S(e)) {\n        const {\n          message: p\n        } = c(\"MISSING_OR_INVALID\", `onSessionSettleRequest() params: ${e}`);\n        throw new Error(p);\n      }\n      const {\n        relay: s,\n        controller: t,\n        namespaces: i,\n        expiry: r\n      } = e;\n      if (!_e(s)) {\n        const {\n          message: p\n        } = c(\"MISSING_OR_INVALID\", \"onSessionSettleRequest() relay protocol should be a string\");\n        throw new Error(p);\n      }\n      const o = Re(t, \"onSessionSettleRequest()\");\n      if (o) throw new Error(o.message);\n      const a = z(i, \"onSessionSettleRequest()\");\n      if (a) throw new Error(a.message);\n      if (P(r)) {\n        const {\n          message: p\n        } = c(\"EXPIRED\", \"onSessionSettleRequest()\");\n        throw new Error(p);\n      }\n    }, this.isValidUpdate = async e => {\n      if (!S(e)) {\n        const {\n          message: a\n        } = c(\"MISSING_OR_INVALID\", `update() params: ${e}`);\n        throw new Error(a);\n      }\n      const {\n        topic: s,\n        namespaces: t\n      } = e;\n      await this.isValidSessionTopic(s);\n      const i = this.client.session.get(s),\n        r = z(t, \"update()\");\n      if (r) throw new Error(r.message);\n      const o = Y(i.requiredNamespaces, t, \"update()\", \"requiredNamespaces\");\n      if (o) throw new Error(o.message);\n    }, this.isValidExtend = async e => {\n      if (!S(e)) {\n        const {\n          message: t\n        } = c(\"MISSING_OR_INVALID\", `extend() params: ${e}`);\n        throw new Error(t);\n      }\n      const {\n        topic: s\n      } = e;\n      await this.isValidSessionTopic(s);\n    }, this.isValidRequest = async e => {\n      if (!S(e)) {\n        const {\n          message: a\n        } = c(\"MISSING_OR_INVALID\", `request() params: ${e}`);\n        throw new Error(a);\n      }\n      const {\n        topic: s,\n        request: t,\n        chainId: i,\n        expiry: r\n      } = e;\n      await this.isValidSessionTopic(s);\n      const {\n        namespaces: o\n      } = this.client.session.get(s);\n      if (!Q(o, i)) {\n        const {\n          message: a\n        } = c(\"MISSING_OR_INVALID\", `request() chainId: ${i}`);\n        throw new Error(a);\n      }\n      if (!Ne(t)) {\n        const {\n          message: a\n        } = c(\"MISSING_OR_INVALID\", `request() ${JSON.stringify(t)}`);\n        throw new Error(a);\n      }\n      if (!qe(o, i, t.method)) {\n        const {\n          message: a\n        } = c(\"MISSING_OR_INVALID\", `request() method: ${t.method}`);\n        throw new Error(a);\n      }\n      if (r && !ve(r, $)) {\n        const {\n          message: a\n        } = c(\"MISSING_OR_INVALID\", `request() expiry: ${r}. Expiry must be a number (in seconds) between ${$.min} and ${$.max}`);\n        throw new Error(a);\n      }\n    }, this.isValidRespond = async e => {\n      if (!S(e)) {\n        const {\n          message: i\n        } = c(\"MISSING_OR_INVALID\", `respond() params: ${e}`);\n        throw new Error(i);\n      }\n      const {\n        topic: s,\n        response: t\n      } = e;\n      if (await this.isValidSessionTopic(s), !fe(t)) {\n        const {\n          message: i\n        } = c(\"MISSING_OR_INVALID\", `respond() response: ${JSON.stringify(t)}`);\n        throw new Error(i);\n      }\n    }, this.isValidPing = async e => {\n      if (!S(e)) {\n        const {\n          message: t\n        } = c(\"MISSING_OR_INVALID\", `ping() params: ${e}`);\n        throw new Error(t);\n      }\n      const {\n        topic: s\n      } = e;\n      await this.isValidSessionOrPairingTopic(s);\n    }, this.isValidEmit = async e => {\n      if (!S(e)) {\n        const {\n          message: o\n        } = c(\"MISSING_OR_INVALID\", `emit() params: ${e}`);\n        throw new Error(o);\n      }\n      const {\n        topic: s,\n        event: t,\n        chainId: i\n      } = e;\n      await this.isValidSessionTopic(s);\n      const {\n        namespaces: r\n      } = this.client.session.get(s);\n      if (!Q(r, i)) {\n        const {\n          message: o\n        } = c(\"MISSING_OR_INVALID\", `emit() chainId: ${i}`);\n        throw new Error(o);\n      }\n      if (!Pe(t)) {\n        const {\n          message: o\n        } = c(\"MISSING_OR_INVALID\", `emit() event: ${JSON.stringify(t)}`);\n        throw new Error(o);\n      }\n      if (!Oe(r, i, t.name)) {\n        const {\n          message: o\n        } = c(\"MISSING_OR_INVALID\", `emit() event: ${JSON.stringify(t)}`);\n        throw new Error(o);\n      }\n    }, this.isValidDisconnect = async e => {\n      if (!S(e)) {\n        const {\n          message: t\n        } = c(\"MISSING_OR_INVALID\", `disconnect() params: ${e}`);\n        throw new Error(t);\n      }\n      const {\n        topic: s\n      } = e;\n      await this.isValidSessionOrPairingTopic(s);\n    }, this.validateSessionProps = (e, s) => {\n      Object.values(e).forEach(t => {\n        if (!b(t, !1)) {\n          const {\n            message: i\n          } = c(\"MISSING_OR_INVALID\", `${s} must be in Record<string, string> format. Received: ${JSON.stringify(t)}`);\n          throw new Error(i);\n        }\n      });\n    };\n  }\n  isInitialized() {\n    if (!this.initialized) {\n      const {\n        message: n\n      } = c(\"NOT_INITIALIZED\", this.name);\n      throw new Error(n);\n    }\n  }\n  registerRelayerEvents() {\n    this.client.core.relayer.on(B.message, async n => {\n      const {\n        topic: e,\n        message: s\n      } = n;\n      if (this.ignoredPayloadTypes.includes(this.client.core.crypto.getPayloadType(s))) return;\n      const t = await this.client.core.crypto.decode(e, s);\n      $e(t) ? (this.client.core.history.set(e, t), this.onRelayEventRequest({\n        topic: e,\n        payload: t\n      })) : Me(t) && (await this.client.core.history.resolve(t), this.onRelayEventResponse({\n        topic: e,\n        payload: t\n      }));\n    });\n  }\n  registerExpirerEvents() {\n    this.client.core.expirer.on(ce.expired, async n => {\n      const {\n        topic: e,\n        id: s\n      } = Ve(n.target);\n      if (s && this.client.pendingRequest.keys.includes(s)) return await this.deletePendingSessionRequest(s, c(\"EXPIRED\"), !0);\n      e ? this.client.session.keys.includes(e) && (await this.deleteSession(e, !0), this.client.events.emit(\"session_expire\", {\n        topic: e\n      })) : s && (await this.deleteProposal(s, !0), this.client.events.emit(\"proposal_expire\", {\n        id: s\n      }));\n    });\n  }\n  isValidPairingTopic(n) {\n    if (!b(n, !1)) {\n      const {\n        message: e\n      } = c(\"MISSING_OR_INVALID\", `pairing topic should be a string: ${n}`);\n      throw new Error(e);\n    }\n    if (!this.client.core.pairing.pairings.keys.includes(n)) {\n      const {\n        message: e\n      } = c(\"NO_MATCHING_KEY\", `pairing topic doesn't exist: ${n}`);\n      throw new Error(e);\n    }\n    if (P(this.client.core.pairing.pairings.get(n).expiry)) {\n      const {\n        message: e\n      } = c(\"EXPIRED\", `pairing topic: ${n}`);\n      throw new Error(e);\n    }\n  }\n  async isValidSessionTopic(n) {\n    if (!b(n, !1)) {\n      const {\n        message: e\n      } = c(\"MISSING_OR_INVALID\", `session topic should be a string: ${n}`);\n      throw new Error(e);\n    }\n    if (!this.client.session.keys.includes(n)) {\n      const {\n        message: e\n      } = c(\"NO_MATCHING_KEY\", `session topic doesn't exist: ${n}`);\n      throw new Error(e);\n    }\n    if (P(this.client.session.get(n).expiry)) {\n      await this.deleteSession(n);\n      const {\n        message: e\n      } = c(\"EXPIRED\", `session topic: ${n}`);\n      throw new Error(e);\n    }\n  }\n  async isValidSessionOrPairingTopic(n) {\n    if (this.client.session.keys.includes(n)) await this.isValidSessionTopic(n);else if (this.client.core.pairing.pairings.keys.includes(n)) this.isValidPairingTopic(n);else if (b(n, !1)) {\n      const {\n        message: e\n      } = c(\"NO_MATCHING_KEY\", `session or pairing topic doesn't exist: ${n}`);\n      throw new Error(e);\n    } else {\n      const {\n        message: e\n      } = c(\"MISSING_OR_INVALID\", `session or pairing topic should be a string: ${n}`);\n      throw new Error(e);\n    }\n  }\n  async isValidProposalId(n) {\n    if (!Te(n)) {\n      const {\n        message: e\n      } = c(\"MISSING_OR_INVALID\", `proposal id should be a number: ${n}`);\n      throw new Error(e);\n    }\n    if (!this.client.proposal.keys.includes(n)) {\n      const {\n        message: e\n      } = c(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${n}`);\n      throw new Error(e);\n    }\n    if (P(this.client.proposal.get(n).expiry)) {\n      await this.deleteProposal(n);\n      const {\n        message: e\n      } = c(\"EXPIRED\", `proposal id: ${n}`);\n      throw new Error(e);\n    }\n  }\n}\nclass We extends j {\n  constructor(n, e) {\n    super(n, e, ee, C), this.core = n, this.logger = e;\n  }\n}\nclass Ze extends j {\n  constructor(n, e) {\n    super(n, e, se, C), this.core = n, this.logger = e;\n  }\n}\nclass es extends j {\n  constructor(n, e) {\n    super(n, e, ie, C), this.core = n, this.logger = e;\n  }\n}\nclass M extends me {\n  constructor(n) {\n    super(n), this.protocol = X, this.version = J, this.name = G.name, this.events = new be(), this.on = (s, t) => this.events.on(s, t), this.once = (s, t) => this.events.once(s, t), this.off = (s, t) => this.events.off(s, t), this.removeListener = (s, t) => this.events.removeListener(s, t), this.removeAllListeners = s => this.events.removeAllListeners(s), this.connect = async s => {\n      try {\n        return await this.engine.connect(s);\n      } catch (t) {\n        throw this.logger.error(t.message), t;\n      }\n    }, this.pair = async s => {\n      try {\n        return await this.engine.pair(s);\n      } catch (t) {\n        throw this.logger.error(t.message), t;\n      }\n    }, this.approve = async s => {\n      try {\n        return await this.engine.approve(s);\n      } catch (t) {\n        throw this.logger.error(t.message), t;\n      }\n    }, this.reject = async s => {\n      try {\n        return await this.engine.reject(s);\n      } catch (t) {\n        throw this.logger.error(t.message), t;\n      }\n    }, this.update = async s => {\n      try {\n        return await this.engine.update(s);\n      } catch (t) {\n        throw this.logger.error(t.message), t;\n      }\n    }, this.extend = async s => {\n      try {\n        return await this.engine.extend(s);\n      } catch (t) {\n        throw this.logger.error(t.message), t;\n      }\n    }, this.request = async s => {\n      try {\n        return await this.engine.request(s);\n      } catch (t) {\n        throw this.logger.error(t.message), t;\n      }\n    }, this.respond = async s => {\n      try {\n        return await this.engine.respond(s);\n      } catch (t) {\n        throw this.logger.error(t.message), t;\n      }\n    }, this.ping = async s => {\n      try {\n        return await this.engine.ping(s);\n      } catch (t) {\n        throw this.logger.error(t.message), t;\n      }\n    }, this.emit = async s => {\n      try {\n        return await this.engine.emit(s);\n      } catch (t) {\n        throw this.logger.error(t.message), t;\n      }\n    }, this.disconnect = async s => {\n      try {\n        return await this.engine.disconnect(s);\n      } catch (t) {\n        throw this.logger.error(t.message), t;\n      }\n    }, this.find = s => {\n      try {\n        return this.engine.find(s);\n      } catch (t) {\n        throw this.logger.error(t.message), t;\n      }\n    }, this.getPendingSessionRequests = () => {\n      try {\n        return this.engine.getPendingSessionRequests();\n      } catch (s) {\n        throw this.logger.error(s.message), s;\n      }\n    }, this.name = n?.name || G.name, this.metadata = n?.metadata || xe();\n    const e = typeof n?.logger < \"u\" && typeof n?.logger != \"string\" ? n.logger : oe(le({\n      level: n?.logger || G.logger\n    }));\n    this.core = n?.core || new pe(n), this.logger = he(e, this.name), this.session = new Ze(this.core, this.logger), this.proposal = new We(this.core, this.logger), this.pendingRequest = new es(this.core, this.logger), this.engine = new Qe(this);\n  }\n  static async init(n) {\n    const e = new M(n);\n    return await e.initialize(), e;\n  }\n  get context() {\n    return de(this.logger);\n  }\n  get pairing() {\n    return this.core.pairing.pairings;\n  }\n  async initialize() {\n    this.logger.trace(\"Initialized\");\n    try {\n      await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.engine.init(), this.logger.info(\"SignClient Initialization Success\");\n    } catch (n) {\n      throw this.logger.info(\"SignClient Initialization Failure\"), this.logger.error(n.message), n;\n    }\n  }\n}\nconst ss = M;\nexport { te as ENGINE_CONTEXT, V as ENGINE_RPC_OPTS, ke as HISTORY_CONTEXT, je as HISTORY_EVENTS, ze as HISTORY_STORAGE_VERSION, ee as PROPOSAL_CONTEXT, Ye as PROPOSAL_EXPIRY, ie as REQUEST_CONTEXT, se as SESSION_CONTEXT, A as SESSION_EXPIRY, $ as SESSION_REQUEST_EXPIRY_BOUNDARIES, H as SIGN_CLIENT_CONTEXT, G as SIGN_CLIENT_DEFAULT, Ue as SIGN_CLIENT_EVENTS, X as SIGN_CLIENT_PROTOCOL, Ke as SIGN_CLIENT_STORAGE_OPTIONS, C as SIGN_CLIENT_STORAGE_PREFIX, J as SIGN_CLIENT_VERSION, ss as SignClient, M as default };","map":{"version":3,"mappings":"","names":[],"sources":[],"sourcesContent":["import oe from\"pino\";import{RELAYER_DEFAULT_PROTOCOL as ae,RELAYER_EVENTS as B,EXPIRER_EVENTS as ce,Store as j,Core as pe}from\"@walletconnect/core\";import{getDefaultLoggerOptions as le,generateChildLogger as he,getLoggerContext as de}from\"@walletconnect/logger\";import{IEngine as ge,ISignClient as me}from\"@walletconnect/types\";import{TYPE_1 as we,createDelayedPromise as f,engineEvent as l,getInternalError as c,calcExpiry as R,isValidObject as k,getRequiredNamespacesFromNamespaces as ue,getSdkError as N,isSessionCompatible as ye,isExpired as P,isValidParams as S,isUndefined as D,isValidRelays as Se,isValidRequiredNamespaces as Ee,isValidNamespaces as z,isConformingNamespaces as Y,isValidString as b,isValidErrorReason as Ie,isValidRelay as _e,isValidController as Re,isValidNamespacesChainId as Q,isValidRequest as Ne,isValidNamespacesRequest as qe,isValidRequestExpiry as ve,isValidResponse as fe,isValidEvent as Pe,isValidNamespacesEvent as Oe,parseExpirerTarget as Ve,isValidId as Te,getAppMetadata as xe}from\"@walletconnect/utils\";import De,{EventEmitter as be}from\"events\";import{THIRTY_DAYS as Ae,SEVEN_DAYS as W,FIVE_MINUTES as E,ONE_DAY as O,THIRTY_SECONDS as Z}from\"@walletconnect/time\";import{isJsonRpcResult as q,isJsonRpcError as v,formatJsonRpcRequest as Le,formatJsonRpcResult as Ce,formatJsonRpcError as Ge,isJsonRpcRequest as $e,isJsonRpcResponse as Me}from\"@walletconnect/jsonrpc-utils\";const X=\"wc\",J=2,H=\"client\",C=`${X}@${J}:${H}:`,G={name:H,logger:\"error\",controller:!1,relayUrl:\"wss://relay.walletconnect.com\"},Ue={session_proposal:\"session_proposal\",session_update:\"session_update\",session_extend:\"session_extend\",session_ping:\"session_ping\",session_delete:\"session_delete\",session_expire:\"session_expire\",session_request:\"session_request\",session_request_sent:\"session_request_sent\",session_event:\"session_event\",proposal_expire:\"proposal_expire\"},Ke={database:\":memory:\"},je={created:\"history_created\",updated:\"history_updated\",deleted:\"history_deleted\",sync:\"history_sync\"},ke=\"history\",ze=\"0.3\",ee=\"proposal\",Ye=Ae,se=\"session\",A=W,te=\"engine\",V={wc_sessionPropose:{req:{ttl:E,prompt:!0,tag:1100},res:{ttl:E,prompt:!1,tag:1101}},wc_sessionSettle:{req:{ttl:E,prompt:!1,tag:1102},res:{ttl:E,prompt:!1,tag:1103}},wc_sessionUpdate:{req:{ttl:O,prompt:!1,tag:1104},res:{ttl:O,prompt:!1,tag:1105}},wc_sessionExtend:{req:{ttl:O,prompt:!1,tag:1106},res:{ttl:O,prompt:!1,tag:1107}},wc_sessionRequest:{req:{ttl:E,prompt:!0,tag:1108},res:{ttl:E,prompt:!1,tag:1109}},wc_sessionEvent:{req:{ttl:E,prompt:!0,tag:1110},res:{ttl:E,prompt:!1,tag:1111}},wc_sessionDelete:{req:{ttl:O,prompt:!1,tag:1112},res:{ttl:O,prompt:!1,tag:1113}},wc_sessionPing:{req:{ttl:Z,prompt:!1,tag:1114},res:{ttl:Z,prompt:!1,tag:1115}}},$={min:E,max:W},ie=\"request\";var Xe=Object.defineProperty,Je=Object.defineProperties,He=Object.getOwnPropertyDescriptors,ne=Object.getOwnPropertySymbols,Fe=Object.prototype.hasOwnProperty,Be=Object.prototype.propertyIsEnumerable,re=(g,n,e)=>n in g?Xe(g,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):g[n]=e,y=(g,n)=>{for(var e in n||(n={}))Fe.call(n,e)&&re(g,e,n[e]);if(ne)for(var e of ne(n))Be.call(n,e)&&re(g,e,n[e]);return g},F=(g,n)=>Je(g,He(n));class Qe extends ge{constructor(n){super(n),this.name=te,this.events=new De,this.initialized=!1,this.ignoredPayloadTypes=[we],this.init=async()=>{this.initialized||(await this.cleanup(),this.registerRelayerEvents(),this.registerExpirerEvents(),this.client.core.pairing.register({methods:Object.keys(V)}),this.initialized=!0)},this.connect=async e=>{this.isInitialized();const s=F(y({},e),{requiredNamespaces:e.requiredNamespaces||{},optionalNamespaces:e.optionalNamespaces||{}});await this.isValidConnect(s);const{pairingTopic:t,requiredNamespaces:i,optionalNamespaces:r,sessionProperties:o,relays:a}=s;let p=t,h,w=!1;if(p&&(w=this.client.core.pairing.pairings.get(p).active),!p||!w){const{topic:_,uri:m}=await this.client.core.pairing.create();p=_,h=m}const d=await this.client.core.crypto.generateKeyPair(),u=y({requiredNamespaces:i,optionalNamespaces:r,relays:a??[{protocol:ae}],proposer:{publicKey:d,metadata:this.client.metadata}},o&&{sessionProperties:o}),{reject:I,resolve:T,done:U}=f();if(this.events.once(l(\"session_connect\"),async({error:_,session:m})=>{if(_)I(_);else if(m){m.self.publicKey=d;const x=F(y({},m),{requiredNamespaces:m.requiredNamespaces,optionalNamespaces:m.optionalNamespaces});await this.client.session.set(m.topic,x),await this.setExpiry(m.topic,m.expiry),p&&await this.client.core.pairing.updateMetadata({topic:p,metadata:m.peer.metadata}),T(x)}}),!p){const{message:_}=c(\"NO_MATCHING_KEY\",`connect() pairing topic: ${p}`);throw new Error(_)}const L=await this.sendRequest(p,\"wc_sessionPropose\",u),K=R(E);return await this.setProposal(L,y({id:L,expiry:K},u)),{uri:h,approval:U}},this.pair=async e=>(this.isInitialized(),await this.client.core.pairing.pair(e)),this.approve=async e=>{this.isInitialized(),await this.isValidApprove(e);const{id:s,relayProtocol:t,namespaces:i,sessionProperties:r}=e,o=this.client.proposal.get(s);let{pairingTopic:a,proposer:p,requiredNamespaces:h,optionalNamespaces:w}=o;k(h)||(h=ue(i,\"approve()\"));const d=await this.client.core.crypto.generateKeyPair(),u=p.publicKey,I=await this.client.core.crypto.generateSharedKey(d,u);a&&s&&(await this.client.core.pairing.updateMetadata({topic:a,metadata:p.metadata}),await this.sendResult(s,a,{relay:{protocol:t??\"irn\"},responderPublicKey:d}),await this.client.proposal.delete(s,N(\"USER_DISCONNECTED\")),await this.client.core.pairing.activate({topic:a}));const T=y({relay:{protocol:t??\"irn\"},namespaces:i,requiredNamespaces:h,optionalNamespaces:w,controller:{publicKey:d,metadata:this.client.metadata},expiry:R(A)},r&&{sessionProperties:r});await this.client.core.relayer.subscribe(I);const U=await this.sendRequest(I,\"wc_sessionSettle\",T),{done:L,resolve:K,reject:_}=f();this.events.once(l(\"session_approve\",U),({error:x})=>{x?_(x):K(this.client.session.get(I))});const m=F(y({},T),{topic:I,acknowledged:!1,self:T.controller,peer:{publicKey:p.publicKey,metadata:p.metadata},controller:d});return await this.client.session.set(I,m),await this.setExpiry(I,R(A)),{topic:I,acknowledged:L}},this.reject=async e=>{this.isInitialized(),await this.isValidReject(e);const{id:s,reason:t}=e,{pairingTopic:i}=this.client.proposal.get(s);i&&(await this.sendError(s,i,t),await this.client.proposal.delete(s,N(\"USER_DISCONNECTED\")))},this.update=async e=>{this.isInitialized(),await this.isValidUpdate(e);const{topic:s,namespaces:t}=e,i=await this.sendRequest(s,\"wc_sessionUpdate\",{namespaces:t}),{done:r,resolve:o,reject:a}=f();return this.events.once(l(\"session_update\",i),({error:p})=>{p?a(p):o()}),await this.client.session.update(s,{namespaces:t}),{acknowledged:r}},this.extend=async e=>{this.isInitialized(),await this.isValidExtend(e);const{topic:s}=e,t=await this.sendRequest(s,\"wc_sessionExtend\",{}),{done:i,resolve:r,reject:o}=f();return this.events.once(l(\"session_extend\",t),({error:a})=>{a?o(a):r()}),await this.setExpiry(s,R(A)),{acknowledged:i}},this.request=async e=>{this.isInitialized(),await this.isValidRequest(e);const{chainId:s,request:t,topic:i,expiry:r}=e,o=await this.sendRequest(i,\"wc_sessionRequest\",{request:t,chainId:s},r),{done:a,resolve:p,reject:h}=f(r);return this.events.once(l(\"session_request\",o),({error:w,result:d})=>{w?h(w):p(d)}),this.client.events.emit(\"session_request_sent\",{topic:i,request:t,chainId:s}),await a()},this.respond=async e=>{this.isInitialized(),await this.isValidRespond(e);const{topic:s,response:t}=e,{id:i}=t;q(t)?await this.sendResult(i,s,t.result):v(t)&&await this.sendError(i,s,t.error),this.deletePendingSessionRequest(e.response.id,{message:\"fulfilled\",code:0})},this.ping=async e=>{this.isInitialized(),await this.isValidPing(e);const{topic:s}=e;if(this.client.session.keys.includes(s)){const t=await this.sendRequest(s,\"wc_sessionPing\",{}),{done:i,resolve:r,reject:o}=f();this.events.once(l(\"session_ping\",t),({error:a})=>{a?o(a):r()}),await i()}else this.client.core.pairing.pairings.keys.includes(s)&&await this.client.core.pairing.ping({topic:s})},this.emit=async e=>{this.isInitialized(),await this.isValidEmit(e);const{topic:s,event:t,chainId:i}=e;await this.sendRequest(s,\"wc_sessionEvent\",{event:t,chainId:i})},this.disconnect=async e=>{this.isInitialized(),await this.isValidDisconnect(e);const{topic:s}=e;this.client.session.keys.includes(s)?(await this.sendRequest(s,\"wc_sessionDelete\",N(\"USER_DISCONNECTED\")),await this.deleteSession(s)):await this.client.core.pairing.disconnect({topic:s})},this.find=e=>(this.isInitialized(),this.client.session.getAll().filter(s=>ye(s,e))),this.getPendingSessionRequests=()=>(this.isInitialized(),this.client.pendingRequest.getAll()),this.deleteSession=async(e,s)=>{const{self:t}=this.client.session.get(e);await this.client.core.relayer.unsubscribe(e),await Promise.all([this.client.session.delete(e,N(\"USER_DISCONNECTED\")),this.client.core.crypto.deleteKeyPair(t.publicKey),this.client.core.crypto.deleteSymKey(e),s?Promise.resolve():this.client.core.expirer.del(e)])},this.deleteProposal=async(e,s)=>{await Promise.all([this.client.proposal.delete(e,N(\"USER_DISCONNECTED\")),s?Promise.resolve():this.client.core.expirer.del(e)])},this.deletePendingSessionRequest=async(e,s,t=!1)=>{await Promise.all([this.client.pendingRequest.delete(e,s),t?Promise.resolve():this.client.core.expirer.del(e)])},this.setExpiry=async(e,s)=>{this.client.session.keys.includes(e)&&await this.client.session.update(e,{expiry:s}),this.client.core.expirer.set(e,s)},this.setProposal=async(e,s)=>{await this.client.proposal.set(e,s),this.client.core.expirer.set(e,s.expiry)},this.setPendingSessionRequest=async e=>{const s=V.wc_sessionRequest.req.ttl,{id:t,topic:i,params:r}=e;await this.client.pendingRequest.set(t,{id:t,topic:i,params:r}),s&&this.client.core.expirer.set(t,R(s))},this.sendRequest=async(e,s,t,i)=>{const r=Le(s,t),o=await this.client.core.crypto.encode(e,r),a=V[s].req;return i&&(a.ttl=i),this.client.core.history.set(e,r),this.client.core.relayer.publish(e,o,a),r.id},this.sendResult=async(e,s,t)=>{const i=Ce(e,t),r=await this.client.core.crypto.encode(s,i),o=await this.client.core.history.get(s,e),a=V[o.request.method].res;this.client.core.relayer.publish(s,r,a),await this.client.core.history.resolve(i)},this.sendError=async(e,s,t)=>{const i=Ge(e,t),r=await this.client.core.crypto.encode(s,i),o=await this.client.core.history.get(s,e),a=V[o.request.method].res;this.client.core.relayer.publish(s,r,a),await this.client.core.history.resolve(i)},this.cleanup=async()=>{const e=[],s=[];this.client.session.getAll().forEach(t=>{P(t.expiry)&&e.push(t.topic)}),this.client.proposal.getAll().forEach(t=>{P(t.expiry)&&s.push(t.id)}),await Promise.all([...e.map(t=>this.deleteSession(t)),...s.map(t=>this.deleteProposal(t))])},this.onRelayEventRequest=e=>{const{topic:s,payload:t}=e,i=t.method;switch(i){case\"wc_sessionPropose\":return this.onSessionProposeRequest(s,t);case\"wc_sessionSettle\":return this.onSessionSettleRequest(s,t);case\"wc_sessionUpdate\":return this.onSessionUpdateRequest(s,t);case\"wc_sessionExtend\":return this.onSessionExtendRequest(s,t);case\"wc_sessionPing\":return this.onSessionPingRequest(s,t);case\"wc_sessionDelete\":return this.onSessionDeleteRequest(s,t);case\"wc_sessionRequest\":return this.onSessionRequest(s,t);case\"wc_sessionEvent\":return this.onSessionEventRequest(s,t);default:return this.client.logger.info(`Unsupported request method ${i}`)}},this.onRelayEventResponse=async e=>{const{topic:s,payload:t}=e,i=(await this.client.core.history.get(s,t.id)).request.method;switch(i){case\"wc_sessionPropose\":return this.onSessionProposeResponse(s,t);case\"wc_sessionSettle\":return this.onSessionSettleResponse(s,t);case\"wc_sessionUpdate\":return this.onSessionUpdateResponse(s,t);case\"wc_sessionExtend\":return this.onSessionExtendResponse(s,t);case\"wc_sessionPing\":return this.onSessionPingResponse(s,t);case\"wc_sessionRequest\":return this.onSessionRequestResponse(s,t);default:return this.client.logger.info(`Unsupported response method ${i}`)}},this.onSessionProposeRequest=async(e,s)=>{const{params:t,id:i}=s;try{this.isValidConnect(y({},s.params));const r=R(E),o=y({id:i,pairingTopic:e,expiry:r},t);await this.setProposal(i,o),this.client.events.emit(\"session_proposal\",{id:i,params:o})}catch(r){await this.sendError(i,e,r),this.client.logger.error(r)}},this.onSessionProposeResponse=async(e,s)=>{const{id:t}=s;if(q(s)){const{result:i}=s;this.client.logger.trace({type:\"method\",method:\"onSessionProposeResponse\",result:i});const r=this.client.proposal.get(t);this.client.logger.trace({type:\"method\",method:\"onSessionProposeResponse\",proposal:r});const o=r.proposer.publicKey;this.client.logger.trace({type:\"method\",method:\"onSessionProposeResponse\",selfPublicKey:o});const a=i.responderPublicKey;this.client.logger.trace({type:\"method\",method:\"onSessionProposeResponse\",peerPublicKey:a});const p=await this.client.core.crypto.generateSharedKey(o,a);this.client.logger.trace({type:\"method\",method:\"onSessionProposeResponse\",sessionTopic:p});const h=await this.client.core.relayer.subscribe(p);this.client.logger.trace({type:\"method\",method:\"onSessionProposeResponse\",subscriptionId:h}),await this.client.core.pairing.activate({topic:e})}else v(s)&&(await this.client.proposal.delete(t,N(\"USER_DISCONNECTED\")),this.events.emit(l(\"session_connect\"),{error:s.error}))},this.onSessionSettleRequest=async(e,s)=>{const{id:t,params:i}=s;try{this.isValidSessionSettleRequest(i);const{relay:r,controller:o,expiry:a,namespaces:p,requiredNamespaces:h,optionalNamespaces:w,sessionProperties:d}=s.params,u=y({topic:e,relay:r,expiry:a,namespaces:p,acknowledged:!0,requiredNamespaces:h,optionalNamespaces:w,controller:o.publicKey,self:{publicKey:\"\",metadata:this.client.metadata},peer:{publicKey:o.publicKey,metadata:o.metadata}},d&&{sessionProperties:d});await this.sendResult(s.id,e,!0),this.events.emit(l(\"session_connect\"),{session:u})}catch(r){await this.sendError(t,e,r),this.client.logger.error(r)}},this.onSessionSettleResponse=async(e,s)=>{const{id:t}=s;q(s)?(await this.client.session.update(e,{acknowledged:!0}),this.events.emit(l(\"session_approve\",t),{})):v(s)&&(await this.client.session.delete(e,N(\"USER_DISCONNECTED\")),this.events.emit(l(\"session_approve\",t),{error:s.error}))},this.onSessionUpdateRequest=async(e,s)=>{const{params:t,id:i}=s;try{this.isValidUpdate(y({topic:e},t)),await this.client.session.update(e,{namespaces:t.namespaces}),await this.sendResult(i,e,!0),this.client.events.emit(\"session_update\",{id:i,topic:e,params:t})}catch(r){await this.sendError(i,e,r),this.client.logger.error(r)}},this.onSessionUpdateResponse=(e,s)=>{const{id:t}=s;q(s)?this.events.emit(l(\"session_update\",t),{}):v(s)&&this.events.emit(l(\"session_update\",t),{error:s.error})},this.onSessionExtendRequest=async(e,s)=>{const{id:t}=s;try{this.isValidExtend({topic:e}),await this.setExpiry(e,R(A)),await this.sendResult(t,e,!0),this.client.events.emit(\"session_extend\",{id:t,topic:e})}catch(i){await this.sendError(t,e,i),this.client.logger.error(i)}},this.onSessionExtendResponse=(e,s)=>{const{id:t}=s;q(s)?this.events.emit(l(\"session_extend\",t),{}):v(s)&&this.events.emit(l(\"session_extend\",t),{error:s.error})},this.onSessionPingRequest=async(e,s)=>{const{id:t}=s;try{this.isValidPing({topic:e}),await this.sendResult(t,e,!0),this.client.events.emit(\"session_ping\",{id:t,topic:e})}catch(i){await this.sendError(t,e,i),this.client.logger.error(i)}},this.onSessionPingResponse=(e,s)=>{const{id:t}=s;setTimeout(()=>{q(s)?this.events.emit(l(\"session_ping\",t),{}):v(s)&&this.events.emit(l(\"session_ping\",t),{error:s.error})},500)},this.onSessionDeleteRequest=async(e,s)=>{const{id:t}=s;try{this.isValidDisconnect({topic:e,reason:s.params}),this.client.core.relayer.once(B.publish,async()=>{await this.deleteSession(e)}),await this.sendResult(t,e,!0),this.client.events.emit(\"session_delete\",{id:t,topic:e})}catch(i){await this.sendError(t,e,i),this.client.logger.error(i)}},this.onSessionRequest=async(e,s)=>{const{id:t,params:i}=s;try{this.isValidRequest(y({topic:e},i)),await this.setPendingSessionRequest({id:t,topic:e,params:i}),this.client.events.emit(\"session_request\",{id:t,topic:e,params:i})}catch(r){await this.sendError(t,e,r),this.client.logger.error(r)}},this.onSessionRequestResponse=(e,s)=>{const{id:t}=s;q(s)?this.events.emit(l(\"session_request\",t),{result:s.result}):v(s)&&this.events.emit(l(\"session_request\",t),{error:s.error})},this.onSessionEventRequest=async(e,s)=>{const{id:t,params:i}=s;try{this.isValidEmit(y({topic:e},i)),this.client.events.emit(\"session_event\",{id:t,topic:e,params:i})}catch(r){await this.sendError(t,e,r),this.client.logger.error(r)}},this.isValidConnect=async e=>{if(!S(e)){const{message:a}=c(\"MISSING_OR_INVALID\",`connect() params: ${JSON.stringify(e)}`);throw new Error(a)}const{pairingTopic:s,requiredNamespaces:t,optionalNamespaces:i,sessionProperties:r,relays:o}=e;if(D(s)||await this.isValidPairingTopic(s),!Se(o,!0)){const{message:a}=c(\"MISSING_OR_INVALID\",`connect() relays: ${o}`);throw new Error(a)}!D(t)&&k(t)!==0&&this.validateNamespaces(t,\"requiredNamespaces\"),!D(i)&&k(i)!==0&&this.validateNamespaces(i,\"optionalNamespaces\"),D(r)||this.validateSessionProps(r,\"sessionProperties\")},this.validateNamespaces=(e,s)=>{const t=Ee(e,\"connect()\",s);if(t)throw new Error(t.message)},this.isValidApprove=async e=>{if(!S(e))throw new Error(c(\"MISSING_OR_INVALID\",`approve() params: ${e}`).message);const{id:s,namespaces:t,relayProtocol:i,sessionProperties:r}=e;await this.isValidProposalId(s);const o=this.client.proposal.get(s),a=z(t,\"approve()\");if(a)throw new Error(a.message);const p=Y(o.requiredNamespaces,t,\"approve()\",\"requiredNamespaces\");if(p)throw new Error(p.message);if(!b(i,!0)){const{message:h}=c(\"MISSING_OR_INVALID\",`approve() relayProtocol: ${i}`);throw new Error(h)}if(Object.keys(t).length>Object.keys(o.requiredNamespaces).length){const h=Object.keys(o.optionalNamespaces).filter(u=>t[u]),w={};for(const u in o.optionalNamespaces)h.includes(u)&&(w[u]=o.optionalNamespaces[u]);const d=Y(w,t,\"approve()\",\"optionalNamespaces\");if(d)throw new Error(d.message)}D(r)||this.validateSessionProps(r,\"sessionProperties\")},this.isValidReject=async e=>{if(!S(e)){const{message:i}=c(\"MISSING_OR_INVALID\",`reject() params: ${e}`);throw new Error(i)}const{id:s,reason:t}=e;if(await this.isValidProposalId(s),!Ie(t)){const{message:i}=c(\"MISSING_OR_INVALID\",`reject() reason: ${JSON.stringify(t)}`);throw new Error(i)}},this.isValidSessionSettleRequest=e=>{if(!S(e)){const{message:p}=c(\"MISSING_OR_INVALID\",`onSessionSettleRequest() params: ${e}`);throw new Error(p)}const{relay:s,controller:t,namespaces:i,expiry:r}=e;if(!_e(s)){const{message:p}=c(\"MISSING_OR_INVALID\",\"onSessionSettleRequest() relay protocol should be a string\");throw new Error(p)}const o=Re(t,\"onSessionSettleRequest()\");if(o)throw new Error(o.message);const a=z(i,\"onSessionSettleRequest()\");if(a)throw new Error(a.message);if(P(r)){const{message:p}=c(\"EXPIRED\",\"onSessionSettleRequest()\");throw new Error(p)}},this.isValidUpdate=async e=>{if(!S(e)){const{message:a}=c(\"MISSING_OR_INVALID\",`update() params: ${e}`);throw new Error(a)}const{topic:s,namespaces:t}=e;await this.isValidSessionTopic(s);const i=this.client.session.get(s),r=z(t,\"update()\");if(r)throw new Error(r.message);const o=Y(i.requiredNamespaces,t,\"update()\",\"requiredNamespaces\");if(o)throw new Error(o.message)},this.isValidExtend=async e=>{if(!S(e)){const{message:t}=c(\"MISSING_OR_INVALID\",`extend() params: ${e}`);throw new Error(t)}const{topic:s}=e;await this.isValidSessionTopic(s)},this.isValidRequest=async e=>{if(!S(e)){const{message:a}=c(\"MISSING_OR_INVALID\",`request() params: ${e}`);throw new Error(a)}const{topic:s,request:t,chainId:i,expiry:r}=e;await this.isValidSessionTopic(s);const{namespaces:o}=this.client.session.get(s);if(!Q(o,i)){const{message:a}=c(\"MISSING_OR_INVALID\",`request() chainId: ${i}`);throw new Error(a)}if(!Ne(t)){const{message:a}=c(\"MISSING_OR_INVALID\",`request() ${JSON.stringify(t)}`);throw new Error(a)}if(!qe(o,i,t.method)){const{message:a}=c(\"MISSING_OR_INVALID\",`request() method: ${t.method}`);throw new Error(a)}if(r&&!ve(r,$)){const{message:a}=c(\"MISSING_OR_INVALID\",`request() expiry: ${r}. Expiry must be a number (in seconds) between ${$.min} and ${$.max}`);throw new Error(a)}},this.isValidRespond=async e=>{if(!S(e)){const{message:i}=c(\"MISSING_OR_INVALID\",`respond() params: ${e}`);throw new Error(i)}const{topic:s,response:t}=e;if(await this.isValidSessionTopic(s),!fe(t)){const{message:i}=c(\"MISSING_OR_INVALID\",`respond() response: ${JSON.stringify(t)}`);throw new Error(i)}},this.isValidPing=async e=>{if(!S(e)){const{message:t}=c(\"MISSING_OR_INVALID\",`ping() params: ${e}`);throw new Error(t)}const{topic:s}=e;await this.isValidSessionOrPairingTopic(s)},this.isValidEmit=async e=>{if(!S(e)){const{message:o}=c(\"MISSING_OR_INVALID\",`emit() params: ${e}`);throw new Error(o)}const{topic:s,event:t,chainId:i}=e;await this.isValidSessionTopic(s);const{namespaces:r}=this.client.session.get(s);if(!Q(r,i)){const{message:o}=c(\"MISSING_OR_INVALID\",`emit() chainId: ${i}`);throw new Error(o)}if(!Pe(t)){const{message:o}=c(\"MISSING_OR_INVALID\",`emit() event: ${JSON.stringify(t)}`);throw new Error(o)}if(!Oe(r,i,t.name)){const{message:o}=c(\"MISSING_OR_INVALID\",`emit() event: ${JSON.stringify(t)}`);throw new Error(o)}},this.isValidDisconnect=async e=>{if(!S(e)){const{message:t}=c(\"MISSING_OR_INVALID\",`disconnect() params: ${e}`);throw new Error(t)}const{topic:s}=e;await this.isValidSessionOrPairingTopic(s)},this.validateSessionProps=(e,s)=>{Object.values(e).forEach(t=>{if(!b(t,!1)){const{message:i}=c(\"MISSING_OR_INVALID\",`${s} must be in Record<string, string> format. Received: ${JSON.stringify(t)}`);throw new Error(i)}})}}isInitialized(){if(!this.initialized){const{message:n}=c(\"NOT_INITIALIZED\",this.name);throw new Error(n)}}registerRelayerEvents(){this.client.core.relayer.on(B.message,async n=>{const{topic:e,message:s}=n;if(this.ignoredPayloadTypes.includes(this.client.core.crypto.getPayloadType(s)))return;const t=await this.client.core.crypto.decode(e,s);$e(t)?(this.client.core.history.set(e,t),this.onRelayEventRequest({topic:e,payload:t})):Me(t)&&(await this.client.core.history.resolve(t),this.onRelayEventResponse({topic:e,payload:t}))})}registerExpirerEvents(){this.client.core.expirer.on(ce.expired,async n=>{const{topic:e,id:s}=Ve(n.target);if(s&&this.client.pendingRequest.keys.includes(s))return await this.deletePendingSessionRequest(s,c(\"EXPIRED\"),!0);e?this.client.session.keys.includes(e)&&(await this.deleteSession(e,!0),this.client.events.emit(\"session_expire\",{topic:e})):s&&(await this.deleteProposal(s,!0),this.client.events.emit(\"proposal_expire\",{id:s}))})}isValidPairingTopic(n){if(!b(n,!1)){const{message:e}=c(\"MISSING_OR_INVALID\",`pairing topic should be a string: ${n}`);throw new Error(e)}if(!this.client.core.pairing.pairings.keys.includes(n)){const{message:e}=c(\"NO_MATCHING_KEY\",`pairing topic doesn't exist: ${n}`);throw new Error(e)}if(P(this.client.core.pairing.pairings.get(n).expiry)){const{message:e}=c(\"EXPIRED\",`pairing topic: ${n}`);throw new Error(e)}}async isValidSessionTopic(n){if(!b(n,!1)){const{message:e}=c(\"MISSING_OR_INVALID\",`session topic should be a string: ${n}`);throw new Error(e)}if(!this.client.session.keys.includes(n)){const{message:e}=c(\"NO_MATCHING_KEY\",`session topic doesn't exist: ${n}`);throw new Error(e)}if(P(this.client.session.get(n).expiry)){await this.deleteSession(n);const{message:e}=c(\"EXPIRED\",`session topic: ${n}`);throw new Error(e)}}async isValidSessionOrPairingTopic(n){if(this.client.session.keys.includes(n))await this.isValidSessionTopic(n);else if(this.client.core.pairing.pairings.keys.includes(n))this.isValidPairingTopic(n);else if(b(n,!1)){const{message:e}=c(\"NO_MATCHING_KEY\",`session or pairing topic doesn't exist: ${n}`);throw new Error(e)}else{const{message:e}=c(\"MISSING_OR_INVALID\",`session or pairing topic should be a string: ${n}`);throw new Error(e)}}async isValidProposalId(n){if(!Te(n)){const{message:e}=c(\"MISSING_OR_INVALID\",`proposal id should be a number: ${n}`);throw new Error(e)}if(!this.client.proposal.keys.includes(n)){const{message:e}=c(\"NO_MATCHING_KEY\",`proposal id doesn't exist: ${n}`);throw new Error(e)}if(P(this.client.proposal.get(n).expiry)){await this.deleteProposal(n);const{message:e}=c(\"EXPIRED\",`proposal id: ${n}`);throw new Error(e)}}}class We extends j{constructor(n,e){super(n,e,ee,C),this.core=n,this.logger=e}}class Ze extends j{constructor(n,e){super(n,e,se,C),this.core=n,this.logger=e}}class es extends j{constructor(n,e){super(n,e,ie,C),this.core=n,this.logger=e}}class M extends me{constructor(n){super(n),this.protocol=X,this.version=J,this.name=G.name,this.events=new be,this.on=(s,t)=>this.events.on(s,t),this.once=(s,t)=>this.events.once(s,t),this.off=(s,t)=>this.events.off(s,t),this.removeListener=(s,t)=>this.events.removeListener(s,t),this.removeAllListeners=s=>this.events.removeAllListeners(s),this.connect=async s=>{try{return await this.engine.connect(s)}catch(t){throw this.logger.error(t.message),t}},this.pair=async s=>{try{return await this.engine.pair(s)}catch(t){throw this.logger.error(t.message),t}},this.approve=async s=>{try{return await this.engine.approve(s)}catch(t){throw this.logger.error(t.message),t}},this.reject=async s=>{try{return await this.engine.reject(s)}catch(t){throw this.logger.error(t.message),t}},this.update=async s=>{try{return await this.engine.update(s)}catch(t){throw this.logger.error(t.message),t}},this.extend=async s=>{try{return await this.engine.extend(s)}catch(t){throw this.logger.error(t.message),t}},this.request=async s=>{try{return await this.engine.request(s)}catch(t){throw this.logger.error(t.message),t}},this.respond=async s=>{try{return await this.engine.respond(s)}catch(t){throw this.logger.error(t.message),t}},this.ping=async s=>{try{return await this.engine.ping(s)}catch(t){throw this.logger.error(t.message),t}},this.emit=async s=>{try{return await this.engine.emit(s)}catch(t){throw this.logger.error(t.message),t}},this.disconnect=async s=>{try{return await this.engine.disconnect(s)}catch(t){throw this.logger.error(t.message),t}},this.find=s=>{try{return this.engine.find(s)}catch(t){throw this.logger.error(t.message),t}},this.getPendingSessionRequests=()=>{try{return this.engine.getPendingSessionRequests()}catch(s){throw this.logger.error(s.message),s}},this.name=n?.name||G.name,this.metadata=n?.metadata||xe();const e=typeof n?.logger<\"u\"&&typeof n?.logger!=\"string\"?n.logger:oe(le({level:n?.logger||G.logger}));this.core=n?.core||new pe(n),this.logger=he(e,this.name),this.session=new Ze(this.core,this.logger),this.proposal=new We(this.core,this.logger),this.pendingRequest=new es(this.core,this.logger),this.engine=new Qe(this)}static async init(n){const e=new M(n);return await e.initialize(),e}get context(){return de(this.logger)}get pairing(){return this.core.pairing.pairings}async initialize(){this.logger.trace(\"Initialized\");try{await this.core.start(),await this.session.init(),await this.proposal.init(),await this.pendingRequest.init(),await this.engine.init(),this.logger.info(\"SignClient Initialization Success\")}catch(n){throw this.logger.info(\"SignClient Initialization Failure\"),this.logger.error(n.message),n}}}const ss=M;export{te as ENGINE_CONTEXT,V as ENGINE_RPC_OPTS,ke as HISTORY_CONTEXT,je as HISTORY_EVENTS,ze as HISTORY_STORAGE_VERSION,ee as PROPOSAL_CONTEXT,Ye as PROPOSAL_EXPIRY,ie as REQUEST_CONTEXT,se as SESSION_CONTEXT,A as SESSION_EXPIRY,$ as SESSION_REQUEST_EXPIRY_BOUNDARIES,H as SIGN_CLIENT_CONTEXT,G as SIGN_CLIENT_DEFAULT,Ue as SIGN_CLIENT_EVENTS,X as SIGN_CLIENT_PROTOCOL,Ke as SIGN_CLIENT_STORAGE_OPTIONS,C as SIGN_CLIENT_STORAGE_PREFIX,J as SIGN_CLIENT_VERSION,ss as SignClient,M as default};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}