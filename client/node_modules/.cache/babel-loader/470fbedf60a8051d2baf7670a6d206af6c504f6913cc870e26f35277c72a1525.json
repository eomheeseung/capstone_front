{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n * @typedef {import('ipfs-core-types/src/block').RmResult} RmResult\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BlockAPI[\"rm\"]}\n   */\n  function rm(cid) {\n    try {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return async function* () {\n        if (!Array.isArray(cid)) {\n          cid = [cid];\n        }\n        const res = await api.post('block/rm', {\n          signal: options.signal,\n          searchParams: toUrlSearchParams({\n            arg: cid.map(cid => cid.toString()),\n            'stream-channels': true,\n            ...options\n          }),\n          headers: options.headers\n        });\n        for await (const removed of res.ndjson()) {\n          yield toCoreInterface(removed);\n        }\n      }();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  return rm;\n});\n\n/**\n * @param {*} removed\n */\nfunction toCoreInterface(removed) {\n  /** @type {RmResult} */\n  const out = {\n    cid: CID.parse(removed.Hash)\n  };\n  if (removed.Error) {\n    out.error = new Error(removed.Error);\n  }\n  return out;\n}","map":{"version":3,"names":["CID","require","configure","toUrlSearchParams","module","exports","api","rm","cid","options","Array","isArray","res","post","signal","searchParams","arg","map","toString","headers","removed","ndjson","toCoreInterface","out","parse","Hash","Error","error"],"sources":["C:/Users/paete/CapstonPro/nftmusicProtoCopy/client/node_modules/ipfs-http-client/src/block/rm.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n * @typedef {import('ipfs-core-types/src/block').RmResult} RmResult\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BlockAPI[\"rm\"]}\n   */\n  async function * rm (cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid]\n    }\n\n    const res = await api.post('block/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => cid.toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed)\n    }\n  }\n\n  return rm\n})\n\n/**\n * @param {*} removed\n */\nfunction toCoreInterface (removed) {\n  /** @type {RmResult} */\n  const out = {\n    cid: CID.parse(removed.Hash)\n  }\n\n  if (removed.Error) {\n    out.error = new Error(removed.Error)\n  }\n\n  return out\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAI,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,OAAO,GAAGH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,SAAiBC,EAAE,CAAEC,GAAG;IAAA;MAAA,IAAEC,OAAO,uEAAG,CAAC,CAAC;MAAA,0BAAE;QACtC,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,EAAE;UACvBA,GAAG,GAAG,CAACA,GAAG,CAAC;QACb;QAEA,MAAMI,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,UAAU,EAAE;UACrCC,MAAM,EAAEL,OAAO,CAACK,MAAM;UACtBC,YAAY,EAAEZ,iBAAiB,CAAC;YAC9Ba,GAAG,EAAER,GAAG,CAACS,GAAG,CAACT,GAAG,IAAIA,GAAG,CAACU,QAAQ,EAAE,CAAC;YACnC,iBAAiB,EAAE,IAAI;YACvB,GAAGT;UACL,CAAC,CAAC;UACFU,OAAO,EAAEV,OAAO,CAACU;QACnB,CAAC,CAAC;QAEF,WAAW,MAAMC,OAAO,IAAIR,GAAG,CAACS,MAAM,EAAE,EAAE;UACxC,MAAMC,eAAe,CAACF,OAAO,CAAC;QAChC;MACF,CAAC;IAAA;MAAA;IAAA;EAAA;EAED,OAAOb,EAAE;AACX,CAAC,CAAC;;AAEF;AACA;AACA;AACA,SAASe,eAAe,CAAEF,OAAO,EAAE;EACjC;EACA,MAAMG,GAAG,GAAG;IACVf,GAAG,EAAER,GAAG,CAACwB,KAAK,CAACJ,OAAO,CAACK,IAAI;EAC7B,CAAC;EAED,IAAIL,OAAO,CAACM,KAAK,EAAE;IACjBH,GAAG,CAACI,KAAK,GAAG,IAAID,KAAK,CAACN,OAAO,CAACM,KAAK,CAAC;EACtC;EAEA,OAAOH,GAAG;AACZ"},"metadata":{},"sourceType":"script","externalDependencies":[]}