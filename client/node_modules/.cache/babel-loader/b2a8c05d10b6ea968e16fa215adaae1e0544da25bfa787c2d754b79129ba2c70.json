{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _wrapAsyncGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\nvar _awaitAsyncGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\nvar _asyncGeneratorDelegate = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate.js\").default;\nvar _asyncIterator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\nvar _require = require('multiformats/cid'),\n  CID = _require.CID;\nvar configure = require('./lib/configure');\nvar toUrlSearchParams = require('./lib/to-url-search-params');\nvar stat = require('./files/stat');\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure(function (api, opts) {\n  /**\n   * @type {RootAPI[\"ls\"]}\n   */\n  function ls(_x) {\n    return _ls.apply(this, arguments);\n  }\n  function _ls() {\n    _ls = _wrapAsyncGenerator(function (path) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var pathStr, mapLink, _mapLink, res, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, result, links;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _mapLink = function _mapLink3() {\n                _mapLink = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(link) {\n                  var hash, ipfsPath, stats, entry;\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        hash = link.Hash;\n                        if (!hash.includes('/')) {\n                          _context.next = 9;\n                          break;\n                        }\n                        // the hash is a path, but we need the CID\n                        ipfsPath = hash.startsWith('/ipfs/') ? hash : \"/ipfs/\".concat(hash);\n                        _context.next = 5;\n                        return stat(opts)(ipfsPath);\n                      case 5:\n                        stats = _context.sent;\n                        hash = stats.cid;\n                        _context.next = 10;\n                        break;\n                      case 9:\n                        hash = CID.parse(hash);\n                      case 10:\n                        /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n                        entry = {\n                          name: link.Name,\n                          path: pathStr + (link.Name ? \"/\".concat(link.Name) : ''),\n                          size: link.Size,\n                          cid: hash,\n                          type: typeOf(link)\n                        };\n                        if (link.Mode) {\n                          entry.mode = parseInt(link.Mode, 8);\n                        }\n                        if (link.Mtime !== undefined && link.Mtime !== null) {\n                          entry.mtime = {\n                            secs: link.Mtime\n                          };\n                          if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n                            entry.mtime.nsecs = link.MtimeNsecs;\n                          }\n                        }\n                        return _context.abrupt(\"return\", entry);\n                      case 14:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n                return _mapLink.apply(this, arguments);\n              };\n              mapLink = function _mapLink2(_x2) {\n                return _mapLink.apply(this, arguments);\n              };\n              pathStr = \"\".concat(path instanceof Uint8Array ? CID.decode(path) : path);\n              /**\n               * @param {*} link\n               */\n              _context2.next = 5;\n              return _awaitAsyncGenerator(api.post('ls', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: pathStr\n                }, options)),\n                headers: options.headers\n              }));\n            case 5:\n              res = _context2.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context2.prev = 8;\n              _iterator = _asyncIterator(res.ndjson());\n            case 10:\n              _context2.next = 12;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 12:\n              if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n                _context2.next = 31;\n                break;\n              }\n              result = _step.value;\n              result = result.Objects;\n              if (result) {\n                _context2.next = 17;\n                break;\n              }\n              throw new Error('expected .Objects in results');\n            case 17:\n              result = result[0];\n              if (result) {\n                _context2.next = 20;\n                break;\n              }\n              throw new Error('expected one array in results.Objects');\n            case 20:\n              links = result.Links;\n              if (Array.isArray(links)) {\n                _context2.next = 23;\n                break;\n              }\n              throw new Error('expected one array in results.Objects[0].Links');\n            case 23:\n              if (links.length) {\n                _context2.next = 27;\n                break;\n              }\n              _context2.next = 26;\n              return mapLink(result);\n            case 26:\n              return _context2.abrupt(\"return\");\n            case 27:\n              return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(links.map(mapLink)), _awaitAsyncGenerator), \"t0\", 28);\n            case 28:\n              _iteratorAbruptCompletion = false;\n              _context2.next = 10;\n              break;\n            case 31:\n              _context2.next = 37;\n              break;\n            case 33:\n              _context2.prev = 33;\n              _context2.t1 = _context2[\"catch\"](8);\n              _didIteratorError = true;\n              _iteratorError = _context2.t1;\n            case 37:\n              _context2.prev = 37;\n              _context2.prev = 38;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context2.next = 42;\n                break;\n              }\n              _context2.next = 42;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 42:\n              _context2.prev = 42;\n              if (!_didIteratorError) {\n                _context2.next = 45;\n                break;\n              }\n              throw _iteratorError;\n            case 45:\n              return _context2.finish(42);\n            case 46:\n              return _context2.finish(37);\n            case 47:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[8, 33, 37, 47], [38,, 42, 46]]);\n      })();\n    });\n    return _ls.apply(this, arguments);\n  }\n  return ls;\n});\n\n/**\n * @param {any} link\n */\nfunction typeOf(link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir';\n    case 2:\n      return 'file';\n    default:\n      return 'file';\n  }\n}","map":{"version":3,"names":["require","CID","configure","toUrlSearchParams","stat","module","exports","api","opts","ls","path","options","mapLink","link","hash","Hash","includes","ipfsPath","startsWith","stats","cid","parse","entry","name","Name","pathStr","size","Size","type","typeOf","Mode","mode","parseInt","Mtime","undefined","mtime","secs","MtimeNsecs","nsecs","Uint8Array","decode","post","signal","searchParams","arg","headers","res","ndjson","result","Objects","Error","links","Links","Array","isArray","length","map","Type"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/ipfs-http-client/src/ls.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\nconst stat = require('./files/stat')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure((api, opts) => {\n  /**\n   * @type {RootAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    const pathStr = `${path instanceof Uint8Array ? CID.decode(path) : path}`\n\n    /**\n     * @param {*} link\n     */\n    async function mapLink (link) {\n      let hash = link.Hash\n\n      if (hash.includes('/')) {\n        // the hash is a path, but we need the CID\n        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`\n        const stats = await stat(opts)(ipfsPath)\n\n        hash = stats.cid\n      } else {\n        hash = CID.parse(hash)\n      }\n\n      /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name ? `/${link.Name}` : ''),\n        size: link.Size,\n        cid: hash,\n        type: typeOf(link)\n      }\n\n      if (link.Mode) {\n        entry.mode = parseInt(link.Mode, 8)\n      }\n\n      if (link.Mtime !== undefined && link.Mtime !== null) {\n        entry.mtime = {\n          secs: link.Mtime\n        }\n\n        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n          entry.mtime.nsecs = link.MtimeNsecs\n        }\n      }\n\n      return entry\n    }\n\n    const res = await api.post('ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let result of res.ndjson()) {\n      result = result.Objects\n\n      if (!result) {\n        throw new Error('expected .Objects in results')\n      }\n\n      result = result[0]\n      if (!result) {\n        throw new Error('expected one array in results.Objects')\n      }\n\n      const links = result.Links\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links')\n      }\n\n      if (!links.length) {\n        // no links, this is a file, yield a single result\n        yield mapLink(result)\n\n        return\n      }\n\n      yield * links.map(mapLink)\n    }\n  }\n  return ls\n})\n\n/**\n * @param {any} link\n */\nfunction typeOf (link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir'\n    case 2:\n      return 'file'\n    default:\n      return 'file'\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}