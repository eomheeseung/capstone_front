{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _awaitAsyncGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\nvar _wrapAsyncGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\nvar _asyncIterator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\nvar _require = require('multiformats/cid'),\n  CID = _require.CID;\nvar configure = require('../lib/configure');\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {string} type\n * @param {string} cid\n * @param {Record<string, string>} metadata\n */\nfunction toPin(type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  var pin = {\n    type: type,\n    cid: CID.parse(cid)\n  };\n  if (metadata) {\n    pin.metadata = metadata;\n  }\n  return pin;\n}\nmodule.exports = configure(function (api) {\n  /**\n   * @type {PinAPI[\"ls\"]}\n   */\n  function ls() {\n    return _ls.apply(this, arguments);\n  }\n  function _ls() {\n    _ls = _wrapAsyncGenerator(function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var paths, res, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, pin, _i, _Object$keys, cid;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              /** @type {any[]} */\n              paths = [];\n              if (options.paths) {\n                paths = Array.isArray(options.paths) ? options.paths : [options.paths];\n              }\n              _context.next = 4;\n              return _awaitAsyncGenerator(api.post('pin/ls', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({}, options), {}, {\n                  arg: paths.map(function (path) {\n                    return \"\".concat(path);\n                  }),\n                  stream: true\n                })),\n                headers: options.headers\n              }));\n            case 4:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 7;\n              _iterator = _asyncIterator(res.ndjson());\n            case 9:\n              _context.next = 11;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 11:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 28;\n                break;\n              }\n              pin = _step.value;\n              if (!pin.Keys) {\n                _context.next = 23;\n                break;\n              }\n              _i = 0, _Object$keys = Object.keys(pin.Keys);\n            case 15:\n              if (!(_i < _Object$keys.length)) {\n                _context.next = 22;\n                break;\n              }\n              cid = _Object$keys[_i];\n              _context.next = 19;\n              return toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata);\n            case 19:\n              _i++;\n              _context.next = 15;\n              break;\n            case 22:\n              return _context.abrupt(\"return\");\n            case 23:\n              _context.next = 25;\n              return toPin(pin.Type, pin.Cid, pin.Metadata);\n            case 25:\n              _iteratorAbruptCompletion = false;\n              _context.next = 9;\n              break;\n            case 28:\n              _context.next = 34;\n              break;\n            case 30:\n              _context.prev = 30;\n              _context.t0 = _context[\"catch\"](7);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n            case 34:\n              _context.prev = 34;\n              _context.prev = 35;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 39;\n                break;\n              }\n              _context.next = 39;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 39:\n              _context.prev = 39;\n              if (!_didIteratorError) {\n                _context.next = 42;\n                break;\n              }\n              throw _iteratorError;\n            case 42:\n              return _context.finish(39);\n            case 43:\n              return _context.finish(34);\n            case 44:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[7, 30, 34, 44], [35,, 39, 43]]);\n      })();\n    });\n    return _ls.apply(this, arguments);\n  }\n  return ls;\n});","map":{"version":3,"names":["require","CID","configure","toUrlSearchParams","toPin","type","cid","metadata","pin","parse","module","exports","api","ls","options","paths","Array","isArray","post","signal","searchParams","arg","map","path","stream","headers","res","ndjson","Keys","Object","keys","Type","Metadata","Cid"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/ipfs-http-client/src/pin/ls.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {string} type\n * @param {string} cid\n * @param {Record<string, string>} metadata\n */\nfunction toPin (type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  const pin = {\n    type,\n    cid: CID.parse(cid)\n  }\n\n  if (metadata) {\n    pin.metadata = metadata\n  }\n\n  return pin\n}\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"ls\"]}\n   */\n  async function * ls (options = {}) {\n    /** @type {any[]} */\n    let paths = []\n\n    if (options.paths) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths]\n    }\n\n    const res = await api.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        arg: paths.map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) { // non-streaming response\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata)\n        }\n        return\n      }\n\n      yield toPin(pin.Type, pin.Cid, pin.Metadata)\n    }\n  }\n  return ls\n})\n"],"mappings":"AAAA,YAAY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEZ,eAAgBA,OAAO,CAAC,kBAAkB,CAAC;EAAnCC,GAAG,YAAHA,GAAG;AACX,IAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAC7C,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASI,KAAK,CAAEC,IAAI,EAAEC,GAAG,EAAEC,QAAQ,EAAE;EACnC;EACA,IAAMC,GAAG,GAAG;IACVH,IAAI,EAAJA,IAAI;IACJC,GAAG,EAAEL,GAAG,CAACQ,KAAK,CAACH,GAAG;EACpB,CAAC;EAED,IAAIC,QAAQ,EAAE;IACZC,GAAG,CAACD,QAAQ,GAAGA,QAAQ;EACzB;EAEA,OAAOC,GAAG;AACZ;AAEAE,MAAM,CAACC,OAAO,GAAGT,SAAS,CAAC,UAAAU,GAAG,EAAI;EAChC;AACF;AACA;EAFE,SAGiBC,EAAE;IAAA;EAAA;EAAA;IAAA,0BAAnB;MAAA,IAAqBC,OAAO,uEAAG,CAAC,CAAC;MAAA;QAAA;QAAA;UAAA;YAAA;cAC/B;cACIC,KAAK,GAAG,EAAE;cAEd,IAAID,OAAO,CAACC,KAAK,EAAE;gBACjBA,KAAK,GAAGC,KAAK,CAACC,OAAO,CAACH,OAAO,CAACC,KAAK,CAAC,GAAGD,OAAO,CAACC,KAAK,GAAG,CAACD,OAAO,CAACC,KAAK,CAAC;cACxE;cAAC;cAAA,4BAEiBH,GAAG,CAACM,IAAI,CAAC,QAAQ,EAAE;gBACnCC,MAAM,EAAEL,OAAO,CAACK,MAAM;gBACtBC,YAAY,EAAEjB,iBAAiB,iCAC1BW,OAAO;kBACVO,GAAG,EAAEN,KAAK,CAACO,GAAG,CAAC,UAAAC,IAAI;oBAAA,iBAAOA,IAAI;kBAAA,CAAE,CAAC;kBACjCC,MAAM,EAAE;gBAAI,GACZ;gBACFC,OAAO,EAAEX,OAAO,CAACW;cACnB,CAAC,CAAC;YAAA;cARIC,GAAG;cAAA;cAAA;cAAA;cAAA,2BAUeA,GAAG,CAACC,MAAM,EAAE;YAAA;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAAnBnB,GAAG;cAAA,KACdA,GAAG,CAACoB,IAAI;gBAAA;gBAAA;cAAA;cAAA,uBACQC,MAAM,CAACC,IAAI,CAACtB,GAAG,CAACoB,IAAI,CAAC;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAA5BtB,GAAG;cAAA;cACZ,OAAMF,KAAK,CAACI,GAAG,CAACoB,IAAI,CAACtB,GAAG,CAAC,CAACyB,IAAI,EAAEzB,GAAG,EAAEE,GAAG,CAACoB,IAAI,CAACtB,GAAG,CAAC,CAAC0B,QAAQ,CAAC;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;YAAA;cAAA;cAKhE,OAAM5B,KAAK,CAACI,GAAG,CAACuB,IAAI,EAAEvB,GAAG,CAACyB,GAAG,EAAEzB,GAAG,CAACwB,QAAQ,CAAC;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA;YAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAE/C;IAAA;EAAA;EACD,OAAOnB,EAAE;AACX,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}