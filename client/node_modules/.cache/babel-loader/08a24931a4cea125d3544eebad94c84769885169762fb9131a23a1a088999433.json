{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.batchMatMulConfig = void 0;\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.batchMatMulConfig = {\n  kernelName: tfjs_1.BatchMatMul,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var _a = args.inputs,\n      a = _a.a,\n      b = _a.b;\n    var backend = args.backend;\n    var _b = args.attrs,\n      transposeA = _b.transposeA,\n      transposeB = _b.transposeB;\n    var opAttrs = [(0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)('T', a.dtype), {\n      name: 'adj_x',\n      type: backend.binding.TF_ATTR_BOOL,\n      value: transposeA\n    }, {\n      name: 'adj_y',\n      type: backend.binding.TF_ATTR_BOOL,\n      value: transposeB\n    }];\n    // libtensorflow's BatchMatMulV2 op performs the same behavior as other tfjs\n    // backends' BatchMatMul (supports broadcasting), so a string literal is\n    // used here to point to libtensorflow's BatchMatMulV2 op, instead of using\n    // const `BatchMatMul` ('BatchMatMul') to resolve node-backend's special\n    // mapping.\n    return backend.executeSingleOutput('BatchMatMulV2', opAttrs, [a, b]);\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","batchMatMulConfig","tfjs_1","require","nodejs_kernel_backend_1","kernelName","BatchMatMul","backendName","kernelFunc","args","_a","inputs","a","b","backend","_b","attrs","transposeA","transposeB","opAttrs","createTensorsTypeOpAttr","dtype","name","type","binding","TF_ATTR_BOOL","executeSingleOutput"],"sources":["C:/Users/paete/CapstonPro/nftmusicProtoCopy/client/node_modules/@tensorflow/tfjs-node/dist/kernels/BatchMatMul.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.batchMatMulConfig = void 0;\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.batchMatMulConfig = {\n    kernelName: tfjs_1.BatchMatMul,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var _a = args.inputs, a = _a.a, b = _a.b;\n        var backend = args.backend;\n        var _b = args.attrs, transposeA = _b.transposeA, transposeB = _b.transposeB;\n        var opAttrs = [\n            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)('T', a.dtype),\n            { name: 'adj_x', type: backend.binding.TF_ATTR_BOOL, value: transposeA },\n            { name: 'adj_y', type: backend.binding.TF_ATTR_BOOL, value: transposeB }\n        ];\n        // libtensorflow's BatchMatMulV2 op performs the same behavior as other tfjs\n        // backends' BatchMatMul (supports broadcasting), so a string literal is\n        // used here to point to libtensorflow's BatchMatMulV2 op, instead of using\n        // const `BatchMatMul` ('BatchMatMul') to resolve node-backend's special\n        // mapping.\n        return backend.executeSingleOutput('BatchMatMulV2', opAttrs, [a, b]);\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,iBAAiB,GAAG,KAAK,CAAC;AAClC,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACxC,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AACjEJ,OAAO,CAACE,iBAAiB,GAAG;EACxBI,UAAU,EAAEH,MAAM,CAACI,WAAW;EAC9BC,WAAW,EAAE,YAAY;EACzBC,UAAU,EAAE,UAAUC,IAAI,EAAE;IACxB,IAAIC,EAAE,GAAGD,IAAI,CAACE,MAAM;MAAEC,CAAC,GAAGF,EAAE,CAACE,CAAC;MAAEC,CAAC,GAAGH,EAAE,CAACG,CAAC;IACxC,IAAIC,OAAO,GAAGL,IAAI,CAACK,OAAO;IAC1B,IAAIC,EAAE,GAAGN,IAAI,CAACO,KAAK;MAAEC,UAAU,GAAGF,EAAE,CAACE,UAAU;MAAEC,UAAU,GAAGH,EAAE,CAACG,UAAU;IAC3E,IAAIC,OAAO,GAAG,CACV,CAAC,CAAC,EAAEf,uBAAuB,CAACgB,uBAAuB,EAAE,GAAG,EAAER,CAAC,CAACS,KAAK,CAAC,EAClE;MAAEC,IAAI,EAAE,OAAO;MAAEC,IAAI,EAAET,OAAO,CAACU,OAAO,CAACC,YAAY;MAAEzB,KAAK,EAAEiB;IAAW,CAAC,EACxE;MAAEK,IAAI,EAAE,OAAO;MAAEC,IAAI,EAAET,OAAO,CAACU,OAAO,CAACC,YAAY;MAAEzB,KAAK,EAAEkB;IAAW,CAAC,CAC3E;IACD;IACA;IACA;IACA;IACA;IACA,OAAOJ,OAAO,CAACY,mBAAmB,CAAC,eAAe,EAAEP,OAAO,EAAE,CAACP,CAAC,EAAEC,CAAC,CAAC,CAAC;EACxE;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}