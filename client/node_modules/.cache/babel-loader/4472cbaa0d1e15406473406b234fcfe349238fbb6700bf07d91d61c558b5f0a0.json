{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _require = require('multiformats/cid'),\n  CID = _require.CID;\nvar configure = require('../lib/configure');\nvar toUrlSearchParams = require('../lib/to-url-search-params');\nvar _require2 = require('uint8arrays/from-string'),\n  uint8ArrayFromString = _require2.fromString;\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  function get(_x) {\n    return _get.apply(this, arguments);\n  }\n  function _get() {\n    _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid) {\n      var options,\n        res,\n        data,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            _context.next = 3;\n            return api.post('object/get', {\n              signal: options.signal,\n              searchParams: toUrlSearchParams(_objectSpread({\n                arg: \"\".concat(cid instanceof Uint8Array ? CID.decode(cid) : cid),\n                dataEncoding: 'base64'\n              }, options)),\n              headers: options.headers\n            });\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.json();\n          case 6:\n            data = _context.sent;\n            return _context.abrupt(\"return\", {\n              Data: uint8ArrayFromString(data.Data, 'base64pad'),\n              Links: (data.Links || []).map(function ( /** @type {any} */link) {\n                return {\n                  Name: link.Name,\n                  Hash: CID.parse(link.Hash),\n                  Tsize: link.Size\n                };\n              })\n            });\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _get.apply(this, arguments);\n  }\n  return get;\n});","map":{"version":3,"names":["require","CID","configure","toUrlSearchParams","uint8ArrayFromString","fromString","module","exports","api","get","cid","options","post","signal","searchParams","arg","Uint8Array","decode","dataEncoding","headers","res","json","data","Data","Links","map","link","Name","Hash","parse","Tsize","Size"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/ipfs-http-client/src/object/get.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('object/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      Data: uint8ArrayFromString(data.Data, 'base64pad'),\n      Links: (data.Links || []).map((/** @type {any} */ link) => ({\n        Name: link.Name,\n        Hash: CID.parse(link.Hash),\n        Tsize: link.Size\n      }))\n    }\n  }\n  return get\n})\n"],"mappings":"AAAA,YAAY;;AAAA;AAAA;AAAA;AAEZ,eAAgBA,OAAO,CAAC,kBAAkB,CAAC;EAAnCC,GAAG,YAAHA,GAAG;AACX,IAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAC7C,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAA6B,CAAC;AAChE,gBAA6CA,OAAO,CAAC,yBAAyB,CAAC;EAA3DI,oBAAoB,aAAhCC,UAAU;;AAElB;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAGL,SAAS,CAAC,UAAAM,GAAG,EAAI;EAChC;AACF;AACA;EAFE,SAGeC,GAAG;IAAA;EAAA;EAAA;IAAA,kEAAlB,iBAAoBC,GAAG;MAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAEC,OAAO,2DAAG,CAAC,CAAC;YAAA;YAAA,OACjBH,GAAG,CAACI,IAAI,CAAC,YAAY,EAAE;cACvCC,MAAM,EAAEF,OAAO,CAACE,MAAM;cACtBC,YAAY,EAAEX,iBAAiB;gBAC7BY,GAAG,YAAKL,GAAG,YAAYM,UAAU,GAAGf,GAAG,CAACgB,MAAM,CAACP,GAAG,CAAC,GAAGA,GAAG,CAAE;gBAC3DQ,YAAY,EAAE;cAAQ,GACnBP,OAAO,EACV;cACFQ,OAAO,EAAER,OAAO,CAACQ;YACnB,CAAC,CAAC;UAAA;YARIC,GAAG;YAAA;YAAA,OASUA,GAAG,CAACC,IAAI,EAAE;UAAA;YAAvBC,IAAI;YAAA,iCAEH;cACLC,IAAI,EAAEnB,oBAAoB,CAACkB,IAAI,CAACC,IAAI,EAAE,WAAW,CAAC;cAClDC,KAAK,EAAE,CAACF,IAAI,CAACE,KAAK,IAAI,EAAE,EAAEC,GAAG,CAAC,WAAC,kBAAmBC,IAAI;gBAAA,OAAM;kBAC1DC,IAAI,EAAED,IAAI,CAACC,IAAI;kBACfC,IAAI,EAAE3B,GAAG,CAAC4B,KAAK,CAACH,IAAI,CAACE,IAAI,CAAC;kBAC1BE,KAAK,EAAEJ,IAAI,CAACK;gBACd,CAAC;cAAA,CAAC;YACJ,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACF;IAAA;EAAA;EACD,OAAOtB,GAAG;AACZ,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}