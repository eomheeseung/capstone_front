{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\nconst Client = require('../../lib/core');\nconst Service = require('./service');\nconst toUrlSearchParams = require('../../lib/to-url-search-params');\n\n/**\n * @typedef {import('../../types').Options} Options\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\nclass Remote {\n  /**\n   * @param {Options} options\n   */\n  constructor(options) {\n    this.client = new Client(options);\n    /** @readonly */\n    this.service = new Service(options);\n  }\n}\n\n/**\n * @type {RemotePiningAPI[\"add\"]}\n */\nRemote.prototype.add = async function add(cid, _ref) {\n  let {\n    timeout,\n    signal,\n    headers,\n    ...query\n  } = _ref;\n  const response = await this.client.post('pin/remote/add', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeAddParams({\n      cid,\n      ...query\n    })\n  });\n  return decodePin(await response.json());\n};\n\n/**\n * @type {RemotePiningAPI[\"ls\"]}\n */\nRemote.prototype.ls = function ls(_ref2) {\n  try {\n    var _this = this;\n    let {\n      timeout,\n      signal,\n      headers,\n      ...query\n    } = _ref2;\n    return async function* () {\n      const response = await _this.client.post('pin/remote/ls', {\n        timeout,\n        signal,\n        headers,\n        searchParams: encodeQuery(query)\n      });\n      for await (const pin of response.ndjson()) {\n        yield decodePin(pin);\n      }\n    }();\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\n/**\n * @type {RemotePiningAPI[\"rm\"]}\n */\nRemote.prototype.rm = async function rm(_ref3) {\n  let {\n    timeout,\n    signal,\n    headers,\n    ...query\n  } = _ref3;\n  await this.client.post('pin/remote/rm', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeQuery({\n      ...query,\n      all: false\n    })\n  });\n};\n\n/**\n * @type {RemotePiningAPI[\"rmAll\"]}\n */\nRemote.prototype.rmAll = async function (_ref4) {\n  let {\n    timeout,\n    signal,\n    headers,\n    ...query\n  } = _ref4;\n  await this.client.post('pin/remote/rm', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeQuery({\n      ...query,\n      all: true\n    })\n  });\n};\n\n/**\n * @param {Object} json\n * @param {string} json.Name\n * @param {string} json.Cid\n * @param {Status} json.Status\n * @returns {Pin}\n */\nconst decodePin = _ref5 => {\n  let {\n    Name: name,\n    Status: status,\n    Cid: cid\n  } = _ref5;\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  };\n};\n\n/**\n * @param {any} service\n * @returns {string}\n */\nconst encodeService = service => {\n  if (typeof service === 'string' && service !== '') {\n    return service;\n  } else {\n    throw new TypeError('service name must be passed');\n  }\n};\n\n/**\n * @param {any} cid\n * @returns {string}\n */\nconst encodeCID = cid => {\n  if (CID.asCID(cid)) {\n    return cid.toString();\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid}`);\n  }\n};\n\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\nconst encodeQuery = _ref6 => {\n  let {\n    service,\n    cid,\n    name,\n    status,\n    all\n  } = _ref6;\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  });\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value));\n    }\n  }\n  if (status) {\n    for (const value of status) {\n      query.append('status', value);\n    }\n  }\n  return query;\n};\n\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\nconst encodeAddParams = _ref7 => {\n  let {\n    cid,\n    service,\n    background,\n    name,\n    origins\n  } = _ref7;\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  });\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString());\n    }\n  }\n  return params;\n};\nmodule.exports = Remote;","map":{"version":3,"names":["CID","require","Client","Service","toUrlSearchParams","Remote","constructor","options","client","service","prototype","add","cid","timeout","signal","headers","query","response","post","searchParams","encodeAddParams","decodePin","json","ls","encodeQuery","pin","ndjson","rm","all","rmAll","Name","name","Status","status","Cid","parse","encodeService","TypeError","encodeCID","asCID","toString","force","undefined","value","append","background","origins","params","arg","origin","module","exports"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/ipfs-http-client/src/pin/remote/index.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst Client = require('../../lib/core')\nconst Service = require('./service')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\n\n/**\n * @typedef {import('../../types').Options} Options\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\nclass Remote {\n  /**\n   * @param {Options} options\n   */\n  constructor (options) {\n    this.client = new Client(options)\n    /** @readonly */\n    this.service = new Service(options)\n  }\n}\n\n/**\n * @type {RemotePiningAPI[\"add\"]}\n */\nRemote.prototype.add = async function add (cid, { timeout, signal, headers, ...query }) {\n  const response = await this.client.post('pin/remote/add', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeAddParams({ cid, ...query })\n  })\n\n  return decodePin(await response.json())\n}\n\n/**\n * @type {RemotePiningAPI[\"ls\"]}\n */\nRemote.prototype.ls = async function * ls ({ timeout, signal, headers, ...query }) {\n  const response = await this.client.post('pin/remote/ls', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeQuery(query)\n  })\n\n  for await (const pin of response.ndjson()) {\n    yield decodePin(pin)\n  }\n}\n\n/**\n * @type {RemotePiningAPI[\"rm\"]}\n */\nRemote.prototype.rm = async function rm ({ timeout, signal, headers, ...query }) {\n  await this.client.post('pin/remote/rm', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeQuery({\n      ...query,\n      all: false\n    })\n  })\n}\n\n/**\n * @type {RemotePiningAPI[\"rmAll\"]}\n */\nRemote.prototype.rmAll = async function ({ timeout, signal, headers, ...query }) {\n  await this.client.post('pin/remote/rm', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeQuery({\n      ...query,\n      all: true\n    })\n  })\n}\n\n/**\n * @param {Object} json\n * @param {string} json.Name\n * @param {string} json.Cid\n * @param {Status} json.Status\n * @returns {Pin}\n */\nconst decodePin = ({ Name: name, Status: status, Cid: cid }) => {\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  }\n}\n\n/**\n * @param {any} service\n * @returns {string}\n */\nconst encodeService = (service) => {\n  if (typeof service === 'string' && service !== '') {\n    return service\n  } else {\n    throw new TypeError('service name must be passed')\n  }\n}\n\n/**\n * @param {any} cid\n * @returns {string}\n */\nconst encodeCID = (cid) => {\n  if (CID.asCID(cid)) {\n    return cid.toString()\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid}`)\n  }\n}\n\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\nconst encodeQuery = ({ service, cid, name, status, all }) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  })\n\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value))\n    }\n  }\n\n  if (status) {\n    for (const value of status) {\n      query.append('status', value)\n    }\n  }\n\n  return query\n}\n\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\nconst encodeAddParams = ({ cid, service, background, name, origins }) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  })\n\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString())\n    }\n  }\n\n  return params\n}\n\nmodule.exports = Remote\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}