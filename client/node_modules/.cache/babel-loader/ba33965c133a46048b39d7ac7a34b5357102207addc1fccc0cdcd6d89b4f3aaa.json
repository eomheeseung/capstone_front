{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\paete\\\\Prototype\\\\nftmusicProtoCopy\\\\client\\\\src\\\\contexts\\\\EthContext\\\\EthProvider.jsx\",\n  _s = $RefreshSig$();\nimport React, { useReducer, useCallback, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\nimport WalletConnectProvdier from \"@walletconnect/web3-provider\";\nimport { infuraProvider } from 'wagmi/providers/infura';\nimport { Web3Button } from \"@web3modal/react\";\nimport { EthereumClient, modalConnectors, walletConnectProvider } from \"@web3modal/ethereum\";\nimport { Web3Modal } from \"@web3modal/react\";\nimport { configureChains, createClient, WagmiConfig } from \"wagmi\";\nimport { arbitrum, mainnet, polygon } from \"wagmi/chains\";\nimport { EthereumProvider } from \"@walletconnect/ethereum-provider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar newjson = [];\nvar imgjson = [];\nexport function EthProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [proset, setProvider] = useState(false);\n  const chains = [arbitrum, mainnet, polygon];\n\n  //Wagmi client\n  // const { provider } = configureChains(chains,[infuraProvider({ apiKey:'ff2d998f9cdf4be29197ce3ffb727d89' })], [\n  //   walletConnectProvider({ projectId: \"251542da3c8552393e55d6d3b636127e\" }),\n  // ]);\n  // const wagmiClient = createClient({\n  //   autoConnect: true,\n  //   connectors: modalConnectors({\n  //     projectId: \"251542da3c8552393e55d6d3b636127e\",\n  //     version: \"1\", // or \"2\"\n  //     appName: \"web3Modal\",\n  //     chains,\n  //   }),\n  //   provider,\n  // });\n\n  // Web3Modal Ethereum Client\n  // const ethereumClient = new EthereumClient(wagmiClient, chains);\n\n  //  const provider = new WalletConnectProvdier({\n\n  //   rpc: {\n  //     5:'https://goerli.infura.io/v3/ff2d998f9cdf4be29197ce3ffb727d89'\n\n  //   },\n  //   infuraId: \"ff2d998f9cdf4be29197ce3ffb727d89\",\n\n  //  qrcodeModalOptions: {\n  //    desktopLinks: [\n  //      'ledger',\n  //      'tokenary',\n  //      'wallet',\n  //      'wallet 3',\n  //      'secuX',\n  //      'ambire',\n  //      'wallet3',\n  //      'apolloX',\n  //      'zerion',\n  //      'sequence',\n  //      'punkWallet',\n  //      'kryptoGO',\n  //      'nft',\n  //      'riceWallet',\n  //      'vision',\n  //      'keyring'\n  //    ],\n  //    mobileLinks: [\n  //      \"rainbow\",\n  //      \"metamask\",\n  //      \"argent\",\n  //      \"trust\",\n  //      \"imtoken\",\n  //      \"pillar\",\n\n  //    ],}});\n\n  const init = useCallback(async artifact => {\n    if (artifact) {\n      // const web3 = new Web3(Web3.givenProvider || \"ws://127.0.0.1:7545\");\n\n      // await provider.disconnect();            \n      // await provider.enable();\n      const projectid = \"251542da3c8552393e55d6d3b636127e\";\n      const rpcmap = \"https://goerli.infura.io/v3/ff2d998f9cdf4be29197ce3ffb727d89\";\n      const provider = await EthereumProvider.init({\n        projectId: projectid,\n        // REQUIRED your projectId\n        chains: 5,\n        // REQUIRED chain ids\n        rpcMap: rpcmap\n      });\n      await provider.enable();\n      console.log(provider);\n      const web3 = new Web3(provider);\n\n      // const web3 = new Web3(Web3.givenProvider || \"ws://goerli.infura.io/v3/ff2d998f9cdf4be29197ce3ffb727d89\");\n      const accounts = await web3.eth.getAccounts();\n      const networkID = await web3.eth.net.getId();\n      const {\n        abi\n      } = artifact;\n      let address, contract;\n      try {\n        address = artifact.networks[networkID].address;\n        contract = new web3.eth.Contract(abi, address);\n      } catch (err) {\n        console.error(err);\n        console.log(\"에러위치\");\n      }\n      dispatch({\n        type: actions.init,\n        data: {\n          artifact,\n          web3,\n          accounts,\n          networkID,\n          contract,\n          newjson,\n          provider\n        }\n      });\n    }\n  }, []);\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifact = require(\"../../contracts/ArtGrowNFT.json\");\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    tryInit();\n  }, [init]);\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n    const handleChange = () => {\n      init(state.artifact);\n    };\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init, state.artifact]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EthContext.Provider, {\n      value: {\n        state,\n        dispatch\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 6\n  }, this);\n}\n_s(EthProvider, \"zAynNKLG8PA4TBxKYif2YtVwKQ0=\");\n_c = EthProvider;\nexport default EthProvider;\nvar _c;\n$RefreshReg$(_c, \"EthProvider\");","map":{"version":3,"names":["React","useReducer","useCallback","useEffect","useState","Web3","EthContext","reducer","actions","initialState","WalletConnectProvdier","infuraProvider","Web3Button","EthereumClient","modalConnectors","walletConnectProvider","Web3Modal","configureChains","createClient","WagmiConfig","arbitrum","mainnet","polygon","EthereumProvider","newjson","imgjson","EthProvider","children","state","dispatch","proset","setProvider","chains","init","artifact","projectid","rpcmap","provider","projectId","rpcMap","enable","console","log","web3","accounts","eth","getAccounts","networkID","net","getId","abi","address","contract","networks","Contract","err","error","type","data","tryInit","require","events","handleChange","forEach","e","window","ethereum","on","removeListener"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/src/contexts/EthContext/EthProvider.jsx"],"sourcesContent":["import React, { useReducer, useCallback, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\nimport WalletConnectProvdier from \"@walletconnect/web3-provider\";\nimport { infuraProvider } from 'wagmi/providers/infura'\nimport { Web3Button } from \"@web3modal/react\";\n\nimport {\n  EthereumClient,\n  modalConnectors,\n  walletConnectProvider,\n} from \"@web3modal/ethereum\";\n\nimport { Web3Modal } from \"@web3modal/react\";\n\nimport { configureChains, createClient, WagmiConfig } from \"wagmi\";\n\nimport { arbitrum, mainnet, polygon } from \"wagmi/chains\";\nimport { EthereumProvider } from \"@walletconnect/ethereum-provider\";\nvar newjson=[]\nvar imgjson=[];\n\n\nexport  function EthProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [proset,setProvider]=useState(false);\n  const chains = [arbitrum, mainnet, polygon];\n\n//Wagmi client\n// const { provider } = configureChains(chains,[infuraProvider({ apiKey:'ff2d998f9cdf4be29197ce3ffb727d89' })], [\n//   walletConnectProvider({ projectId: \"251542da3c8552393e55d6d3b636127e\" }),\n// ]);\n// const wagmiClient = createClient({\n//   autoConnect: true,\n//   connectors: modalConnectors({\n//     projectId: \"251542da3c8552393e55d6d3b636127e\",\n//     version: \"1\", // or \"2\"\n//     appName: \"web3Modal\",\n//     chains,\n//   }),\n//   provider,\n// });\n\n// Web3Modal Ethereum Client\n// const ethereumClient = new EthereumClient(wagmiClient, chains);\n\n     \n//  const provider = new WalletConnectProvdier({\n  \n//   rpc: {\n//     5:'https://goerli.infura.io/v3/ff2d998f9cdf4be29197ce3ffb727d89'\n    \n//   },\n//   infuraId: \"ff2d998f9cdf4be29197ce3ffb727d89\",\n  \n \n//  qrcodeModalOptions: {\n//    desktopLinks: [\n//      'ledger',\n//      'tokenary',\n//      'wallet',\n//      'wallet 3',\n//      'secuX',\n//      'ambire',\n//      'wallet3',\n//      'apolloX',\n//      'zerion',\n//      'sequence',\n//      'punkWallet',\n//      'kryptoGO',\n//      'nft',\n//      'riceWallet',\n//      'vision',\n//      'keyring'\n//    ],\n//    mobileLinks: [\n//      \"rainbow\",\n//      \"metamask\",\n//      \"argent\",\n//      \"trust\",\n//      \"imtoken\",\n//      \"pillar\",\n     \n//    ],}});\n\n\n  const init = useCallback(\n    async artifact => {\n      \n      if (artifact) {   \n        // const web3 = new Web3(Web3.givenProvider || \"ws://127.0.0.1:7545\");\n            \n  // await provider.disconnect();            \n  // await provider.enable();\n  const projectid=\"251542da3c8552393e55d6d3b636127e\";\n  const rpcmap=\"https://goerli.infura.io/v3/ff2d998f9cdf4be29197ce3ffb727d89\"\n  const provider = await EthereumProvider.init({\n\n    projectId:projectid, // REQUIRED your projectId\n    chains:5, // REQUIRED chain ids\n    rpcMap:rpcmap,\n  });  \nawait provider.enable();\nconsole.log(provider);\nconst web3 = new Web3(provider);\n\n \n        \n        // const web3 = new Web3(Web3.givenProvider || \"ws://goerli.infura.io/v3/ff2d998f9cdf4be29197ce3ffb727d89\");\n        const accounts = await web3.eth.getAccounts();\n        const networkID = await web3.eth.net.getId();\n       \n        const { abi } = artifact;\n        let address, contract;\n        try {\n          address = artifact.networks[networkID].address;\n          contract = new web3.eth.Contract(abi, address);   \n          \n        } catch (err) {\n          console.error(err);\n          console.log(\"에러위치\");\n        }\n        dispatch({\n          type: actions.init,\n          data: { artifact, web3, accounts, networkID, contract,newjson,provider}\n        });\n      }\n    }, []);\n\n  \n \n    \n   \n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifact = require(\"../../contracts/ArtGrowNFT.json\");\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    tryInit();\n  }, [init]);\n\n  \n\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n    const handleChange = () => {\n      init(state.artifact);\n\n    };\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init,state.artifact]);\n\n  \n \n  \n\n  return (\n    \n     <React.Fragment>\n       <EthContext.Provider value={{\n      state,\n      dispatch\n    }}>\n      \n      {children}\n  \n    </EthContext.Provider>\n   \n     </React.Fragment>\n\n\n  );\n}\n\n\nexport default EthProvider;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}