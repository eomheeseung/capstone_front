{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _awaitAsyncGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\nvar _wrapAsyncGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\nvar _asyncIterator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\nvar configure = require('../lib/configure');\nvar toUrlSearchParams = require('../lib/to-url-search-params');\nvar abortSignal = require('../lib/abort-signal');\nvar multipartRequest = require('../lib/multipart-request');\nvar _require = require('native-abort-controller'),\n  AbortController = _require.AbortController;\nvar _require2 = require('multiformats/cid'),\n  CID = _require2.CID;\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  function dagImport(_x) {\n    return _dagImport.apply(this, arguments);\n  }\n  function _dagImport() {\n    _dagImport = _wrapAsyncGenerator(function (source) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var controller, signal, _yield$_awaitAsyncGen, headers, body, res, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, Root, Cid, PinErrorMsg;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.next = 4;\n              return _awaitAsyncGenerator(multipartRequest(source, controller, options.headers));\n            case 4:\n              _yield$_awaitAsyncGen = _context.sent;\n              headers = _yield$_awaitAsyncGen.headers;\n              body = _yield$_awaitAsyncGen.body;\n              _context.next = 9;\n              return _awaitAsyncGenerator(api.post('dag/import', {\n                signal: signal,\n                headers: headers,\n                body: body,\n                searchParams: toUrlSearchParams({\n                  'pin-roots': options.pinRoots\n                })\n              }));\n            case 9:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 12;\n              _iterator = _asyncIterator(res.ndjson());\n            case 14:\n              _context.next = 16;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 16:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 25;\n                break;\n              }\n              Root = _step.value.Root;\n              if (!(Root !== undefined)) {\n                _context.next = 22;\n                break;\n              }\n              Cid = Root.Cid['/'], PinErrorMsg = Root.PinErrorMsg;\n              _context.next = 22;\n              return {\n                root: {\n                  cid: CID.parse(Cid),\n                  pinErrorMsg: PinErrorMsg\n                }\n              };\n            case 22:\n              _iteratorAbruptCompletion = false;\n              _context.next = 14;\n              break;\n            case 25:\n              _context.next = 31;\n              break;\n            case 27:\n              _context.prev = 27;\n              _context.t0 = _context[\"catch\"](12);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n            case 31:\n              _context.prev = 31;\n              _context.prev = 32;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 36;\n                break;\n              }\n              _context.next = 36;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 36:\n              _context.prev = 36;\n              if (!_didIteratorError) {\n                _context.next = 39;\n                break;\n              }\n              throw _iteratorError;\n            case 39:\n              return _context.finish(36);\n            case 40:\n              return _context.finish(31);\n            case 41:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[12, 27, 31, 41], [32,, 36, 40]]);\n      })();\n    });\n    return _dagImport.apply(this, arguments);\n  }\n  return dagImport;\n});","map":{"version":3,"names":["configure","require","toUrlSearchParams","abortSignal","multipartRequest","AbortController","CID","module","exports","api","dagImport","source","options","controller","signal","headers","body","post","searchParams","pinRoots","res","ndjson","Root","undefined","Cid","PinErrorMsg","root","cid","parse","pinErrorMsg"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/ipfs-http-client/src/dag/import.js"],"sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst multipartRequest = require('../lib/multipart-request')\nconst { AbortController } = require('native-abort-controller')\nconst { CID } = require('multiformats/cid')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  async function * dagImport (source, options = {}) {\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body } = await multipartRequest(source, controller, options.headers)\n\n    const res = await api.post('dag/import', {\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams({ 'pin-roots': options.pinRoots })\n    })\n\n    for await (const { Root } of res.ndjson()) {\n      if (Root !== undefined) {\n        const { Cid: { '/': Cid }, PinErrorMsg } = Root\n\n        yield {\n          root: {\n            cid: CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        }\n      }\n    }\n  }\n\n  return dagImport\n})\n"],"mappings":"AAAA,YAAY;;AAAA;AAAA;AAAA;AAAA;AAEZ,IAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC7C,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAA6B,CAAC;AAChE,IAAME,WAAW,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AAClD,IAAMG,gBAAgB,GAAGH,OAAO,CAAC,0BAA0B,CAAC;AAC5D,eAA4BA,OAAO,CAAC,yBAAyB,CAAC;EAAtDI,eAAe,YAAfA,eAAe;AACvB,gBAAgBJ,OAAO,CAAC,kBAAkB,CAAC;EAAnCK,GAAG,aAAHA,GAAG;;AAEX;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAGR,SAAS,CAAC,UAAAS,GAAG,EAAI;EAChC;AACF;AACA;EAFE,SAGiBC,SAAS;IAAA;EAAA;EAAA;IAAA,iCAA1B,UAA4BC,MAAM;MAAA,IAAEC,OAAO,uEAAG,CAAC,CAAC;MAAA;QAAA;QAAA;UAAA;YAAA;cACxCC,UAAU,GAAG,IAAIR,eAAe,EAAE;cAClCS,MAAM,GAAGX,WAAW,CAACU,UAAU,CAACC,MAAM,EAAEF,OAAO,CAACE,MAAM,CAAC;cAAA;cAAA,4BAC7BV,gBAAgB,CAACO,MAAM,EAAEE,UAAU,EAAED,OAAO,CAACG,OAAO,CAAC;YAAA;cAAA;cAA7EA,OAAO,yBAAPA,OAAO;cAAEC,IAAI,yBAAJA,IAAI;cAAA;cAAA,4BAEHP,GAAG,CAACQ,IAAI,CAAC,YAAY,EAAE;gBACvCH,MAAM,EAANA,MAAM;gBACNC,OAAO,EAAPA,OAAO;gBACPC,IAAI,EAAJA,IAAI;gBACJE,YAAY,EAAEhB,iBAAiB,CAAC;kBAAE,WAAW,EAAEU,OAAO,CAACO;gBAAS,CAAC;cACnE,CAAC,CAAC;YAAA;cALIC,GAAG;cAAA;cAAA;cAAA;cAAA,2BAOoBA,GAAG,CAACC,MAAM,EAAE;YAAA;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAAtBC,IAAI,eAAJA,IAAI;cAAA,MACjBA,IAAI,KAAKC,SAAS;gBAAA;gBAAA;cAAA;cACAC,GAAG,GAAoBF,IAAI,CAAvCE,GAAG,CAAI,GAAG,GAASC,WAAW,GAAKH,IAAI,CAApBG,WAAW;cAAA;cAEtC,OAAM;gBACJC,IAAI,EAAE;kBACJC,GAAG,EAAErB,GAAG,CAACsB,KAAK,CAACJ,GAAG,CAAC;kBACnBK,WAAW,EAAEJ;gBACf;cACF,CAAC;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA;YAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAGN;IAAA;EAAA;EAED,OAAOf,SAAS;AAClB,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}