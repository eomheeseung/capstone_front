{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _require = require('multiformats/cid'),\n  CID = _require.CID;\nvar multipartRequest = require('../../lib/multipart-request');\nvar configure = require('../../lib/configure');\nvar toUrlSearchParams = require('../../lib/to-url-search-params');\nvar abortSignal = require('../../lib/abort-signal');\nvar _require2 = require('native-abort-controller'),\n  AbortController = _require2.AbortController;\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {ObjectPatchAPI[\"setData\"]}\n   */\n  function setData(_x, _x2) {\n    return _setData.apply(this, arguments);\n  }\n  function _setData() {\n    _setData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid, data) {\n      var options,\n        controller,\n        signal,\n        res,\n        _yield$res$json,\n        Hash,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            // allow aborting requests on body errors\n            controller = new AbortController();\n            signal = abortSignal(controller.signal, options.signal);\n            _context.t0 = api;\n            _context.t1 = _objectSpread;\n            _context.t2 = {\n              signal: signal,\n              searchParams: toUrlSearchParams(_objectSpread({\n                arg: [\"\".concat(cid)]\n              }, options))\n            };\n            _context.next = 8;\n            return multipartRequest(data, controller, options.headers);\n          case 8:\n            _context.t3 = _context.sent;\n            _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n            _context.next = 12;\n            return _context.t0.post.call(_context.t0, 'object/patch/set-data', _context.t4);\n          case 12:\n            res = _context.sent;\n            _context.next = 15;\n            return res.json();\n          case 15:\n            _yield$res$json = _context.sent;\n            Hash = _yield$res$json.Hash;\n            return _context.abrupt(\"return\", CID.parse(Hash));\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _setData.apply(this, arguments);\n  }\n  return setData;\n});","map":{"version":3,"names":["require","CID","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","module","exports","api","setData","cid","data","options","controller","signal","searchParams","arg","headers","post","res","json","Hash","parse"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/ipfs-http-client/src/object/patch/set-data.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst multipartRequest = require('../../lib/multipart-request')\nconst configure = require('../../lib/configure')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\nconst abortSignal = require('../../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"setData\"]}\n   */\n  async function setData (cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('object/patch/set-data', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`\n        ],\n        ...options\n      }),\n      ...(\n        await multipartRequest(data, controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return setData\n})\n"],"mappings":"AAAA,YAAY;;AAAA;AAAA;AAAA;AAEZ,eAAgBA,OAAO,CAAC,kBAAkB,CAAC;EAAnCC,GAAG,YAAHA,GAAG;AACX,IAAMC,gBAAgB,GAAGF,OAAO,CAAC,6BAA6B,CAAC;AAC/D,IAAMG,SAAS,GAAGH,OAAO,CAAC,qBAAqB,CAAC;AAChD,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,gCAAgC,CAAC;AACnE,IAAMK,WAAW,GAAGL,OAAO,CAAC,wBAAwB,CAAC;AACrD,gBAA4BA,OAAO,CAAC,yBAAyB,CAAC;EAAtDM,eAAe,aAAfA,eAAe;;AAEvB;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAGL,SAAS,CAAC,UAAAM,GAAG,EAAI;EAChC;AACF;AACA;EAFE,SAGeC,OAAO;IAAA;EAAA;EAAA;IAAA,sEAAtB,iBAAwBC,GAAG,EAAEC,IAAI;MAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAEC,OAAO,2DAAG,CAAC,CAAC;YAC7C;YACMC,UAAU,GAAG,IAAIR,eAAe,EAAE;YAClCS,MAAM,GAAGV,WAAW,CAACS,UAAU,CAACC,MAAM,EAAEF,OAAO,CAACE,MAAM,CAAC;YAAA,cAE3CN,GAAG;YAAA;YAAA;cACnBM,MAAM,EAANA,MAAM;cACNC,YAAY,EAAEZ,iBAAiB;gBAC7Ba,GAAG,EAAE,WACAN,GAAG;cACP,GACEE,OAAO;YACV;YAAA;YAAA,OAEMX,gBAAgB,CAACU,IAAI,EAAEE,UAAU,EAAED,OAAO,CAACK,OAAO,CAAC;UAAA;YAAA;YAAA;YAAA;YAAA,mBATvCC,IAAI,mBAAC,uBAAuB;UAAA;YAA5CC,GAAG;YAAA;YAAA,OAacA,GAAG,CAACC,IAAI,EAAE;UAAA;YAAA;YAAzBC,IAAI,mBAAJA,IAAI;YAAA,iCAELrB,GAAG,CAACsB,KAAK,CAACD,IAAI,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACvB;IAAA;EAAA;EACD,OAAOZ,OAAO;AAChB,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}