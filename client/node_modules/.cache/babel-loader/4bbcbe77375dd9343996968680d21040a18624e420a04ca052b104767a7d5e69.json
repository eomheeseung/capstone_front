{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\paete\\\\CapstonPro\\\\nftmusicProtoCopy\\\\client\\\\src\\\\contexts\\\\EthContext\\\\EthProvider.jsx\",\n  _s = $RefreshSig$();\nimport React, { useReducer, useCallback, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\nimport WalletConnectProvdier from \"@walletconnect/web3-provider\";\nimport { infuraProvider } from 'wagmi/providers/infura';\nimport { Web3Button } from \"@web3modal/react\";\nimport { EthereumClient, modalConnectors, walletConnectProvider } from \"@web3modal/ethereum\";\nimport { Web3Modal } from \"@web3modal/react\";\nimport { configureChains, createClient, WagmiConfig } from \"wagmi\";\nimport { goerli } from \"wagmi\";\nimport * as canvas from 'canvas';\nimport * as faceapi from 'face-api.js';\n\n// patch nodejs environment, we need to provide an implementation of\n// HTMLCanvasElement and HTMLImageElement\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Canvas,\n  Image,\n  ImageData\n} = canvas;\nfaceapi.env.monkeyPatch({\n  Canvas,\n  Image,\n  ImageData\n});\nvar newjson = [];\nexport function EthProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const chains = [goerli];\n  const {\n    provider\n  } = configureChains(chains, [walletConnectProvider({\n    projectId: \"251542da3c8552393e55d6d3b636127e\"\n  })]);\n  const wagmiClient = createClient({\n    autoConnect: true,\n    connectors: modalConnectors({\n      projectId: \"251542da3c8552393e55d6d3b636127e\",\n      version: \"1\",\n      // or \"2\"\n      chains\n    }),\n    provider\n  });\n\n  // Web3Modal Ethereum Client\n  const ethereumClient = new EthereumClient(wagmiClient, chains);\n\n  //  const provider3 = new WalletConnectProvdier({\n\n  //   rpc: {\n  //     5:'https://goerli.infura.io/v3/ff2d998f9cdf4be29197ce3ffb727d89'\n\n  //   },\n  //   infuraId: \"ff2d998f9cdf4be29197ce3ffb727d89\",\n\n  //  qrcodeModalOptions: {\n  //    desktopLinks: [\n  //      'ledger',\n  //      'tokenary',\n  //      'wallet',\n  //      'wallet 3',\n  //      'secuX',\n  //      'ambire',\n  //      'wallet3',\n  //      'apolloX',\n  //      'zerion',\n  //      'sequence',\n  //      'punkWallet',\n  //      'kryptoGO',\n  //      'nft',\n  //      'riceWallet',\n  //      'vision',\n  //      'keyring'\n  //    ],\n  //    mobileLinks: [\n  //      \"rainbow\",\n  //      \"metamask\",\n  //      \"argent\",\n  //      \"trust\",\n  //      \"imtoken\",\n  //      \"pillar\",\n\n  //    ],}});\n\n  const init = useCallback(async artifact => {\n    if (artifact) {\n      // const web3 = new Web3(Web3.givenProvider || \"ws://127.0.0.1:7545\");\n\n      // await provider.disconnect();            \n      // await provider3.enable();\n\n      //  const web3 = new Web3(provider);\n\n      const web3 = new Web3(window.web3.currentProvider);\n      await window.web3.currentProvider.enable();\n      const inputss = document.getElementById('myImg');\n      console.log(inputss);\n      const results = await faceapi.detectSingleFace(inputss).withFaceLandmarks();\n      console.log(results);\n\n      // const web3 = new Web3(Web3.givenProvider || \"ws://goerli.infura.io/v3/ff2d998f9cdf4be29197ce3ffb727d89\");\n      const accounts = await web3.eth.getAccounts();\n      const networkID = await web3.eth.net.getId();\n      const {\n        abi\n      } = artifact;\n      let address, contract;\n      try {\n        address = artifact.networks[networkID].address;\n        contract = new web3.eth.Contract(abi, address);\n      } catch (err) {\n        console.error(err);\n        console.log(\"에러위치\");\n      }\n      dispatch({\n        type: actions.init,\n        data: {\n          artifact,\n          web3,\n          accounts,\n          networkID,\n          contract,\n          newjson,\n          provider\n        }\n      });\n    }\n  }, []);\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifact = require(\"../../contracts/ArtGrowNFT.json\");\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    tryInit();\n  }, [init]);\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n    const handleChange = () => {\n      init(state.artifact);\n    };\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init, state.artifact]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EthContext.Provider, {\n      value: {\n        state,\n        dispatch\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 6\n  }, this);\n}\n_s(EthProvider, \"hc888FM+IczqCNE4rWyvjI+TMdU=\");\n_c = EthProvider;\nexport default EthProvider;\nvar _c;\n$RefreshReg$(_c, \"EthProvider\");","map":{"version":3,"names":["React","useReducer","useCallback","useEffect","useState","Web3","EthContext","reducer","actions","initialState","WalletConnectProvdier","infuraProvider","Web3Button","EthereumClient","modalConnectors","walletConnectProvider","Web3Modal","configureChains","createClient","WagmiConfig","goerli","canvas","faceapi","Canvas","Image","ImageData","env","monkeyPatch","newjson","EthProvider","children","state","dispatch","chains","provider","projectId","wagmiClient","autoConnect","connectors","version","ethereumClient","init","artifact","web3","window","currentProvider","enable","inputss","document","getElementById","console","log","results","detectSingleFace","withFaceLandmarks","accounts","eth","getAccounts","networkID","net","getId","abi","address","contract","networks","Contract","err","error","type","data","tryInit","require","events","handleChange","forEach","e","ethereum","on","removeListener"],"sources":["C:/Users/paete/CapstonPro/nftmusicProtoCopy/client/src/contexts/EthContext/EthProvider.jsx"],"sourcesContent":["import React, { useReducer, useCallback, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\nimport WalletConnectProvdier from \"@walletconnect/web3-provider\";\nimport { infuraProvider } from 'wagmi/providers/infura'\nimport { Web3Button } from \"@web3modal/react\";\n\nimport {\n  EthereumClient,\n  modalConnectors,\n  walletConnectProvider,\n} from \"@web3modal/ethereum\";\n\nimport { Web3Modal } from \"@web3modal/react\";\nimport { configureChains, createClient, WagmiConfig } from \"wagmi\";\nimport { goerli } from \"wagmi\";\n\nimport * as canvas from 'canvas';\n\nimport * as faceapi from 'face-api.js';\n\n// patch nodejs environment, we need to provide an implementation of\n// HTMLCanvasElement and HTMLImageElement\nconst { Canvas, Image, ImageData } = canvas;\nfaceapi.env.monkeyPatch({ Canvas, Image, ImageData });\n\nvar newjson=[]\n\nexport  function EthProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const chains =[goerli];\n\nconst {provider} = configureChains(chains,[\n  walletConnectProvider({ projectId: \"251542da3c8552393e55d6d3b636127e\" }),\n]);\n\nconst wagmiClient = createClient({\n  autoConnect: true,\n  connectors: modalConnectors({\n    projectId: \"251542da3c8552393e55d6d3b636127e\",\n    version: \"1\", // or \"2\"\n    chains,\n  }),\n  provider,\n});\n\n// Web3Modal Ethereum Client\nconst ethereumClient = new EthereumClient(wagmiClient,chains);\n\n//  const provider3 = new WalletConnectProvdier({\n  \n//   rpc: {\n//     5:'https://goerli.infura.io/v3/ff2d998f9cdf4be29197ce3ffb727d89'\n    \n//   },\n//   infuraId: \"ff2d998f9cdf4be29197ce3ffb727d89\",\n  \n \n//  qrcodeModalOptions: {\n//    desktopLinks: [\n//      'ledger',\n//      'tokenary',\n//      'wallet',\n//      'wallet 3',\n//      'secuX',\n//      'ambire',\n//      'wallet3',\n//      'apolloX',\n//      'zerion',\n//      'sequence',\n//      'punkWallet',\n//      'kryptoGO',\n//      'nft',\n//      'riceWallet',\n//      'vision',\n//      'keyring'\n//    ],\n//    mobileLinks: [\n//      \"rainbow\",\n//      \"metamask\",\n//      \"argent\",\n//      \"trust\",\n//      \"imtoken\",\n//      \"pillar\",\n     \n//    ],}});\n\n\n\n  const init = useCallback(\n    async artifact => {\n      \n      if (artifact) {   \n        // const web3 = new Web3(Web3.givenProvider || \"ws://127.0.0.1:7545\");\n            \n  // await provider.disconnect();            \n  // await provider3.enable();\n  \n  //  const web3 = new Web3(provider);\n  \n  const web3 = new Web3(window.web3.currentProvider);\n  await window.web3.currentProvider.enable();\n\n  const inputss = document.getElementById('myImg')\n  console.log(inputss)\n    \n  const results = await faceapi.detectSingleFace(inputss).withFaceLandmarks()\nconsole.log(results)\n\n \n        \n        // const web3 = new Web3(Web3.givenProvider || \"ws://goerli.infura.io/v3/ff2d998f9cdf4be29197ce3ffb727d89\");\n        const accounts = await web3.eth.getAccounts();\n        const networkID = await web3.eth.net.getId();\n       \n        const { abi } = artifact;\n        let address, contract;\n        try {\n          address = artifact.networks[networkID].address;\n          contract = new web3.eth.Contract(abi, address);   \n          \n        } catch (err) {\n          console.error(err);\n          console.log(\"에러위치\");\n        }\n        dispatch({\n          type: actions.init,\n          data: { artifact, web3, accounts, networkID, contract,newjson,provider}\n        });\n      }\n    }, []);\n\n  \n\n    \n   \n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifact = require(\"../../contracts/ArtGrowNFT.json\");\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    tryInit();\n  }, [init]);\n\n  \n\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n    const handleChange = () => {\n      init(state.artifact);\n\n    };\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init,state.artifact]);\n\n  \n \n  \n\n  return (\n    \n     <React.Fragment>\n       <EthContext.Provider value={{\n      state,\n      dispatch\n    }}>\n      \n      {children}\n     \n  \n    </EthContext.Provider>\n    \n     </React.Fragment>\n\n\n  );\n}\n\n\nexport default EthProvider;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}