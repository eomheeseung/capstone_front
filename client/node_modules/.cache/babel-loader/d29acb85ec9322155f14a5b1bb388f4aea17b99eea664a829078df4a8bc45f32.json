{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _objectSpread = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _awaitAsyncGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\nvar _wrapAsyncGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\nvar _asyncIterator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\nvar _require = require('multiformats/cid'),\n  CID = _require.CID;\nvar toCamelWithMetadata = require('../lib/object-to-camel-with-metadata');\nvar configure = require('../lib/configure');\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\nmodule.exports = configure(function (api) {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  function ls(_x) {\n    return _ls.apply(this, arguments);\n  }\n  function _ls() {\n    _ls = _wrapAsyncGenerator(function (path) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var res, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, result, _iterator2, _step2, entry;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (path) {\n                _context.next = 2;\n                break;\n              }\n              throw new Error('ipfs.files.ls requires a path');\n            case 2:\n              _context.next = 4;\n              return _awaitAsyncGenerator(api.post('files/ls', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({\n                  arg: CID.asCID(path) ? \"/ipfs/\".concat(path) : path,\n                  // default long to true, diverges from go-ipfs where its false by default\n                  long: true\n                }, options), {}, {\n                  stream: true\n                })),\n                headers: options.headers\n              }));\n            case 4:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 7;\n              _iterator = _asyncIterator(res.ndjson());\n            case 9:\n              _context.next = 11;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 11:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 38;\n                break;\n              }\n              result = _step.value;\n              if (!('Entries' in result)) {\n                _context.next = 33;\n                break;\n              }\n              _iterator2 = _createForOfIteratorHelper(result.Entries || []);\n              _context.prev = 15;\n              _iterator2.s();\n            case 17:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 23;\n                break;\n              }\n              entry = _step2.value;\n              _context.next = 21;\n              return toCoreInterface(toCamelWithMetadata(entry));\n            case 21:\n              _context.next = 17;\n              break;\n            case 23:\n              _context.next = 28;\n              break;\n            case 25:\n              _context.prev = 25;\n              _context.t0 = _context[\"catch\"](15);\n              _iterator2.e(_context.t0);\n            case 28:\n              _context.prev = 28;\n              _iterator2.f();\n              return _context.finish(28);\n            case 31:\n              _context.next = 35;\n              break;\n            case 33:\n              _context.next = 35;\n              return toCoreInterface(toCamelWithMetadata(result));\n            case 35:\n              _iteratorAbruptCompletion = false;\n              _context.next = 9;\n              break;\n            case 38:\n              _context.next = 44;\n              break;\n            case 40:\n              _context.prev = 40;\n              _context.t1 = _context[\"catch\"](7);\n              _didIteratorError = true;\n              _iteratorError = _context.t1;\n            case 44:\n              _context.prev = 44;\n              _context.prev = 45;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 49;\n                break;\n              }\n              _context.next = 49;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 49:\n              _context.prev = 49;\n              if (!_didIteratorError) {\n                _context.next = 52;\n                break;\n              }\n              throw _iteratorError;\n            case 52:\n              return _context.finish(49);\n            case 53:\n              return _context.finish(44);\n            case 54:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[7, 40, 44, 54], [15, 25, 28, 31], [45,, 49, 53]]);\n      })();\n    });\n    return _ls.apply(this, arguments);\n  }\n  return ls;\n});\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface(entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash);\n  }\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}","map":{"version":3,"names":["require","CID","toCamelWithMetadata","configure","toUrlSearchParams","module","exports","api","ls","path","options","Error","post","signal","searchParams","arg","asCID","long","stream","headers","res","ndjson","result","Entries","entry","toCoreInterface","hash","cid","parse","type"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/ipfs-http-client/src/files/ls.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path')\n    }\n\n    const res = await api.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.asCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(toCamelWithMetadata(entry))\n        }\n      } else {\n        yield toCoreInterface(toCamelWithMetadata(result))\n      }\n    }\n  }\n  return ls\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash)\n  }\n\n  delete entry.hash\n\n  entry.type = entry.type === 1 ? 'directory' : 'file'\n\n  return entry\n}\n"],"mappings":"AAAA,YAAY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEZ,eAAgBA,OAAO,CAAC,kBAAkB,CAAC;EAAnCC,GAAG,YAAHA,GAAG;AACX,IAAMC,mBAAmB,GAAGF,OAAO,CAAC,sCAAsC,CAAC;AAC3E,IAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAkB,CAAC;AAC7C,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;AACAK,MAAM,CAACC,OAAO,GAAGH,SAAS,CAAC,UAAAI,GAAG,EAAI;EAChC;AACF;AACA;EAFE,SAGiBC,EAAE;IAAA;EAAA;EAAA;IAAA,0BAAnB,UAAqBC,IAAI;MAAA,IAAEC,OAAO,uEAAG,CAAC,CAAC;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA,IAChCD,IAAI;gBAAA;gBAAA;cAAA;cAAA,MACD,IAAIE,KAAK,CAAC,+BAA+B,CAAC;YAAA;cAAA;cAAA,4BAGhCJ,GAAG,CAACK,IAAI,CAAC,UAAU,EAAE;gBACrCC,MAAM,EAAEH,OAAO,CAACG,MAAM;gBACtBC,YAAY,EAAEV,iBAAiB;kBAC7BW,GAAG,EAAEd,GAAG,CAACe,KAAK,CAACP,IAAI,CAAC,mBAAYA,IAAI,IAAKA,IAAI;kBAC7C;kBACAQ,IAAI,EAAE;gBAAI,GACPP,OAAO;kBACVQ,MAAM,EAAE;gBAAI,GACZ;gBACFC,OAAO,EAAET,OAAO,CAACS;cACnB,CAAC,CAAC;YAAA;cAVIC,GAAG;cAAA;cAAA;cAAA;cAAA,2BAYkBA,GAAG,CAACC,MAAM,EAAE;YAAA;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAAtBC,MAAM;cAAA,MAEjB,SAAS,IAAIA,MAAM;gBAAA;gBAAA;cAAA;cAAA,wCACDA,MAAM,CAACC,OAAO,IAAI,EAAE;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAA7BC,KAAK;cAAA;cACd,OAAMC,eAAe,CAACvB,mBAAmB,CAACsB,KAAK,CAAC,CAAC;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAGnD,OAAMC,eAAe,CAACvB,mBAAmB,CAACoB,MAAM,CAAC,CAAC;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA;YAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAGvD;IAAA;EAAA;EACD,OAAOd,EAAE;AACX,CAAC,CAAC;;AAEF;AACA;AACA;AACA,SAASiB,eAAe,CAAED,KAAK,EAAE;EAC/B,IAAIA,KAAK,CAACE,IAAI,EAAE;IACdF,KAAK,CAACG,GAAG,GAAG1B,GAAG,CAAC2B,KAAK,CAACJ,KAAK,CAACE,IAAI,CAAC;EACnC;EAEA,OAAOF,KAAK,CAACE,IAAI;EAEjBF,KAAK,CAACK,IAAI,GAAGL,KAAK,CAACK,IAAI,KAAK,CAAC,GAAG,WAAW,GAAG,MAAM;EAEpD,OAAOL,KAAK;AACd"},"metadata":{},"sourceType":"script","externalDependencies":[]}