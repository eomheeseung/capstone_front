{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\paete\\\\Prototype\\\\nftmusicProtoCopy\\\\client\\\\src\\\\contexts\\\\EthContext\\\\EthProvider.jsx\",\n  _s = $RefreshSig$();\nimport React, { useReducer, useCallback, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar newjson = [];\nvar imgjson = [];\nexport function EthProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const init = useCallback(async artifact => {\n    if (artifact) {\n      // const web3 = new Web3(Web3.givenProvider || \"ws://127.0.0.1:7545\");\n      const web3 = new Web3(\"https://goerli.infura.io/v3/ff2d998f9cdf4be29197ce3ffb727d89\");\n      //const accounts = await web3.eth.requestAccounts();\n      var list = [];\n      list = await web3.eth.personal.getAccounts();\n      const accounts = list[0];\n      const networkID = await web3.eth.net.getId();\n      const {\n        abi\n      } = artifact;\n      let address, contract;\n      var num = await web3.eth.getBlockNumber();\n      try {\n        address = artifact.networks[networkID].address;\n        contract = new web3.eth.Contract(abi, address);\n        for (let i = 2; i < num - 1; i++) {\n          //조건은 토큰아이디 or block size-1해서 제한해야함\n          //지금 다른계정이 업로드한 노래는 반영을 못하는 구조임.\n          try {\n            const value = await contract.methods.tokenURI(i).call();\n            const response = await fetch(value);\n            if (!response.ok) throw new Error(response.statusText);\n            const json = await response.json();\n            //이 json을 넘겨주면된다!\n            newjson.push(json);\n            //여기서 던져줘야할듯..ㅋㅋ\n          } catch (err) {\n            console.log(\"음악 리스트 토큰 overflow\");\n            break;\n          }\n        }\n        // const valued=await contract.methods.balanceOf(accounts[0]).call();\n        const Writer = await contract.methods.tokenURI(3).call();\n        const response = await fetch(Writer);\n        if (!response.ok) throw new Error(response.statusText);\n        const json1 = await response.json();\n        console.log(json1);\n        imgjson.push(json1);\n        var imgjson2 = [];\n        if (imgjson[0] !== 'undefined' && imgjson[0] != null) {\n          var imgsrc1 = imgjson[0].links.images[0].url;\n          var imgsrc2 = imgjson[0].links.images[1].url;\n          var imgsrc3 = imgjson[0].links.images[2].url;\n          var author = imgjson[0].author;\n          var name = imgjson[0].name;\n          imgjson2.push(imgsrc1);\n          imgjson2.push(imgsrc2);\n          imgjson2.push(imgsrc3);\n          imgjson2.push(author);\n          imgjson2.push(name);\n        }\n        var num5 = await web3.eth.getTransactionFromBlock(7);\n      } catch (err) {\n        console.error(err);\n        console.log(\"에러위치\");\n      }\n      dispatch({\n        type: actions.init,\n        data: {\n          artifact,\n          web3,\n          accounts,\n          networkID,\n          contract,\n          newjson,\n          imgjson2,\n          num5\n        }\n      });\n    }\n  }, []);\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifact = require(\"../../contracts/ArtGrowNFT.json\");\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    tryInit();\n  }, [init]);\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n    const handleChange = () => {\n      init(state.artifact);\n    };\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init, state.artifact]);\n  return /*#__PURE__*/_jsxDEV(EthContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n_s(EthProvider, \"hc888FM+IczqCNE4rWyvjI+TMdU=\");\n_c = EthProvider;\nexport default EthProvider;\nvar _c;\n$RefreshReg$(_c, \"EthProvider\");","map":{"version":3,"names":["React","useReducer","useCallback","useEffect","Web3","EthContext","reducer","actions","initialState","newjson","imgjson","EthProvider","children","state","dispatch","init","artifact","web3","list","eth","personal","getAccounts","accounts","networkID","net","getId","abi","address","contract","num","getBlockNumber","networks","Contract","i","value","methods","tokenURI","call","response","fetch","ok","Error","statusText","json","push","err","console","log","Writer","json1","imgjson2","imgsrc1","links","images","url","imgsrc2","imgsrc3","author","name","num5","getTransactionFromBlock","error","type","data","tryInit","require","events","handleChange","forEach","e","window","ethereum","on","removeListener"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/src/contexts/EthContext/EthProvider.jsx"],"sourcesContent":["import React, { useReducer, useCallback, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\n\n\n\nvar newjson=[]\nvar imgjson=[];\n          \n\nexport function EthProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const init = useCallback(\n\n    async artifact => {\n      if (artifact) {\n        // const web3 = new Web3(Web3.givenProvider || \"ws://127.0.0.1:7545\");\n        const web3 = new Web3(\"https://goerli.infura.io/v3/ff2d998f9cdf4be29197ce3ffb727d89\");\n        //const accounts = await web3.eth.requestAccounts();\n        var list=[]\n        list=await web3.eth.personal.getAccounts();\n\n        const accounts =list[0];\n        \n\n        const networkID = await web3.eth.net.getId();\n        const { abi } = artifact;\n        let address, contract;\n        var num= await web3.eth.getBlockNumber();\n\n        try {\n          address = artifact.networks[networkID].address;\n          contract = new web3.eth.Contract(abi, address);\n\n          for(let i=2; i<num-1; i++)\n    {\n      //조건은 토큰아이디 or block size-1해서 제한해야함\n      //지금 다른계정이 업로드한 노래는 반영을 못하는 구조임.\n     try{\n      const value = await contract.methods.tokenURI(i).call();\n      \n      const response = await fetch(value);\n      if(!response.ok)\n      throw new Error(response.statusText);\n      const json = await response.json();\n      //이 json을 넘겨주면된다!\n      newjson.push(json);\n      //여기서 던져줘야할듯..ㅋㅋ\n     }\n     catch (err) {\n      console.log(\"음악 리스트 토큰 overflow\");\n      break;\n\n    }\n     \n    }\n    // const valued=await contract.methods.balanceOf(accounts[0]).call();\n    const Writer= await contract.methods.tokenURI(3).call();\n    \n    const response = await fetch(Writer);\n      if(!response.ok)\n      throw new Error(response.statusText);\n      const json1 = await response.json();\n      console.log(json1)\n      imgjson.push(json1);\n      var imgjson2=[]\n\n      if(imgjson[0] !== 'undefined' && imgjson[0] != null)\n      {\n        var imgsrc1=imgjson[0].links.images[0].url;\n        var imgsrc2=imgjson[0].links.images[1].url;\n        var imgsrc3=imgjson[0].links.images[2].url;\n        var author=imgjson[0].author;\n        var name=imgjson[0].name;\n        \n        imgjson2.push(imgsrc1)\n        imgjson2.push(imgsrc2)\n        imgjson2.push(imgsrc3)\n        \n        imgjson2.push(author)\n        imgjson2.push(name)\n        \n      }\n\n      var num5= await web3.eth.getTransactionFromBlock(7);\n      \n      \n\n          \n        } catch (err) {\n          console.error(err);\n          console.log(\"에러위치\");\n        }\n        dispatch({\n          type: actions.init,\n          data: { artifact, web3, accounts, networkID, contract,newjson,imgjson2,num5}\n        });\n      }\n    }, []);\n\n  \n   \n    \n   \n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifact = require(\"../../contracts/ArtGrowNFT.json\");\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    tryInit();\n  }, [init]);\n\n  \n\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n    const handleChange = () => {\n      init(state.artifact);\n\n    };\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init,state.artifact]);\n\n  return (\n    <EthContext.Provider value={{\n      state,\n      dispatch\n    }}>\n      {children}\n    </EthContext.Provider>\n    \n  );\n}\n\n\nexport default EthProvider;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}