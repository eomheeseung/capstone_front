{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar addAll = require('./add-all');\nvar last = require('it-last');\nvar configure = require('../lib/configure');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {import('../types').Options} config\n */\nmodule.exports = function (config) {\n  var all = addAll(config);\n  return configure(function () {\n    /**\n     * @type {PinAPI[\"add\"]}\n     */\n    function add(_x) {\n      return _add.apply(this, arguments);\n    }\n    function _add() {\n      _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path) {\n        var options,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              return _context.abrupt(\"return\", last(all([_objectSpread({\n                path: path\n              }, options)], options)));\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return _add.apply(this, arguments);\n    }\n    return add;\n  })(config);\n};","map":{"version":3,"names":["addAll","require","last","configure","module","exports","config","all","add","path","options"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/ipfs-http-client/src/pin/add.js"],"sourcesContent":["'use strict'\n\nconst addAll = require('./add-all')\nconst last = require('it-last')\nconst configure = require('../lib/configure')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {import('../types').Options} config\n */\nmodule.exports = (config) => {\n  const all = addAll(config)\n\n  return configure(() => {\n    /**\n     * @type {PinAPI[\"add\"]}\n     */\n    async function add (path, options = {}) {\n      // @ts-ignore last can return undefined\n      return last(all([{\n        path,\n        ...options\n      }], options))\n    }\n    return add\n  })(config)\n}\n"],"mappings":"AAAA,YAAY;;AAAA;AAAA;AAAA;AAEZ,IAAMA,MAAM,GAAGC,OAAO,CAAC,WAAW,CAAC;AACnC,IAAMC,IAAI,GAAGD,OAAO,CAAC,SAAS,CAAC;AAC/B,IAAME,SAAS,GAAGF,OAAO,CAAC,kBAAkB,CAAC;;AAE7C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACAG,MAAM,CAACC,OAAO,GAAG,UAACC,MAAM,EAAK;EAC3B,IAAMC,GAAG,GAAGP,MAAM,CAACM,MAAM,CAAC;EAE1B,OAAOH,SAAS,CAAC,YAAM;IACrB;AACJ;AACA;IAFI,SAGeK,GAAG;MAAA;IAAA;IAAA;MAAA,kEAAlB,iBAAoBC,IAAI;QAAA;UAAA;QAAA;UAAA;YAAA;cAAEC,OAAO,2DAAG,CAAC,CAAC;cAAA,iCAE7BR,IAAI,CAACK,GAAG,CAAC;gBACdE,IAAI,EAAJA;cAAI,GACDC,OAAO,EACV,EAAEA,OAAO,CAAC,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CACd;MAAA;IAAA;IACD,OAAOF,GAAG;EACZ,CAAC,CAAC,CAACF,MAAM,CAAC;AACZ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}