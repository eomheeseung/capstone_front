{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\paete\\\\Prototype\\\\nftmusicProtoCopy\\\\client\\\\src\\\\contexts\\\\EthContext\\\\EthProvider.jsx\",\n  _s = $RefreshSig$();\nimport React, { useReducer, useCallback, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\nimport WalletConnectProvdier from \"@walletconnect/web3-provider\";\nimport { EthereumProvider } from \"@walletconnect/ethereum-provider\";\nimport { EthereumClient, modalConnectors, walletConnectProvider } from \"@web3modal/ethereum\";\nimport { Web3Modal } from \"@web3modal/react\";\nimport { configureChains, createClient, WagmiConfig } from \"wagmi\";\nimport { arbitrum, mainnet, polygon } from \"wagmi/chains\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar newjson = [];\nvar imgjson = [];\nexport function EthProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const init = useCallback(async artifact => {\n    if (artifact) {\n      // const web3 = new Web3(Web3.givenProvider || \"ws://127.0.0.1:7545\");\n\n      //  const provider = new WalletConnectProvdier({\n      //    infuraId: \"ff2d998f9cdf4be29197ce3ffb727d89\",\n      //    qrcode: true,\n\n      //   qrcodeModalOptions: {\n      //     desktopLinks: [\n      //       'ledger',\n      //       'tokenary',\n      //       'wallet',\n      //       'wallet 3',\n      //       'secuX',\n      //       'ambire',\n      //       'wallet3',\n      //       'apolloX',\n      //       'zerion',\n      //       'sequence',\n      //       'punkWallet',\n      //       'kryptoGO',\n      //       'nft',\n      //       'riceWallet',\n      //       'vision',\n      //       'keyring'\n      //     ],\n      //     mobileLinks: [\n      //       \"rainbow\",\n      //       \"metamask\",\n      //       \"argent\",\n      //       \"trust\",\n      //       \"imtoken\",\n      //       \"pillar\",\n      //     ],}\n      //            });\n\n      //            await provider.enable();\n      //            console.log(provider)\n      //   const web3 = new Web3(provider);\n\n      const chains = [arbitrum, mainnet, polygon];\n\n      // Wagmi client\n      const {\n        provider\n      } = configureChains(chains, [walletConnectProvider({\n        projectId: \"<YOUR_PROJECT_ID>\"\n      })]);\n      const wagmiClient = createClient({\n        autoConnect: true,\n        connectors: modalConnectors({\n          projectId: \"<YOUR_PROJECT_ID>\",\n          version: \"1\",\n          // or \"2\"\n          appName: \"web3Modal\",\n          chains\n        }),\n        provider\n      });\n\n      // Web3Modal Ethereum Client\n      const ethereumClient = new EthereumClient(wagmiClient, chains);\n      const web3 = new Web3(provider);\n\n      // const web3 = new Web3(Web3.givenProvider || \"ws://goerli.infura.io/v3/ff2d998f9cdf4be29197ce3ffb727d89\");\n      const accounts = await web3.eth.getAccounts();\n      const networkID = await web3.eth.net.getId();\n      const {\n        abi\n      } = artifact;\n      let address, contract;\n      try {\n        address = artifact.networks[networkID].address;\n        contract = new web3.eth.Contract(abi, address);\n        for (let i = 0; i < 1; i++) {\n          //조건은 토큰아이디 or block size-1해서 제한해야함\n          //지금 다른계정이 업로드한 노래는 반영을 못하는 구조임.\n          try {\n            const value = await contract.methods.tokenURI(i).call();\n            const response = await fetch(value);\n            if (!response.ok) throw new Error(response.statusText);\n            const json = await response.json();\n            //이 json을 넘겨주면된다!\n            newjson.push(json);\n            //여기서 던져줘야할듯..ㅋㅋ\n          } catch (err) {}\n        }\n\n        // const valued=await contract.methods.balanceOf(accounts[0]).call();\n        // const Writer= await contract.methods.tokenURI(3).call();\n        // const response = await fetch(Writer);\n        //   if(!response.ok)\n        //   throw new Error(response.statusText);\n        //   const json1 = await response.json();\n        //   console.log(json1)\n        //   imgjson.push(json1);\n        //   var imgjson2=[]\n\n        // if(imgjson[0] !== 'undefined' && imgjson[0] != null)\n        // {\n        //   var imgsrc1=imgjson[0].links.images[0].url;\n        //   var imgsrc2=imgjson[0].links.images[1].url;\n        //   var imgsrc3=imgjson[0].links.images[2].url;\n        //   var author=imgjson[0].author;\n        //   var name=imgjson[0].name;\n\n        //   imgjson2.push(imgsrc1)\n        //   imgjson2.push(imgsrc2)\n        //   imgjson2.push(imgsrc3)\n\n        //   imgjson2.push(author)\n        //   imgjson2.push(name)\n\n        // }\n      } catch (err) {\n        console.error(err);\n        console.log(\"에러위치\");\n      }\n      dispatch({\n        type: actions.init,\n        data: {\n          artifact,\n          web3,\n          accounts,\n          networkID,\n          contract,\n          newjson\n        }\n      });\n    }\n  }, []);\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifact = require(\"../../contracts/ArtGrowNFT.json\");\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    tryInit();\n  }, [init]);\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n    const handleChange = () => {\n      init(state.artifact);\n    };\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init, state.artifact]);\n  return /*#__PURE__*/_jsxDEV(EthContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n}\n_s(EthProvider, \"hc888FM+IczqCNE4rWyvjI+TMdU=\");\n_c = EthProvider;\nexport default EthProvider;\nvar _c;\n$RefreshReg$(_c, \"EthProvider\");","map":{"version":3,"names":["React","useReducer","useCallback","useEffect","Web3","EthContext","reducer","actions","initialState","WalletConnectProvdier","EthereumProvider","EthereumClient","modalConnectors","walletConnectProvider","Web3Modal","configureChains","createClient","WagmiConfig","arbitrum","mainnet","polygon","newjson","imgjson","EthProvider","children","state","dispatch","init","artifact","chains","provider","projectId","wagmiClient","autoConnect","connectors","version","appName","ethereumClient","web3","accounts","eth","getAccounts","networkID","net","getId","abi","address","contract","networks","Contract","i","value","methods","tokenURI","call","response","fetch","ok","Error","statusText","json","push","err","console","error","log","type","data","tryInit","require","events","handleChange","forEach","e","window","ethereum","on","removeListener"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/src/contexts/EthContext/EthProvider.jsx"],"sourcesContent":["import React, { useReducer, useCallback, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\nimport WalletConnectProvdier from \"@walletconnect/web3-provider\";\nimport { EthereumProvider } from \"@walletconnect/ethereum-provider\";\nimport {\n  EthereumClient,\n  modalConnectors,\n  walletConnectProvider,\n} from \"@web3modal/ethereum\";\n\nimport { Web3Modal } from \"@web3modal/react\";\n\nimport { configureChains, createClient, WagmiConfig } from \"wagmi\";\n\nimport { arbitrum, mainnet, polygon } from \"wagmi/chains\";\nvar newjson=[]\nvar imgjson=[];\n          \n\nexport function EthProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n\n  const init = useCallback(\n\n    async artifact => {\n      if (artifact) {\n        // const web3 = new Web3(Web3.givenProvider || \"ws://127.0.0.1:7545\");\n        \n            //  const provider = new WalletConnectProvdier({\n            //    infuraId: \"ff2d998f9cdf4be29197ce3ffb727d89\",\n            //    qrcode: true,\n              \n            //   qrcodeModalOptions: {\n            //     desktopLinks: [\n            //       'ledger',\n            //       'tokenary',\n            //       'wallet',\n            //       'wallet 3',\n            //       'secuX',\n            //       'ambire',\n            //       'wallet3',\n            //       'apolloX',\n            //       'zerion',\n            //       'sequence',\n            //       'punkWallet',\n            //       'kryptoGO',\n            //       'nft',\n            //       'riceWallet',\n            //       'vision',\n            //       'keyring'\n            //     ],\n            //     mobileLinks: [\n            //       \"rainbow\",\n            //       \"metamask\",\n            //       \"argent\",\n            //       \"trust\",\n            //       \"imtoken\",\n            //       \"pillar\",\n            //     ],}\n            //            });\n                       \n            //            await provider.enable();\n            //            console.log(provider)\n            //   const web3 = new Web3(provider);\n           \n            const chains = [arbitrum, mainnet, polygon];\n\n// Wagmi client\nconst { provider } = configureChains(chains, [\n  walletConnectProvider({ projectId: \"<YOUR_PROJECT_ID>\" }),\n]);\nconst wagmiClient = createClient({\n  autoConnect: true,\n  connectors: modalConnectors({\n    projectId: \"<YOUR_PROJECT_ID>\",\n    version: \"1\", // or \"2\"\n    appName: \"web3Modal\",\n    chains,\n  }),\n  provider,\n});\n\n// Web3Modal Ethereum Client\nconst ethereumClient = new EthereumClient(wagmiClient, chains);\n              const web3 = new Web3(provider);\n           \n        // const web3 = new Web3(Web3.givenProvider || \"ws://goerli.infura.io/v3/ff2d998f9cdf4be29197ce3ffb727d89\");\n        const accounts = await web3.eth.getAccounts();\n        const networkID = await web3.eth.net.getId();\n       \n        const { abi } = artifact;\n        let address, contract;\n\n\n        \n\n        try {\n          address = artifact.networks[networkID].address;\n          contract = new web3.eth.Contract(abi, address);\n\n\n          \n\n          for(let i=0; i<1; i++)\n    {\n      //조건은 토큰아이디 or block size-1해서 제한해야함\n      //지금 다른계정이 업로드한 노래는 반영을 못하는 구조임.\n     try{\n      const value = await contract.methods.tokenURI(i).call();\n      \n      const response = await fetch(value);\n      if(!response.ok)\n      throw new Error(response.statusText);\n      const json = await response.json();\n      //이 json을 넘겨주면된다!\n      newjson.push(json);\n      //여기서 던져줘야할듯..ㅋㅋ\n     }\n     catch (err) {\n      \n\n    }\n     \n    }\n    \n    // const valued=await contract.methods.balanceOf(accounts[0]).call();\n    // const Writer= await contract.methods.tokenURI(3).call();\n    // const response = await fetch(Writer);\n    //   if(!response.ok)\n    //   throw new Error(response.statusText);\n    //   const json1 = await response.json();\n    //   console.log(json1)\n    //   imgjson.push(json1);\n    //   var imgjson2=[]\n\n      // if(imgjson[0] !== 'undefined' && imgjson[0] != null)\n      // {\n      //   var imgsrc1=imgjson[0].links.images[0].url;\n      //   var imgsrc2=imgjson[0].links.images[1].url;\n      //   var imgsrc3=imgjson[0].links.images[2].url;\n      //   var author=imgjson[0].author;\n      //   var name=imgjson[0].name;\n        \n      //   imgjson2.push(imgsrc1)\n      //   imgjson2.push(imgsrc2)\n      //   imgjson2.push(imgsrc3)\n        \n      //   imgjson2.push(author)\n      //   imgjson2.push(name)\n        \n      // }\n\n      \n\n          \n        } catch (err) {\n          console.error(err);\n          console.log(\"에러위치\");\n        }\n        dispatch({\n          type: actions.init,\n          data: { artifact, web3, accounts, networkID, contract,newjson}\n        });\n      }\n    }, []);\n\n  \n   \n    \n   \n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifact = require(\"../../contracts/ArtGrowNFT.json\");\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    tryInit();\n  }, [init]);\n\n  \n\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n    const handleChange = () => {\n      init(state.artifact);\n\n    };\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init,state.artifact]);\n\n  return (\n    <EthContext.Provider value={{\n      state,\n      dispatch\n    }}>\n      {children}\n    </EthContext.Provider>\n    \n  );\n}\n\n\nexport default EthProvider;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}