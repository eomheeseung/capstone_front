{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fillConfig = void 0;\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nexports.fillConfig = {\n  kernelName: tfjs_1.Fill,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var backend = args.backend;\n    var _a = args.attrs,\n      shape = _a.shape,\n      value = _a.value;\n    var dtype = args.attrs.dtype;\n    // TODO(cais, nkreeger): Investigate whether backend can be made into\n    // a dtype helper method. The underlying op kernel doesn't accept undefined\n    // or null dtype.\n    if (dtype == null) {\n      if (typeof value === 'number') {\n        dtype = 'float32';\n      } else {\n        dtype = 'string';\n      }\n    }\n    var shapeTensor = (0, tfjs_1.tensor1d)(shape, 'int32');\n    var valueTensor = (0, tfjs_1.scalar)(value, dtype);\n    var opAttrs = [{\n      name: 'T',\n      type: backend.binding.TF_ATTR_TYPE,\n      value: backend.getDTypeInteger(dtype)\n    }, {\n      name: 'index_type',\n      type: backend.binding.TF_ATTR_TYPE,\n      value: backend.binding.TF_INT32\n    }];\n    var res = backend.executeSingleOutput(tfjs_1.Fill, opAttrs, [shapeTensor, valueTensor]);\n    shapeTensor.dispose();\n    valueTensor.dispose();\n    return res;\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","fillConfig","tfjs_1","require","kernelName","Fill","backendName","kernelFunc","args","backend","_a","attrs","shape","dtype","shapeTensor","tensor1d","valueTensor","scalar","opAttrs","name","type","binding","TF_ATTR_TYPE","getDTypeInteger","TF_INT32","res","executeSingleOutput","dispose"],"sources":["C:/Users/paete/CapstonPro/nftmusicProtoCopy/client/node_modules/@tensorflow/tfjs-node/dist/kernels/Fill.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fillConfig = void 0;\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nexports.fillConfig = {\n    kernelName: tfjs_1.Fill,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var backend = args.backend;\n        var _a = args.attrs, shape = _a.shape, value = _a.value;\n        var dtype = args.attrs.dtype;\n        // TODO(cais, nkreeger): Investigate whether backend can be made into\n        // a dtype helper method. The underlying op kernel doesn't accept undefined\n        // or null dtype.\n        if (dtype == null) {\n            if (typeof value === 'number') {\n                dtype = 'float32';\n            }\n            else {\n                dtype = 'string';\n            }\n        }\n        var shapeTensor = (0, tfjs_1.tensor1d)(shape, 'int32');\n        var valueTensor = (0, tfjs_1.scalar)(value, dtype);\n        var opAttrs = [\n            {\n                name: 'T',\n                type: backend.binding.TF_ATTR_TYPE,\n                value: backend.getDTypeInteger(dtype)\n            },\n            {\n                name: 'index_type',\n                type: backend.binding.TF_ATTR_TYPE,\n                value: backend.binding.TF_INT32\n            }\n        ];\n        var res = backend.executeSingleOutput(tfjs_1.Fill, opAttrs, [shapeTensor, valueTensor]);\n        shapeTensor.dispose();\n        valueTensor.dispose();\n        return res;\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,UAAU,GAAG,KAAK,CAAC;AAC3B,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACxCJ,OAAO,CAACE,UAAU,GAAG;EACjBG,UAAU,EAAEF,MAAM,CAACG,IAAI;EACvBC,WAAW,EAAE,YAAY;EACzBC,UAAU,EAAE,UAAUC,IAAI,EAAE;IACxB,IAAIC,OAAO,GAAGD,IAAI,CAACC,OAAO;IAC1B,IAAIC,EAAE,GAAGF,IAAI,CAACG,KAAK;MAAEC,KAAK,GAAGF,EAAE,CAACE,KAAK;MAAEZ,KAAK,GAAGU,EAAE,CAACV,KAAK;IACvD,IAAIa,KAAK,GAAGL,IAAI,CAACG,KAAK,CAACE,KAAK;IAC5B;IACA;IACA;IACA,IAAIA,KAAK,IAAI,IAAI,EAAE;MACf,IAAI,OAAOb,KAAK,KAAK,QAAQ,EAAE;QAC3Ba,KAAK,GAAG,SAAS;MACrB,CAAC,MACI;QACDA,KAAK,GAAG,QAAQ;MACpB;IACJ;IACA,IAAIC,WAAW,GAAG,CAAC,CAAC,EAAEZ,MAAM,CAACa,QAAQ,EAAEH,KAAK,EAAE,OAAO,CAAC;IACtD,IAAII,WAAW,GAAG,CAAC,CAAC,EAAEd,MAAM,CAACe,MAAM,EAAEjB,KAAK,EAAEa,KAAK,CAAC;IAClD,IAAIK,OAAO,GAAG,CACV;MACIC,IAAI,EAAE,GAAG;MACTC,IAAI,EAAEX,OAAO,CAACY,OAAO,CAACC,YAAY;MAClCtB,KAAK,EAAES,OAAO,CAACc,eAAe,CAACV,KAAK;IACxC,CAAC,EACD;MACIM,IAAI,EAAE,YAAY;MAClBC,IAAI,EAAEX,OAAO,CAACY,OAAO,CAACC,YAAY;MAClCtB,KAAK,EAAES,OAAO,CAACY,OAAO,CAACG;IAC3B,CAAC,CACJ;IACD,IAAIC,GAAG,GAAGhB,OAAO,CAACiB,mBAAmB,CAACxB,MAAM,CAACG,IAAI,EAAEa,OAAO,EAAE,CAACJ,WAAW,EAAEE,WAAW,CAAC,CAAC;IACvFF,WAAW,CAACa,OAAO,EAAE;IACrBX,WAAW,CAACW,OAAO,EAAE;IACrB,OAAOF,GAAG;EACd;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}