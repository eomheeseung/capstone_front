{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _require = require('multiaddr'),\n  Multiaddr = _require.Multiaddr;\nvar configure = require('../lib/configure');\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {SwarmAPI[\"localAddrs\"]}\n   */\n  function localAddrs() {\n    return _localAddrs.apply(this, arguments);\n  }\n  function _localAddrs() {\n    _localAddrs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n        res,\n        _yield$res$json,\n        Strings,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n            _context.next = 3;\n            return api.post('swarm/addrs/local', {\n              signal: options.signal,\n              searchParams: toUrlSearchParams(options),\n              headers: options.headers\n            });\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.json();\n          case 6:\n            _yield$res$json = _context.sent;\n            Strings = _yield$res$json.Strings;\n            return _context.abrupt(\"return\", (Strings || []).map(function (a) {\n              return new Multiaddr(a);\n            }));\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _localAddrs.apply(this, arguments);\n  }\n  return localAddrs;\n});","map":{"version":3,"names":["require","Multiaddr","configure","toUrlSearchParams","module","exports","api","localAddrs","options","post","signal","searchParams","headers","res","json","Strings","map","a"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/ipfs-http-client/src/swarm/localAddrs.js"],"sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {SwarmAPI[\"localAddrs\"]}\n   */\n  async function localAddrs (options = {}) {\n    const res = await api.post('swarm/addrs/local', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Strings: string[] }} */\n    const { Strings } = await res.json()\n\n    return (Strings || []).map(a => new Multiaddr(a))\n  }\n  return localAddrs\n})\n"],"mappings":"AAAA,YAAY;;AAAA;AAAA;AAEZ,eAAsBA,OAAO,CAAC,WAAW,CAAC;EAAlCC,SAAS,YAATA,SAAS;AACjB,IAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAC7C,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAGH,SAAS,CAAC,UAAAI,GAAG,EAAI;EAChC;AACF;AACA;EAFE,SAGeC,UAAU;IAAA;EAAA;EAAA;IAAA,yEAAzB;MAAA;QAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAA2BC,OAAO,2DAAG,CAAC,CAAC;YAAA;YAAA,OACnBF,GAAG,CAACG,IAAI,CAAC,mBAAmB,EAAE;cAC9CC,MAAM,EAAEF,OAAO,CAACE,MAAM;cACtBC,YAAY,EAAER,iBAAiB,CAACK,OAAO,CAAC;cACxCI,OAAO,EAAEJ,OAAO,CAACI;YACnB,CAAC,CAAC;UAAA;YAJIC,GAAG;YAAA;YAAA,OAOiBA,GAAG,CAACC,IAAI,EAAE;UAAA;YAAA;YAA5BC,OAAO,mBAAPA,OAAO;YAAA,iCAER,CAACA,OAAO,IAAI,EAAE,EAAEC,GAAG,CAAC,UAAAC,CAAC;cAAA,OAAI,IAAIhB,SAAS,CAACgB,CAAC,CAAC;YAAA,EAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CAClD;IAAA;EAAA;EACD,OAAOV,UAAU;AACnB,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}