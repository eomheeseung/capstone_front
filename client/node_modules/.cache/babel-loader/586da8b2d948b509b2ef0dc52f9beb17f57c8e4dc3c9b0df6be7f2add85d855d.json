{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ethErrors = void 0;\nvar classes_1 = require(\"./classes\");\nvar utils_1 = require(\"./utils\");\nvar error_constants_1 = require(\"./error-constants\");\nexports.ethErrors = {\n  rpc: {\n    /**\n     * Get a JSON RPC 2.0 Parse (-32700) error.\n     */\n    parse: function parse(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.parse, arg);\n    },\n    /**\n     * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n     */\n    invalidRequest: function invalidRequest(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidRequest, arg);\n    },\n    /**\n     * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n     */\n    invalidParams: function invalidParams(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidParams, arg);\n    },\n    /**\n     * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n     */\n    methodNotFound: function methodNotFound(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotFound, arg);\n    },\n    /**\n     * Get a JSON RPC 2.0 Internal (-32603) error.\n     */\n    internal: function internal(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.internal, arg);\n    },\n    /**\n     * Get a JSON RPC 2.0 Server error.\n     * Permits integer error codes in the [ -32099 <= -32005 ] range.\n     * Codes -32000 through -32004 are reserved by EIP-1474.\n     */\n    server: function server(opts) {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum RPC Server errors must provide single object argument.');\n      }\n      var code = opts.code;\n      if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n        throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n      }\n      return getEthJsonRpcError(code, opts);\n    },\n    /**\n     * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n     */\n    invalidInput: function invalidInput(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidInput, arg);\n    },\n    /**\n     * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n     */\n    resourceNotFound: function resourceNotFound(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceNotFound, arg);\n    },\n    /**\n     * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n     */\n    resourceUnavailable: function resourceUnavailable(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceUnavailable, arg);\n    },\n    /**\n     * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n     */\n    transactionRejected: function transactionRejected(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.transactionRejected, arg);\n    },\n    /**\n     * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n     */\n    methodNotSupported: function methodNotSupported(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotSupported, arg);\n    },\n    /**\n     * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n     */\n    limitExceeded: function limitExceeded(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.limitExceeded, arg);\n    }\n  },\n  provider: {\n    /**\n     * Get an Ethereum Provider User Rejected Request (4001) error.\n     */\n    userRejectedRequest: function userRejectedRequest(arg) {\n      return getEthProviderError(error_constants_1.errorCodes.provider.userRejectedRequest, arg);\n    },\n    /**\n     * Get an Ethereum Provider Unauthorized (4100) error.\n     */\n    unauthorized: function unauthorized(arg) {\n      return getEthProviderError(error_constants_1.errorCodes.provider.unauthorized, arg);\n    },\n    /**\n     * Get an Ethereum Provider Unsupported Method (4200) error.\n     */\n    unsupportedMethod: function unsupportedMethod(arg) {\n      return getEthProviderError(error_constants_1.errorCodes.provider.unsupportedMethod, arg);\n    },\n    /**\n     * Get an Ethereum Provider Not Connected (4900) error.\n     */\n    disconnected: function disconnected(arg) {\n      return getEthProviderError(error_constants_1.errorCodes.provider.disconnected, arg);\n    },\n    /**\n     * Get an Ethereum Provider Chain Not Connected (4901) error.\n     */\n    chainDisconnected: function chainDisconnected(arg) {\n      return getEthProviderError(error_constants_1.errorCodes.provider.chainDisconnected, arg);\n    },\n    /**\n     * Get a custom Ethereum Provider error.\n     */\n    custom: function custom(opts) {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum Provider custom errors must provide single object argument.');\n      }\n      var code = opts.code,\n        message = opts.message,\n        data = opts.data;\n      if (!message || typeof message !== 'string') {\n        throw new Error('\"message\" must be a nonempty string');\n      }\n      return new classes_1.EthereumProviderError(code, message, data);\n    }\n  }\n};\n// Internal\nfunction getEthJsonRpcError(code, arg) {\n  var _parseOpts = parseOpts(arg),\n    _parseOpts2 = _slicedToArray(_parseOpts, 2),\n    message = _parseOpts2[0],\n    data = _parseOpts2[1];\n  return new classes_1.EthereumRpcError(code, message || utils_1.getMessageFromCode(code), data);\n}\nfunction getEthProviderError(code, arg) {\n  var _parseOpts3 = parseOpts(arg),\n    _parseOpts4 = _slicedToArray(_parseOpts3, 2),\n    message = _parseOpts4[0],\n    data = _parseOpts4[1];\n  return new classes_1.EthereumProviderError(code, message || utils_1.getMessageFromCode(code), data);\n}\nfunction parseOpts(arg) {\n  if (arg) {\n    if (typeof arg === 'string') {\n      return [arg];\n    } else if (typeof arg === 'object' && !Array.isArray(arg)) {\n      var message = arg.message,\n        data = arg.data;\n      if (message && typeof message !== 'string') {\n        throw new Error('Must specify string message.');\n      }\n      return [message || undefined, data];\n    }\n  }\n  return [];\n}","map":{"version":3,"mappings":"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","names":["exports","rpc","parse","arg","getEthJsonRpcError","error_constants_1","invalidRequest","invalidParams","methodNotFound","internal","server","opts","Array","isArray","Error","code","Number","isInteger","invalidInput","resourceNotFound","resourceUnavailable","transactionRejected","methodNotSupported","limitExceeded","provider","userRejectedRequest","getEthProviderError","unauthorized","unsupportedMethod","disconnected","chainDisconnected","custom","message","data","classes_1","parseOpts","utils_1","undefined"],"sources":["../src/errors.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}