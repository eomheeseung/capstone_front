{"ast":null,"code":"'use strict';\n\n/**\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadCodecFn}\n */\nvar _regeneratorRuntime = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar LOAD_CODEC = function LOAD_CODEC(codeOrName) {\n  return Promise.reject(new Error(\"No codec found for \\\"\".concat(codeOrName, \"\\\"\")));\n};\nvar Multicodecs = /*#__PURE__*/function () {\n  /**\n   * @param {object} options\n   * @param {LoadCodecFn} [options.loadCodec]\n   * @param {BlockCodec[]} options.codecs\n   */\n  function Multicodecs(options) {\n    _classCallCheck(this, Multicodecs);\n    // Object with current list of active resolvers\n    /** @type {Record<string, BlockCodec>}} */\n    this._codecsByName = {};\n\n    // Object with current list of active resolvers\n    /** @type {Record<number, BlockCodec>}} */\n    this._codecsByCode = {};\n    this._loadCodec = options.loadCodec || LOAD_CODEC;\n\n    // Enable all supplied codecs\n    var _iterator = _createForOfIteratorHelper(options.codecs),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var codec = _step.value;\n        this.addCodec(codec);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  /**\n   * Add support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  _createClass(Multicodecs, [{\n    key: \"addCodec\",\n    value: function addCodec(codec) {\n      if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n        throw new Error(\"Resolver already exists for codec \\\"\".concat(codec.name, \"\\\"\"));\n      }\n      this._codecsByName[codec.name] = codec;\n      this._codecsByCode[codec.code] = codec;\n    }\n\n    /**\n     * Remove support for a block codec\n     *\n     * @param {BlockCodec} codec\n     */\n  }, {\n    key: \"removeCodec\",\n    value: function removeCodec(codec) {\n      delete this._codecsByName[codec.name];\n      delete this._codecsByCode[codec.code];\n    }\n\n    /**\n     * @param {number | string} code\n     */\n  }, {\n    key: \"getCodec\",\n    value: function () {\n      var _getCodec = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(code) {\n        var table, codec;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              table = typeof code === 'string' ? this._codecsByName : this._codecsByCode;\n              if (!table[code]) {\n                _context.next = 3;\n                break;\n              }\n              return _context.abrupt(\"return\", table[code]);\n            case 3:\n              _context.next = 5;\n              return this._loadCodec(code);\n            case 5:\n              codec = _context.sent;\n              if (table[code] == null) {\n                this.addCodec(codec);\n              }\n              return _context.abrupt(\"return\", codec);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getCodec(_x) {\n        return _getCodec.apply(this, arguments);\n      }\n      return getCodec;\n    }()\n  }, {\n    key: \"listCodecs\",\n    value: function listCodecs() {\n      return Object.values(this._codecsByName);\n    }\n  }]);\n  return Multicodecs;\n}();\nmodule.exports = Multicodecs;","map":{"version":3,"names":["LOAD_CODEC","codeOrName","Promise","reject","Error","Multicodecs","options","_codecsByName","_codecsByCode","_loadCodec","loadCodec","codecs","codec","addCodec","name","code","table","Object","values","module","exports"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/ipfs-core-utils/src/multicodecs.js"],"sourcesContent":["'use strict'\n\n/**\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadCodecFn}\n */\nconst LOAD_CODEC = (codeOrName) => Promise.reject(new Error(`No codec found for \"${codeOrName}\"`))\n\nclass Multicodecs {\n  /**\n   * @param {object} options\n   * @param {LoadCodecFn} [options.loadCodec]\n   * @param {BlockCodec[]} options.codecs\n   */\n  constructor (options) {\n    // Object with current list of active resolvers\n    /** @type {Record<string, BlockCodec>}} */\n    this._codecsByName = {}\n\n    // Object with current list of active resolvers\n    /** @type {Record<number, BlockCodec>}} */\n    this._codecsByCode = {}\n\n    this._loadCodec = options.loadCodec || LOAD_CODEC\n\n    // Enable all supplied codecs\n    for (const codec of options.codecs) {\n      this.addCodec(codec)\n    }\n  }\n\n  /**\n   * Add support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  addCodec (codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(`Resolver already exists for codec \"${codec.name}\"`)\n    }\n\n    this._codecsByName[codec.name] = codec\n    this._codecsByCode[codec.code] = codec\n  }\n\n  /**\n   * Remove support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  removeCodec (codec) {\n    delete this._codecsByName[codec.name]\n    delete this._codecsByCode[codec.code]\n  }\n\n  /**\n   * @param {number | string} code\n   */\n  async getCodec (code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode\n\n    if (table[code]) {\n      return table[code]\n    }\n\n    // If not supported, attempt to dynamically load this codec\n    const codec = await this._loadCodec(code)\n\n    if (table[code] == null) {\n      this.addCodec(codec)\n    }\n\n    return codec\n  }\n\n  listCodecs () {\n    return Object.values(this._codecsByName)\n  }\n}\n\nmodule.exports = Multicodecs\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAGA,IAAMA,UAAU,GAAG,SAAbA,UAAU,CAAIC,UAAU;EAAA,OAAKC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,gCAAwBH,UAAU,QAAI,CAAC;AAAA;AAAA,IAE5FI,WAAW;EACf;AACF;AACA;AACA;AACA;EACE,qBAAaC,OAAO,EAAE;IAAA;IACpB;IACA;IACA,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;;IAEvB;IACA;IACA,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;IAEvB,IAAI,CAACC,UAAU,GAAGH,OAAO,CAACI,SAAS,IAAIV,UAAU;;IAEjD;IAAA,2CACoBM,OAAO,CAACK,MAAM;MAAA;IAAA;MAAlC,oDAAoC;QAAA,IAAzBC,KAAK;QACd,IAAI,CAACC,QAAQ,CAACD,KAAK,CAAC;MACtB;IAAC;MAAA;IAAA;MAAA;IAAA;EACH;;EAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,kBAAUA,KAAK,EAAE;MACf,IAAI,IAAI,CAACL,aAAa,CAACK,KAAK,CAACE,IAAI,CAAC,IAAI,IAAI,CAACN,aAAa,CAACI,KAAK,CAACG,IAAI,CAAC,EAAE;QACpE,MAAM,IAAIX,KAAK,+CAAuCQ,KAAK,CAACE,IAAI,QAAI;MACtE;MAEA,IAAI,CAACP,aAAa,CAACK,KAAK,CAACE,IAAI,CAAC,GAAGF,KAAK;MACtC,IAAI,CAACJ,aAAa,CAACI,KAAK,CAACG,IAAI,CAAC,GAAGH,KAAK;IACxC;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,qBAAaA,KAAK,EAAE;MAClB,OAAO,IAAI,CAACL,aAAa,CAACK,KAAK,CAACE,IAAI,CAAC;MACrC,OAAO,IAAI,CAACN,aAAa,CAACI,KAAK,CAACG,IAAI,CAAC;IACvC;;IAEA;AACF;AACA;EAFE;IAAA;IAAA;MAAA,2EAGA,iBAAgBA,IAAI;QAAA;QAAA;UAAA;YAAA;cACZC,KAAK,GAAG,OAAOD,IAAI,KAAK,QAAQ,GAAG,IAAI,CAACR,aAAa,GAAG,IAAI,CAACC,aAAa;cAAA,KAE5EQ,KAAK,CAACD,IAAI,CAAC;gBAAA;gBAAA;cAAA;cAAA,iCACNC,KAAK,CAACD,IAAI,CAAC;YAAA;cAAA;cAAA,OAIA,IAAI,CAACN,UAAU,CAACM,IAAI,CAAC;YAAA;cAAnCH,KAAK;cAEX,IAAII,KAAK,CAACD,IAAI,CAAC,IAAI,IAAI,EAAE;gBACvB,IAAI,CAACF,QAAQ,CAACD,KAAK,CAAC;cACtB;cAAC,iCAEMA,KAAK;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CACb;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA,OAED,sBAAc;MACZ,OAAOK,MAAM,CAACC,MAAM,CAAC,IAAI,CAACX,aAAa,CAAC;IAC1C;EAAC;EAAA;AAAA;AAGHY,MAAM,CAACC,OAAO,GAAGf,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}