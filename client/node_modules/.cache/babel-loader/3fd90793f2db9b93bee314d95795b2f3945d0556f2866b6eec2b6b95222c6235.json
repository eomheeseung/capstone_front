{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _awaitAsyncGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\nvar _wrapAsyncGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\nvar _asyncIterator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\nvar _require = require('multiaddr'),\n  Multiaddr = _require.Multiaddr;\nvar toCamel = require('../lib/object-to-camel');\nvar configure = require('../lib/configure');\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {DHTAPI[\"query\"]}\n   */\n  function query(_x) {\n    return _query.apply(this, arguments);\n  }\n  function _query() {\n    _query = _wrapAsyncGenerator(function (peerId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var res, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, message;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _awaitAsyncGenerator(api.post('dht/query', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: peerId.toString()\n                }, options)),\n                headers: options.headers\n              }));\n            case 2:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 5;\n              _iterator = _asyncIterator(res.ndjson());\n            case 7:\n              _context.next = 9;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 9:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 18;\n                break;\n              }\n              message = _step.value;\n              message = toCamel(message);\n              message.responses = (message.responses || []).map(function ( /** @type {{ ID: string, Addrs: string[] }} */_ref) {\n                var ID = _ref.ID,\n                  Addrs = _ref.Addrs;\n                return {\n                  id: ID,\n                  addrs: (Addrs || []).map(function ( /** @type {string} **/a) {\n                    return new Multiaddr(a);\n                  })\n                };\n              });\n              _context.next = 15;\n              return message;\n            case 15:\n              _iteratorAbruptCompletion = false;\n              _context.next = 7;\n              break;\n            case 18:\n              _context.next = 24;\n              break;\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](5);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n            case 24:\n              _context.prev = 24;\n              _context.prev = 25;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 29;\n                break;\n              }\n              _context.next = 29;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 29:\n              _context.prev = 29;\n              if (!_didIteratorError) {\n                _context.next = 32;\n                break;\n              }\n              throw _iteratorError;\n            case 32:\n              return _context.finish(29);\n            case 33:\n              return _context.finish(24);\n            case 34:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[5, 20, 24, 34], [25,, 29, 33]]);\n      })();\n    });\n    return _query.apply(this, arguments);\n  }\n  return query;\n});","map":{"version":3,"names":["require","Multiaddr","toCamel","configure","toUrlSearchParams","module","exports","api","query","peerId","options","post","signal","searchParams","arg","toString","headers","res","ndjson","message","responses","map","ID","Addrs","id","addrs","a"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/ipfs-http-client/src/dht/query.js"],"sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"query\"]}\n   */\n  async function * query (peerId, options = {}) {\n    const res = await api.post('dht/query', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      message.responses = (message.responses || []).map((/** @type {{ ID: string, Addrs: string[] }} */ { ID, Addrs }) => ({\n        id: ID,\n        addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n      }))\n      yield message\n    }\n  }\n\n  return query\n})\n"],"mappings":"AAAA,YAAY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEZ,eAAsBA,OAAO,CAAC,WAAW,CAAC;EAAlCC,SAAS,YAATA,SAAS;AACjB,IAAMC,OAAO,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AACjD,IAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAkB,CAAC;AAC7C,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;;AAEAK,MAAM,CAACC,OAAO,GAAGH,SAAS,CAAC,UAAAI,GAAG,EAAI;EAChC;AACF;AACA;EAFE,SAGiBC,KAAK;IAAA;EAAA;EAAA;IAAA,6BAAtB,UAAwBC,MAAM;MAAA,IAAEC,OAAO,uEAAG,CAAC,CAAC;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;cAAA,4BACxBH,GAAG,CAACI,IAAI,CAAC,WAAW,EAAE;gBACtCC,MAAM,EAAEF,OAAO,CAACE,MAAM;gBACtBC,YAAY,EAAET,iBAAiB;kBAC7BU,GAAG,EAAEL,MAAM,CAACM,QAAQ;gBAAE,GACnBL,OAAO,EACV;gBACFM,OAAO,EAAEN,OAAO,CAACM;cACnB,CAAC,CAAC;YAAA;cAPIC,GAAG;cAAA;cAAA;cAAA;cAAA,2BASiBA,GAAG,CAACC,MAAM,EAAE;YAAA;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAAvBC,OAAO;cACpBA,OAAO,GAAGjB,OAAO,CAACiB,OAAO,CAAC;cAC1BA,OAAO,CAACC,SAAS,GAAG,CAACD,OAAO,CAACC,SAAS,IAAI,EAAE,EAAEC,GAAG,CAAC,WAAC;gBAAA,IAAiDC,EAAE,QAAFA,EAAE;kBAAEC,KAAK,QAALA,KAAK;gBAAA,OAAQ;kBACnHC,EAAE,EAAEF,EAAE;kBACNG,KAAK,EAAE,CAACF,KAAK,IAAI,EAAE,EAAEF,GAAG,CAAC,WAAC,sBAAuBK,CAAC;oBAAA,OAAK,IAAIzB,SAAS,CAACyB,CAAC,CAAC;kBAAA;gBACzE,CAAC;cAAA,CAAC,CAAC;cAAA;cACH,OAAMP,OAAO;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA;YAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAEhB;IAAA;EAAA;EAED,OAAOX,KAAK;AACd,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}