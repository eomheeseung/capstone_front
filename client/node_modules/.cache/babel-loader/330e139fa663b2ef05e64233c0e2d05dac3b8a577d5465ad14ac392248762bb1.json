{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar toCamel = require('../lib/object-to-camel');\nvar configure = require('../lib/configure');\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {KeyAPI[\"gen\"]}\n   */\n  function gen(_x) {\n    return _gen.apply(this, arguments);\n  }\n  function _gen() {\n    _gen = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(name) {\n      var options,\n        res,\n        data,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {\n              type: 'rsa',\n              size: 2048\n            };\n            _context.next = 3;\n            return api.post('key/gen', {\n              signal: options.signal,\n              searchParams: toUrlSearchParams(_objectSpread({\n                arg: name\n              }, options)),\n              headers: options.headers\n            });\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.json();\n          case 6:\n            data = _context.sent;\n            return _context.abrupt(\"return\", toCamel(data));\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _gen.apply(this, arguments);\n  }\n  return gen;\n});","map":{"version":3,"names":["toCamel","require","configure","toUrlSearchParams","module","exports","api","gen","name","options","type","size","post","signal","searchParams","arg","headers","res","json","data"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/ipfs-http-client/src/key/gen.js"],"sourcesContent":["'use strict'\n\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {KeyAPI[\"gen\"]}\n   */\n  async function gen (name, options = { type: 'rsa', size: 2048 }) {\n    const res = await api.post('key/gen', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    // @ts-ignore server output is not typed\n    return toCamel(data)\n  }\n  return gen\n})\n"],"mappings":"AAAA,YAAY;;AAAA;AAAA;AAAA;AAEZ,IAAMA,OAAO,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACjD,IAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC7C,IAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,OAAO,GAAGH,SAAS,CAAC,UAAAI,GAAG,EAAI;EAChC;AACF;AACA;EAFE,SAGeC,GAAG;IAAA;EAAA;EAAA;IAAA,kEAAlB,iBAAoBC,IAAI;MAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAEC,OAAO,2DAAG;cAAEC,IAAI,EAAE,KAAK;cAAEC,IAAI,EAAE;YAAK,CAAC;YAAA;YAAA,OAC3CL,GAAG,CAACM,IAAI,CAAC,SAAS,EAAE;cACpCC,MAAM,EAAEJ,OAAO,CAACI,MAAM;cACtBC,YAAY,EAAEX,iBAAiB;gBAC7BY,GAAG,EAAEP;cAAI,GACNC,OAAO,EACV;cACFO,OAAO,EAAEP,OAAO,CAACO;YACnB,CAAC,CAAC;UAAA;YAPIC,GAAG;YAAA;YAAA,OAQUA,GAAG,CAACC,IAAI,EAAE;UAAA;YAAvBC,IAAI;YAAA,iCAGHnB,OAAO,CAACmB,IAAI,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACrB;IAAA;EAAA;EACD,OAAOZ,GAAG;AACZ,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}