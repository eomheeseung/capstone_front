{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unpackConfig = void 0;\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.unpackConfig = {\n  kernelName: tfjs_1.Unpack,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var value = args.inputs.value;\n    var backend = args.backend;\n    var axis = args.attrs.axis;\n    if (axis < 0) {\n      axis += value.shape.length;\n    }\n    if (axis >= value.shape.length) {\n      throw new Error(\"Invalid axis supplied: \".concat(axis, \" shape length: \").concat(value.shape.length));\n    }\n    var num = value.shape[axis];\n    var opAttrs = [{\n      name: 'num',\n      type: backend.binding.TF_ATTR_INT,\n      value: num\n    }, (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)('T', value.dtype), {\n      name: 'axis',\n      type: backend.binding.TF_ATTR_INT,\n      value: axis\n    }];\n    return backend.executeMultipleOutputs(tfjs_1.Unpack, opAttrs, [value], num);\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","unpackConfig","tfjs_1","require","nodejs_kernel_backend_1","kernelName","Unpack","backendName","kernelFunc","args","inputs","backend","axis","attrs","shape","length","Error","concat","num","opAttrs","name","type","binding","TF_ATTR_INT","createTensorsTypeOpAttr","dtype","executeMultipleOutputs"],"sources":["C:/Users/paete/CapstonPro/nftmusicProtoCopy/client/node_modules/@tensorflow/tfjs-node/dist/kernels/Unpack.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.unpackConfig = void 0;\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.unpackConfig = {\n    kernelName: tfjs_1.Unpack,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var value = args.inputs.value;\n        var backend = args.backend;\n        var axis = args.attrs.axis;\n        if (axis < 0) {\n            axis += value.shape.length;\n        }\n        if (axis >= value.shape.length) {\n            throw new Error(\"Invalid axis supplied: \".concat(axis, \" shape length: \").concat(value.shape.length));\n        }\n        var num = value.shape[axis];\n        var opAttrs = [\n            { name: 'num', type: backend.binding.TF_ATTR_INT, value: num },\n            (0, nodejs_kernel_backend_1.createTensorsTypeOpAttr)('T', value.dtype),\n            { name: 'axis', type: backend.binding.TF_ATTR_INT, value: axis }\n        ];\n        return backend.executeMultipleOutputs(tfjs_1.Unpack, opAttrs, [value], num);\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,YAAY,GAAG,KAAK,CAAC;AAC7B,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACxC,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AACjEJ,OAAO,CAACE,YAAY,GAAG;EACnBI,UAAU,EAAEH,MAAM,CAACI,MAAM;EACzBC,WAAW,EAAE,YAAY;EACzBC,UAAU,EAAE,UAAUC,IAAI,EAAE;IACxB,IAAIT,KAAK,GAAGS,IAAI,CAACC,MAAM,CAACV,KAAK;IAC7B,IAAIW,OAAO,GAAGF,IAAI,CAACE,OAAO;IAC1B,IAAIC,IAAI,GAAGH,IAAI,CAACI,KAAK,CAACD,IAAI;IAC1B,IAAIA,IAAI,GAAG,CAAC,EAAE;MACVA,IAAI,IAAIZ,KAAK,CAACc,KAAK,CAACC,MAAM;IAC9B;IACA,IAAIH,IAAI,IAAIZ,KAAK,CAACc,KAAK,CAACC,MAAM,EAAE;MAC5B,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAACC,MAAM,CAACL,IAAI,EAAE,iBAAiB,CAAC,CAACK,MAAM,CAACjB,KAAK,CAACc,KAAK,CAACC,MAAM,CAAC,CAAC;IACzG;IACA,IAAIG,GAAG,GAAGlB,KAAK,CAACc,KAAK,CAACF,IAAI,CAAC;IAC3B,IAAIO,OAAO,GAAG,CACV;MAAEC,IAAI,EAAE,KAAK;MAAEC,IAAI,EAAEV,OAAO,CAACW,OAAO,CAACC,WAAW;MAAEvB,KAAK,EAAEkB;IAAI,CAAC,EAC9D,CAAC,CAAC,EAAEd,uBAAuB,CAACoB,uBAAuB,EAAE,GAAG,EAAExB,KAAK,CAACyB,KAAK,CAAC,EACtE;MAAEL,IAAI,EAAE,MAAM;MAAEC,IAAI,EAAEV,OAAO,CAACW,OAAO,CAACC,WAAW;MAAEvB,KAAK,EAAEY;IAAK,CAAC,CACnE;IACD,OAAOD,OAAO,CAACe,sBAAsB,CAACxB,MAAM,CAACI,MAAM,EAAEa,OAAO,EAAE,CAACnB,KAAK,CAAC,EAAEkB,GAAG,CAAC;EAC/E;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}