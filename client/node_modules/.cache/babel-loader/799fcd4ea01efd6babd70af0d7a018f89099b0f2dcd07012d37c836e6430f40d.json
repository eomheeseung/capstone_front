{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar callId = require('./id');\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nmodule.exports = function (options) {\n  var id = callId(options);\n\n  /**\n   * @type {RootAPI[\"isOnline\"]}\n   */\n  function isOnline() {\n    return _isOnline.apply(this, arguments);\n  }\n  function _isOnline() {\n    _isOnline = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n        res,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n            _context.next = 3;\n            return id(options);\n          case 3:\n            res = _context.sent;\n            return _context.abrupt(\"return\", Boolean(res && res.addresses && res.addresses.length));\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _isOnline.apply(this, arguments);\n  }\n  return isOnline;\n};","map":{"version":3,"names":["callId","require","module","exports","options","id","isOnline","res","Boolean","addresses","length"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/ipfs-http-client/src/is-online.js"],"sourcesContent":["'use strict'\n\nconst callId = require('./id')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nmodule.exports = options => {\n  const id = callId(options)\n\n  /**\n   * @type {RootAPI[\"isOnline\"]}\n   */\n  async function isOnline (options = {}) {\n    const res = await id(options)\n\n    return Boolean(res && res.addresses && res.addresses.length)\n  }\n  return isOnline\n}\n"],"mappings":"AAAA,YAAY;;AAAA;AAAA;AAEZ,IAAMA,MAAM,GAAGC,OAAO,CAAC,MAAM,CAAC;;AAE9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,UAAAC,OAAO,EAAI;EAC1B,IAAMC,EAAE,GAAGL,MAAM,CAACI,OAAO,CAAC;;EAE1B;AACF;AACA;EAFE,SAGeE,QAAQ;IAAA;EAAA;EAAA;IAAA,uEAAvB;MAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAyBF,OAAO,2DAAG,CAAC,CAAC;YAAA;YAAA,OACjBC,EAAE,CAACD,OAAO,CAAC;UAAA;YAAvBG,GAAG;YAAA,iCAEFC,OAAO,CAACD,GAAG,IAAIA,GAAG,CAACE,SAAS,IAAIF,GAAG,CAACE,SAAS,CAACC,MAAM,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CAC7D;IAAA;EAAA;EACD,OAAOJ,QAAQ;AACjB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}