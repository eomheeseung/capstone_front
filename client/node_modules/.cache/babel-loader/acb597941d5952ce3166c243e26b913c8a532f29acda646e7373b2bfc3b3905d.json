{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _awaitAsyncGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\nvar _wrapAsyncGenerator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\nvar _asyncIterator = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\nvar errCode = require('err-code');\nvar _require = require('multiformats/cid'),\n  CID = _require.CID;\n\n/**\n * @typedef {Object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {Object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\nfunction normaliseInput(_x) {\n  return _normaliseInput.apply(this, arguments);\n}\n/**\n * @param {Pinnable} input\n */\nfunction _normaliseInput() {\n  _normaliseInput = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input) {\n    var cid, iterator, first, _iterator3, _step3, _cid, _iterator4, _step4, obj, _iterator5, _first, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _cid2, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _obj;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(input === null || input === undefined)) {\n            _context.next = 2;\n            break;\n          }\n          throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n        case 2:\n          // CID\n          cid = CID.asCID(input);\n          if (!cid) {\n            _context.next = 7;\n            break;\n          }\n          _context.next = 6;\n          return toPin({\n            cid: cid\n          });\n        case 6:\n          return _context.abrupt(\"return\");\n        case 7:\n          if (!(input instanceof String || typeof input === 'string')) {\n            _context.next = 11;\n            break;\n          }\n          _context.next = 10;\n          return toPin({\n            path: input\n          });\n        case 10:\n          return _context.abrupt(\"return\");\n        case 11:\n          if (!(input.cid != null || input.path != null)) {\n            _context.next = 15;\n            break;\n          }\n          _context.next = 14;\n          return toPin(input);\n        case 14:\n          return _context.abrupt(\"return\", _context.sent);\n        case 15:\n          if (!(Symbol.iterator in input)) {\n            _context.next = 63;\n            break;\n          }\n          // @ts-ignore\n          iterator = input[Symbol.iterator]();\n          first = iterator.next();\n          if (!first.done) {\n            _context.next = 20;\n            break;\n          }\n          return _context.abrupt(\"return\", iterator);\n        case 20:\n          if (!(CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string')) {\n            _context.next = 41;\n            break;\n          }\n          _context.next = 23;\n          return toPin({\n            cid: first.value\n          });\n        case 23:\n          _iterator3 = _createForOfIteratorHelper(iterator);\n          _context.prev = 24;\n          _iterator3.s();\n        case 26:\n          if ((_step3 = _iterator3.n()).done) {\n            _context.next = 32;\n            break;\n          }\n          _cid = _step3.value;\n          _context.next = 30;\n          return toPin({\n            cid: _cid\n          });\n        case 30:\n          _context.next = 26;\n          break;\n        case 32:\n          _context.next = 37;\n          break;\n        case 34:\n          _context.prev = 34;\n          _context.t0 = _context[\"catch\"](24);\n          _iterator3.e(_context.t0);\n        case 37:\n          _context.prev = 37;\n          _iterator3.f();\n          return _context.finish(37);\n        case 40:\n          return _context.abrupt(\"return\");\n        case 41:\n          if (!(first.value.cid != null || first.value.path != null)) {\n            _context.next = 62;\n            break;\n          }\n          _context.next = 44;\n          return toPin(first.value);\n        case 44:\n          _iterator4 = _createForOfIteratorHelper(iterator);\n          _context.prev = 45;\n          _iterator4.s();\n        case 47:\n          if ((_step4 = _iterator4.n()).done) {\n            _context.next = 53;\n            break;\n          }\n          obj = _step4.value;\n          _context.next = 51;\n          return toPin(obj);\n        case 51:\n          _context.next = 47;\n          break;\n        case 53:\n          _context.next = 58;\n          break;\n        case 55:\n          _context.prev = 55;\n          _context.t1 = _context[\"catch\"](45);\n          _iterator4.e(_context.t1);\n        case 58:\n          _context.prev = 58;\n          _iterator4.f();\n          return _context.finish(58);\n        case 61:\n          return _context.abrupt(\"return\");\n        case 62:\n          throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n        case 63:\n          if (!(Symbol.asyncIterator in input)) {\n            _context.next = 137;\n            break;\n          }\n          // @ts-ignore\n          _iterator5 = input[Symbol.asyncIterator]();\n          _context.next = 67;\n          return _awaitAsyncGenerator(_iterator5.next());\n        case 67:\n          _first = _context.sent;\n          if (!_first.done) {\n            _context.next = 70;\n            break;\n          }\n          return _context.abrupt(\"return\", _iterator5);\n        case 70:\n          if (!(CID.asCID(_first.value) || _first.value instanceof String || typeof _first.value === 'string')) {\n            _context.next = 103;\n            break;\n          }\n          _context.next = 73;\n          return toPin({\n            cid: _first.value\n          });\n        case 73:\n          _iteratorAbruptCompletion = false;\n          _didIteratorError = false;\n          _context.prev = 75;\n          _iterator = _asyncIterator(_iterator5);\n        case 77:\n          _context.next = 79;\n          return _awaitAsyncGenerator(_iterator.next());\n        case 79:\n          if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n            _context.next = 86;\n            break;\n          }\n          _cid2 = _step.value;\n          _context.next = 83;\n          return toPin({\n            cid: _cid2\n          });\n        case 83:\n          _iteratorAbruptCompletion = false;\n          _context.next = 77;\n          break;\n        case 86:\n          _context.next = 92;\n          break;\n        case 88:\n          _context.prev = 88;\n          _context.t2 = _context[\"catch\"](75);\n          _didIteratorError = true;\n          _iteratorError = _context.t2;\n        case 92:\n          _context.prev = 92;\n          _context.prev = 93;\n          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n            _context.next = 97;\n            break;\n          }\n          _context.next = 97;\n          return _awaitAsyncGenerator(_iterator.return());\n        case 97:\n          _context.prev = 97;\n          if (!_didIteratorError) {\n            _context.next = 100;\n            break;\n          }\n          throw _iteratorError;\n        case 100:\n          return _context.finish(97);\n        case 101:\n          return _context.finish(92);\n        case 102:\n          return _context.abrupt(\"return\");\n        case 103:\n          if (!(_first.value.cid != null || _first.value.path != null)) {\n            _context.next = 136;\n            break;\n          }\n          _context.next = 106;\n          return toPin(_first.value);\n        case 106:\n          _iteratorAbruptCompletion2 = false;\n          _didIteratorError2 = false;\n          _context.prev = 108;\n          _iterator2 = _asyncIterator(_iterator5);\n        case 110:\n          _context.next = 112;\n          return _awaitAsyncGenerator(_iterator2.next());\n        case 112:\n          if (!(_iteratorAbruptCompletion2 = !(_step2 = _context.sent).done)) {\n            _context.next = 119;\n            break;\n          }\n          _obj = _step2.value;\n          _context.next = 116;\n          return toPin(_obj);\n        case 116:\n          _iteratorAbruptCompletion2 = false;\n          _context.next = 110;\n          break;\n        case 119:\n          _context.next = 125;\n          break;\n        case 121:\n          _context.prev = 121;\n          _context.t3 = _context[\"catch\"](108);\n          _didIteratorError2 = true;\n          _iteratorError2 = _context.t3;\n        case 125:\n          _context.prev = 125;\n          _context.prev = 126;\n          if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n            _context.next = 130;\n            break;\n          }\n          _context.next = 130;\n          return _awaitAsyncGenerator(_iterator2.return());\n        case 130:\n          _context.prev = 130;\n          if (!_didIteratorError2) {\n            _context.next = 133;\n            break;\n          }\n          throw _iteratorError2;\n        case 133:\n          return _context.finish(130);\n        case 134:\n          return _context.finish(125);\n        case 135:\n          return _context.abrupt(\"return\");\n        case 136:\n          throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n        case 137:\n          throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n        case 138:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[24, 34, 37, 40], [45, 55, 58, 61], [75, 88, 92, 102], [93,, 97, 101], [108, 121, 125, 135], [126,, 130, 134]]);\n  }));\n  return _normaliseInput.apply(this, arguments);\n}\nfunction toPin(input) {\n  var path = input.cid || \"\".concat(input.path);\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  /** @type {Pin} */\n  var pin = {\n    path: path,\n    recursive: input.recursive !== false\n  };\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n  return pin;\n}\nmodule.exports = {\n  normaliseInput: normaliseInput\n};","map":{"version":3,"names":["errCode","require","CID","normaliseInput","input","undefined","Error","cid","asCID","toPin","String","path","Symbol","iterator","first","next","done","value","obj","asyncIterator","pin","recursive","metadata","module","exports"],"sources":["C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/ipfs-core-utils/src/pins/normalise-input.js"],"sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst { CID } = require('multiformats/cid')\n\n/**\n * @typedef {Object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {Object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\nasync function * normaliseInput (input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // CID\n  const cid = CID.asCID(input)\n\n  if (cid) {\n    yield toPin({ cid })\n    return\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({ path: input })\n    return\n  }\n\n  // { cid: CID recursive, metadata }\n  // @ts-ignore - it still could be iterable or async iterable\n  if (input.cid != null || input.path != null) {\n    // @ts-ignore\n    return yield toPin(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input) {\n    // @ts-ignore\n    const iterator = input[Symbol.iterator]()\n    const first = iterator.next()\n    if (first.done) return iterator\n\n    // Iterable<CID|String>\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value })\n      for (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // Iterable<{ cid: CID recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // AsyncIterable<?>\n  if (Symbol.asyncIterator in input) {\n    // @ts-ignore\n    const iterator = input[Symbol.asyncIterator]()\n    const first = await iterator.next()\n    if (first.done) return iterator\n\n    // AsyncIterable<CID|String>\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value })\n      for await (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // AsyncIterable<{ cid: CID|String recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for await (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {Pinnable} input\n */\nfunction toPin (input) {\n  const path = input.cid || `${input.path}`\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  /** @type {Pin} */\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  }\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata\n  }\n\n  return pin\n}\n\nmodule.exports = {\n  normaliseInput\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}