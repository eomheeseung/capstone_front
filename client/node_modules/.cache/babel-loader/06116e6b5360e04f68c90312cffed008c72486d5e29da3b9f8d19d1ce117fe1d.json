{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nvar _classCallCheck = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/paete/Prototype/nftmusicProtoCopy/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SystemRandomSource = void 0;\nvar browser_1 = require(\"./browser\");\nvar node_1 = require(\"./node\");\nvar SystemRandomSource = /*#__PURE__*/function () {\n  function SystemRandomSource() {\n    _classCallCheck(this, SystemRandomSource);\n    this.isAvailable = false;\n    this.name = \"\";\n    // Try browser.\n    this._source = new browser_1.BrowserRandomSource();\n    if (this._source.isAvailable) {\n      this.isAvailable = true;\n      this.name = \"Browser\";\n      return;\n    }\n    // If no browser source, try Node.\n    this._source = new node_1.NodeRandomSource();\n    if (this._source.isAvailable) {\n      this.isAvailable = true;\n      this.name = \"Node\";\n      return;\n    }\n    // No sources, we're out of options.\n  }\n  _createClass(SystemRandomSource, [{\n    key: \"randomBytes\",\n    value: function randomBytes(length) {\n      if (!this.isAvailable) {\n        throw new Error(\"System random byte generator is not available.\");\n      }\n      return this._source.randomBytes(length);\n    }\n  }]);\n  return SystemRandomSource;\n}();\nexports.SystemRandomSource = SystemRandomSource;","map":{"version":3,"mappings":";;AAAA;AACA;AAAA;AAAA;;;;;AAGA;AACA;AAA0C,IAE7BA,kBAAkB;EAK3B;IAAA;IAJA,gBAAW,GAAG,KAAK;IACnB,SAAI,GAAG,EAAE;IAIL;IACA,IAAI,CAACC,OAAO,GAAG,IAAIC,6BAAmB,EAAE;IACxC,IAAI,IAAI,CAACD,OAAO,CAACE,WAAW,EAAE;MAC1B,IAAI,CAACA,WAAW,GAAG,IAAI;MACvB,IAAI,CAACC,IAAI,GAAG,SAAS;MACrB;;IAGJ;IACA,IAAI,CAACH,OAAO,GAAG,IAAII,uBAAgB,EAAE;IACrC,IAAI,IAAI,CAACJ,OAAO,CAACE,WAAW,EAAE;MAC1B,IAAI,CAACA,WAAW,GAAG,IAAI;MACvB,IAAI,CAACC,IAAI,GAAG,MAAM;MAClB;;IAGJ;EACJ;EAAC;IAAA;IAAA,OAED,qBAAYE,MAAc;MACtB,IAAI,CAAC,IAAI,CAACH,WAAW,EAAE;QACnB,MAAM,IAAII,KAAK,CAAC,gDAAgD,CAAC;;MAErE,OAAO,IAAI,CAACN,OAAO,CAACO,WAAW,CAACF,MAAM,CAAC;IAC3C;EAAC;EAAA;AAAA;AA9BLG","names":["SystemRandomSource","_source","browser_1","isAvailable","name","node_1","length","Error","randomBytes","exports"],"sources":["C:\\Users\\paete\\Prototype\\nftmusicProtoCopy\\client\\node_modules\\@stablelib\\random\\source\\system.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nimport { RandomSource } from \"./\";\nimport { BrowserRandomSource } from \"./browser\";\nimport { NodeRandomSource } from \"./node\";\n\nexport class SystemRandomSource implements RandomSource {\n    isAvailable = false;\n    name = \"\";\n    private _source: RandomSource;\n\n    constructor() {\n        // Try browser.\n        this._source = new BrowserRandomSource();\n        if (this._source.isAvailable) {\n            this.isAvailable = true;\n            this.name = \"Browser\";\n            return;\n        }\n\n        // If no browser source, try Node.\n        this._source = new NodeRandomSource();\n        if (this._source.isAvailable) {\n            this.isAvailable = true;\n            this.name = \"Node\";\n            return;\n        }\n\n        // No sources, we're out of options.\n    }\n\n    randomBytes(length: number): Uint8Array {\n        if (!this.isAvailable) {\n            throw new Error(\"System random byte generator is not available.\");\n        }\n        return this._source.randomBytes(length);\n    }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}